
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800392c  0800392c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800392c  0800392c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000090  080039c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080039c4  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2a5  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d5  00000000  00000000  0002e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00030638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  00031fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e005  00000000  00000000  0004a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5d7  00000000  00000000  00058687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3c5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000397c  00000000  00000000  000e3cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080038ac 	.word	0x080038ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080038ac 	.word	0x080038ac

0800014c <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <updateDisplay+0x34>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <updateDisplay+0x38>)
 8000156:	fb82 1203 	smull	r1, r2, r2, r3
 800015a:	1192      	asrs	r2, r2, #6
 800015c:	17db      	asrs	r3, r3, #31
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	461a      	mov	r2, r3
 8000162:	4909      	ldr	r1, [pc, #36]	; (8000188 <updateDisplay+0x3c>)
 8000164:	4809      	ldr	r0, [pc, #36]	; (800018c <updateDisplay+0x40>)
 8000166:	f002 ff67 	bl	8003038 <siprintf>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	4906      	ldr	r1, [pc, #24]	; (800018c <updateDisplay+0x40>)
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <updateDisplay+0x44>)
 8000176:	f002 fdc2 	bl	8002cfe <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000008 	.word	0x20000008
 8000184:	10624dd3 	.word	0x10624dd3
 8000188:	080038c4 	.word	0x080038c4
 800018c:	20000104 	.word	0x20000104
 8000190:	200001c8 	.word	0x200001c8

08000194 <WhichButtonIsPressed>:
#include "traffic_light.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fac1 	bl	8000720 <is_button_pressed>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <WhichButtonIsPressed+0x14>
 80001a4:	2301      	movs	r3, #1
 80001a6:	e010      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fab9 	bl	8000720 <is_button_pressed>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <WhichButtonIsPressed+0x24>
 80001b4:	2302      	movs	r3, #2
 80001b6:	e008      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 80001b8:	2002      	movs	r0, #2
 80001ba:	f000 fab1 	bl	8000720 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <WhichButtonIsPressed+0x34>
 80001c4:	2303      	movs	r3, #3
 80001c6:	e000      	b.n	80001ca <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 80001c8:	2300      	movs	r3, #0
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	bd80      	pop	{r7, pc}
	...

080001d0 <clear_vertical>:

void clear_vertical() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <clear_vertical+0x20>)
 80001dc:	f001 fa60 	bl	80016a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <clear_vertical+0x20>)
 80001e8:	f001 fa5a 	bl	80016a0 <HAL_GPIO_WritePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <clear_horizontal>:

void clear_horizontal() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <clear_horizontal+0x1c>)
 80001fe:	f001 fa4f 	bl	80016a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2101      	movs	r1, #1
 8000206:	4803      	ldr	r0, [pc, #12]	; (8000214 <clear_horizontal+0x20>)
 8000208:	f001 fa4a 	bl	80016a0 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010800 	.word	0x40010800
 8000214:	40010c00 	.word	0x40010c00

08000218 <vertical_processing>:

void vertical_processing() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	clear_vertical();
 800021c:	f7ff ffd8 	bl	80001d0 <clear_vertical>
	switch (CURRENT_STATE[0]) {
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <vertical_processing+0x74>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d020      	beq.n	800026a <vertical_processing+0x52>
 8000228:	2b02      	cmp	r3, #2
 800022a:	dc2b      	bgt.n	8000284 <vertical_processing+0x6c>
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <vertical_processing+0x1e>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00d      	beq.n	8000250 <vertical_processing+0x38>
		HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, GPIO_PIN_SET);
		//set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000234:	e026      	b.n	8000284 <vertical_processing+0x6c>
		HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4814      	ldr	r0, [pc, #80]	; (8000290 <vertical_processing+0x78>)
 800023e:	f001 fa2f 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000248:	4811      	ldr	r0, [pc, #68]	; (8000290 <vertical_processing+0x78>)
 800024a:	f001 fa29 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 800024e:	e01a      	b.n	8000286 <vertical_processing+0x6e>
		HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	480e      	ldr	r0, [pc, #56]	; (8000290 <vertical_processing+0x78>)
 8000258:	f001 fa22 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <vertical_processing+0x78>)
 8000264:	f001 fa1c 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 8000268:	e00d      	b.n	8000286 <vertical_processing+0x6e>
		HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <vertical_processing+0x78>)
 8000272:	f001 fa15 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <vertical_processing+0x78>)
 800027e:	f001 fa0f 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 8000282:	e000      	b.n	8000286 <vertical_processing+0x6e>
		break;
 8000284:	bf00      	nop
	}
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	40010c00 	.word	0x40010c00

08000294 <horizontal_processing>:

void horizontal_processing() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	clear_horizontal();
 8000298:	f7ff ffac 	bl	80001f4 <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <horizontal_processing+0x68>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	d01c      	beq.n	80002de <horizontal_processing+0x4a>
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	dc25      	bgt.n	80002f4 <horizontal_processing+0x60>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <horizontal_processing+0x1e>
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d00b      	beq.n	80002c8 <horizontal_processing+0x34>
		HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, GPIO_PIN_SET);
		//set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
		break;
	default:
		break;
 80002b0:	e020      	b.n	80002f4 <horizontal_processing+0x60>
		HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	4812      	ldr	r0, [pc, #72]	; (8000300 <horizontal_processing+0x6c>)
 80002b8:	f001 f9f2 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2110      	movs	r1, #16
 80002c0:	4810      	ldr	r0, [pc, #64]	; (8000304 <horizontal_processing+0x70>)
 80002c2:	f001 f9ed 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 80002c6:	e016      	b.n	80002f6 <horizontal_processing+0x62>
		HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2101      	movs	r1, #1
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <horizontal_processing+0x6c>)
 80002ce:	f001 f9e7 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2110      	movs	r1, #16
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <horizontal_processing+0x70>)
 80002d8:	f001 f9e2 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 80002dc:	e00b      	b.n	80002f6 <horizontal_processing+0x62>
		HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2101      	movs	r1, #1
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <horizontal_processing+0x6c>)
 80002e4:	f001 f9dc 	bl	80016a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2110      	movs	r1, #16
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <horizontal_processing+0x70>)
 80002ee:	f001 f9d7 	bl	80016a0 <HAL_GPIO_WritePin>
		break;
 80002f2:	e000      	b.n	80002f6 <horizontal_processing+0x62>
		break;
 80002f4:	bf00      	nop
	}
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000
 8000300:	40010c00 	.word	0x40010c00
 8000304:	40010800 	.word	0x40010800

08000308 <state_update>:

void state_update(int idx) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d11e      	bne.n	8000354 <state_update+0x4c>
		switch (CURRENT_STATE[idx]) {
 8000316:	4a21      	ldr	r2, [pc, #132]	; (800039c <state_update+0x94>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d012      	beq.n	8000348 <state_update+0x40>
 8000322:	2b02      	cmp	r3, #2
 8000324:	dc29      	bgt.n	800037a <state_update+0x72>
 8000326:	2b00      	cmp	r3, #0
 8000328:	d002      	beq.n	8000330 <state_update+0x28>
 800032a:	2b01      	cmp	r3, #1
 800032c:	d006      	beq.n	800033c <state_update+0x34>
			break;
		case 2:
			CURRENT_STATE[idx] = 1;
			break;
		default:
			break;
 800032e:	e024      	b.n	800037a <state_update+0x72>
			CURRENT_STATE[idx] = 2;
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <state_update+0x94>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2102      	movs	r1, #2
 8000336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800033a:	e01f      	b.n	800037c <state_update+0x74>
			CURRENT_STATE[idx] = 0;
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <state_update+0x94>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2100      	movs	r1, #0
 8000342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000346:	e019      	b.n	800037c <state_update+0x74>
			CURRENT_STATE[idx] = 1;
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <state_update+0x94>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2101      	movs	r1, #1
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000352:	e013      	b.n	800037c <state_update+0x74>
		}
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <state_update+0x94>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	1c99      	adds	r1, r3, #2
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <state_update+0x98>)
 8000360:	fb83 3201 	smull	r3, r2, r3, r1
 8000364:	17cb      	asrs	r3, r1, #31
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	4613      	mov	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	1aca      	subs	r2, r1, r3
 8000370:	490a      	ldr	r1, [pc, #40]	; (800039c <state_update+0x94>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000378:	e000      	b.n	800037c <state_update+0x74>
			break;
 800037a:	bf00      	nop
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <state_update+0x94>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <state_update+0x9c>)
 8000386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038a:	4907      	ldr	r1, [pc, #28]	; (80003a8 <state_update+0xa0>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	20000000 	.word	0x20000000
 80003a0:	55555556 	.word	0x55555556
 80003a4:	20000010 	.word	0x20000010
 80003a8:	20000008 	.word	0x20000008

080003ac <check_state>:

void check_state() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <check_state+0x2c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	dc04      	bgt.n	80003c2 <check_state+0x16>
		state_update(VER_LED);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f7ff ffa5 	bl	8000308 <state_update>
		vertical_processing();
 80003be:	f7ff ff2b 	bl	8000218 <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <check_state+0x2c>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	dc04      	bgt.n	80003d4 <check_state+0x28>
		state_update(HOR_LED);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ff9c 	bl	8000308 <state_update>
		horizontal_processing();
 80003d0:	f7ff ff60 	bl	8000294 <horizontal_processing>
	}
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000008 	.word	0x20000008

080003dc <update_clock>:

void update_clock() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <update_clock+0x38>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d113      	bne.n	8000410 <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <update_clock+0x3c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <update_clock+0x3c>)
 80003f2:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <update_clock+0x3c>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80003fc:	4a06      	ldr	r2, [pc, #24]	; (8000418 <update_clock+0x3c>)
 80003fe:	6053      	str	r3, [r2, #4]
		check_state();
 8000400:	f7ff ffd4 	bl	80003ac <check_state>
		updateDisplay();
 8000404:	f7ff fea2 	bl	800014c <updateDisplay>
		setTimer2(1000);
 8000408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040c:	f000 fc48 	bl	8000ca0 <setTimer2>
	}
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000d4 	.word	0x200000d4
 8000418:	20000008 	.word	0x20000008

0800041c <reset>:

void reset() {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED * TIME_UNIT;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <reset+0x4c>)
 8000422:	f241 3288 	movw	r2, #5000	; 0x1388
 8000426:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW * TIME_UNIT;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <reset+0x4c>)
 800042a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800042e:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN * TIME_UNIT;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <reset+0x4c>)
 8000432:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000436:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <reset+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <reset+0x50>)
 8000440:	2202      	movs	r2, #2
 8000442:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <reset+0x50>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <reset+0x4c>)
 800044a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <reset+0x54>)
 8000450:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <reset+0x50>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <reset+0x4c>)
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <reset+0x54>)
 800045e:	6053      	str	r3, [r2, #4]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000010 	.word	0x20000010
 800046c:	20000000 	.word	0x20000000
 8000470:	20000008 	.word	0x20000008

08000474 <restart>:

void restart(){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	status = 0;
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <restart+0x14>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000ac 	.word	0x200000ac

0800048c <confirm_action>:

void confirm_action(int mode) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b03      	cmp	r3, #3
 8000498:	d82e      	bhi.n	80004f8 <confirm_action+0x6c>
 800049a:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <confirm_action+0x14>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	080004f9 	.word	0x080004f9
 80004a4:	080004b1 	.word	0x080004b1
 80004a8:	080004c9 	.word	0x080004c9
 80004ac:	080004e1 	.word	0x080004e1
	switch (mode) {
	case 0: //Normal mode -> do nothing
		return;
	case 1: // Inc red time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <confirm_action+0x78>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <confirm_action+0x7c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004bc:	fb01 f303 	mul.w	r3, r1, r3
 80004c0:	4413      	add	r3, r2
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <confirm_action+0x78>)
 80004c4:	6013      	str	r3, [r2, #0]
		break;
 80004c6:	e018      	b.n	80004fa <confirm_action+0x6e>
	case 2: // Inc yellow time mode
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (TIMES_INC * TIME_UNIT);
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <confirm_action+0x78>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <confirm_action+0x7c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d4:	fb01 f303 	mul.w	r3, r1, r3
 80004d8:	4413      	add	r3, r2
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <confirm_action+0x78>)
 80004dc:	6053      	str	r3, [r2, #4]
		break;
 80004de:	e00c      	b.n	80004fa <confirm_action+0x6e>
	case 3: // Inc green time
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <confirm_action+0x78>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <confirm_action+0x7c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ec:	fb01 f303 	mul.w	r3, r1, r3
 80004f0:	4413      	add	r3, r2
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <confirm_action+0x78>)
 80004f4:	6093      	str	r3, [r2, #8]
		break;
 80004f6:	e000      	b.n	80004fa <confirm_action+0x6e>
	default:
		break;
 80004f8:	bf00      	nop
	}

}
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000010 	.word	0x20000010
 8000508:	200000b8 	.word	0x200000b8

0800050c <state_handle>:

void state_handle() {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <state_handle+0x9c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d841      	bhi.n	800059c <state_handle+0x90>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <state_handle+0x14>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800053f 	.word	0x0800053f
 8000528:	0800055f 	.word	0x0800055f
 800052c:	0800057f 	.word	0x0800057f
	case 0:
		SEG7_CLOCK[VER_LED] = 0;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <state_handle+0xa0>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <state_handle+0xa0>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
		break;
 800053c:	e02f      	b.n	800059e <state_handle+0x92>
	case 1:
		SEG7_CLOCK[VER_LED] = 1 * TIME_UNIT;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <state_handle+0xa0>)
 8000540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000544:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[0] + TIMES_INC * TIME_UNIT;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <state_handle+0xa4>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <state_handle+0xa8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000552:	fb01 f303 	mul.w	r3, r1, r3
 8000556:	4413      	add	r3, r2
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <state_handle+0xa0>)
 800055a:	6053      	str	r3, [r2, #4]
		break;
 800055c:	e01f      	b.n	800059e <state_handle+0x92>
	case 2:
		SEG7_CLOCK[VER_LED] = 2  * TIME_UNIT;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <state_handle+0xa0>)
 8000560:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000564:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[1] + TIMES_INC * TIME_UNIT;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <state_handle+0xa4>)
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <state_handle+0xa8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000572:	fb01 f303 	mul.w	r3, r1, r3
 8000576:	4413      	add	r3, r2
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <state_handle+0xa0>)
 800057a:	6053      	str	r3, [r2, #4]
		break;
 800057c:	e00f      	b.n	800059e <state_handle+0x92>
	case 3:
		SEG7_CLOCK[VER_LED] = 3  * TIME_UNIT;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <state_handle+0xa0>)
 8000580:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000584:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <state_handle+0xa4>)
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <state_handle+0xa8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000592:	fb01 f303 	mul.w	r3, r1, r3
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <state_handle+0xa0>)
 800059a:	6053      	str	r3, [r2, #4]
	default:
		break;
 800059c:	bf00      	nop
	}
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000010 	.word	0x20000010
 80005b4:	200000b8 	.word	0x200000b8

080005b8 <traffic_processing>:

void traffic_processing() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	switch (status) {
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <traffic_processing+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d027      	beq.n	8000614 <traffic_processing+0x5c>
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	dc28      	bgt.n	800061a <traffic_processing+0x62>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <traffic_processing+0x1a>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d01e      	beq.n	800060e <traffic_processing+0x56>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 80005d0:	e023      	b.n	800061a <traffic_processing+0x62>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <traffic_processing+0x6c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <traffic_processing+0x6c>)
 80005da:	2202      	movs	r2, #2
 80005dc:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <traffic_processing+0x6c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <traffic_processing+0x70>)
 80005e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <traffic_processing+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <traffic_processing+0x6c>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <traffic_processing+0x70>)
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <traffic_processing+0x74>)
 80005f8:	6053      	str	r3, [r2, #4]
		updateDisplay();
 80005fa:	f7ff fda7 	bl	800014c <updateDisplay>
		vertical_processing();
 80005fe:	f7ff fe0b 	bl	8000218 <vertical_processing>
		horizontal_processing();
 8000602:	f7ff fe47 	bl	8000294 <horizontal_processing>
		status = 1;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <traffic_processing+0x68>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
		break;
 800060c:	e006      	b.n	800061c <traffic_processing+0x64>
		update_clock();
 800060e:	f7ff fee5 	bl	80003dc <update_clock>
		break;
 8000612:	e003      	b.n	800061c <traffic_processing+0x64>
		state_handle();
 8000614:	f7ff ff7a 	bl	800050c <state_handle>
		break;
 8000618:	e000      	b.n	800061c <traffic_processing+0x64>
		break;
 800061a:	bf00      	nop
	}
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000ac 	.word	0x200000ac
 8000624:	20000000 	.word	0x20000000
 8000628:	20000010 	.word	0x20000010
 800062c:	20000008 	.word	0x20000008

08000630 <input_processing>:

void input_processing() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f873 	bl	8000720 <is_button_pressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d011      	beq.n	8000664 <input_processing+0x34>
		status = 2;
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <input_processing+0xa0>)
 8000642:	2202      	movs	r2, #2
 8000644:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1) % 4;
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <input_processing+0xa4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	425a      	negs	r2, r3
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	f002 0203 	and.w	r2, r2, #3
 8000656:	bf58      	it	pl
 8000658:	4253      	negpl	r3, r2
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <input_processing+0xa4>)
 800065c:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <input_processing+0xa8>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	}

	// Add button
	if (is_button_pressed(1) && index_mode != 0) {
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f85b 	bl	8000720 <is_button_pressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <input_processing+0x52>
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <input_processing+0xa4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d004      	beq.n	8000682 <input_processing+0x52>
		TIMES_INC++;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <input_processing+0xa8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <input_processing+0xa8>)
 8000680:	6013      	str	r3, [r2, #0]
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != 0) {
 8000682:	2002      	movs	r0, #2
 8000684:	f000 f84c 	bl	8000720 <is_button_pressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <input_processing+0x88>
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <input_processing+0xa4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d010      	beq.n	80006b8 <input_processing+0x88>
		if (TIMES_INC != 0) {
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <input_processing+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d004      	beq.n	80006a8 <input_processing+0x78>
			confirm_action(index_mode);
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <input_processing+0xa4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fef2 	bl	800048c <confirm_action>
		}
		TIMES_INC = 0;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <input_processing+0xa8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
		index_mode = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <input_processing+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
		restart();
 80006b4:	f7ff fede 	bl	8000474 <restart>
	}

	// RESET when start
	if (start == 0) {
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <input_processing+0xac>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <input_processing+0x9a>
		reset();
 80006c0:	f7ff feac 	bl	800041c <reset>
		start = 1;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <input_processing+0xac>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	200000b4 	.word	0x200000b4
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	200000b0 	.word	0x200000b0

080006e0 <fsm_simple_button_run>:

void fsm_simple_button_run() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch (buttonState) {
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <fsm_simple_button_run+0x3c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <fsm_simple_button_run+0x12>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d00a      	beq.n	8000706 <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 80006f0:	e011      	b.n	8000716 <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 80006f2:	f7ff fd4f 	bl	8000194 <WhichButtonIsPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d004      	beq.n	8000706 <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <fsm_simple_button_run+0x3c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
			input_processing();
 8000702:	f7ff ff95 	bl	8000630 <input_processing>
		if (!WhichButtonIsPressed()) {
 8000706:	f7ff fd45 	bl	8000194 <WhichButtonIsPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <fsm_simple_button_run+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		break;
 8000716:	bf00      	nop
	}
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000bc 	.word	0x200000bc

08000720 <is_button_pressed>:
			}
		}
	}
}
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d901      	bls.n	8000734 <is_button_pressed+0x14>
 8000730:	2300      	movs	r3, #0
 8000732:	e007      	b.n	8000744 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <is_button_pressed+0x30>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000c0 	.word	0x200000c0

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fcae 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f81e 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f94a 	bl	80009f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000764:	f000 f91e 	bl	80009a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000768:	f000 f85a 	bl	8000820 <MX_TIM2_Init>
  MX_TIM3_Init();
 800076c:	f000 f8a4 	bl	80008b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <main+0x40>)
 8000772:	f001 fc2f 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <main+0x44>)
 8000778:	f001 fc2c 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //SCH_Init();


  find_new_min_task();
 800077c:	f000 fa46 	bl	8000c0c <find_new_min_task>
  setTimer2(1000);
 8000780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000784:	f000 fa8c 	bl	8000ca0 <setTimer2>
//	  SCH_Go_To_Sleep();
	  // turn of LED for indicate while MCU is sleeping.
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_simple_button_run();
 8000788:	f7ff ffaa 	bl	80006e0 <fsm_simple_button_run>
	  traffic_processing();
 800078c:	f7ff ff14 	bl	80005b8 <traffic_processing>
  {
 8000790:	e7fa      	b.n	8000788 <main+0x34>
 8000792:	bf00      	nop
 8000794:	20000180 	.word	0x20000180
 8000798:	20000138 	.word	0x20000138

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fc3c 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 ff8f 	bl	8001700 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007e8:	f000 f9b5 	bl	8000b56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f9fa 	bl	8001c00 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000812:	f000 f9a0 	bl	8000b56 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM2_Init+0x94>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000846:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000854:	2213      	movs	r2, #19
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_TIM2_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000866:	f001 fb65 	bl	8001f34 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000870:	f000 f971 	bl	8000b56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_TIM2_Init+0x94>)
 8000882:	f001 fe17 	bl	80024b4 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800088c:	f000 f963 	bl	8000b56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM2_Init+0x94>)
 800089e:	f002 f971 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f955 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000180 	.word	0x20000180

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <MX_TIM3_Init+0xe4>)
 80008ea:	4a2d      	ldr	r2, [pc, #180]	; (80009a0 <MX_TIM3_Init+0xe8>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_TIM3_Init+0xe4>)
 80008f0:	223f      	movs	r2, #63	; 0x3f
 80008f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_TIM3_Init+0xe4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_TIM3_Init+0xe4>)
 80008fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM3_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_TIM3_Init+0xe4>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800090e:	4823      	ldr	r0, [pc, #140]	; (800099c <MX_TIM3_Init+0xe4>)
 8000910:	f001 fb10 	bl	8001f34 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800091a:	f000 f91c 	bl	8000b56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_TIM3_Init+0xe4>)
 800092c:	f001 fdc2 	bl	80024b4 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000936:	f000 f90e 	bl	8000b56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800093a:	4818      	ldr	r0, [pc, #96]	; (800099c <MX_TIM3_Init+0xe4>)
 800093c:	f001 fb9c 	bl	8002078 <HAL_TIM_PWM_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000946:	f000 f906 	bl	8000b56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4619      	mov	r1, r3
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <MX_TIM3_Init+0xe4>)
 800095a:	f002 f913 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000964:	f000 f8f7 	bl	8000b56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	; 0x60
 800096a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM3_Init+0xe4>)
 8000980:	f001 fcda 	bl	8002338 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800098a:	f000 f8e4 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM3_Init+0xe4>)
 8000990:	f000 fa7c 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	; 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000138 	.word	0x20000138
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f002 f942 	bl	8002c64 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f8b6 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001c8 	.word	0x200001c8
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a2a:	f043 0320 	orr.w	r3, r3, #32
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0x114>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Traffic_2_2_Pin|LD2_Pin|Traffic_Pedes_2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <MX_GPIO_Init+0x118>)
 8000a74:	f000 fe14 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin|Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_1_1_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f240 7101 	movw	r1, #1793	; 0x701
 8000a7e:	4825      	ldr	r0, [pc, #148]	; (8000b14 <MX_GPIO_Init+0x11c>)
 8000a80:	f000 fe0e 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	4820      	ldr	r0, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x124>)
 8000a9a:	f000 fc7d 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <MX_GPIO_Init+0x118>)
 8000ab2:	f000 fc71 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_2_2_Pin LD2_Pin Traffic_Pedes_2_Pin */
  GPIO_InitStruct.Pin = Traffic_2_2_Pin|LD2_Pin|Traffic_Pedes_2_Pin;
 8000ab6:	f44f 7398 	mov.w	r3, #304	; 0x130
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4810      	ldr	r0, [pc, #64]	; (8000b10 <MX_GPIO_Init+0x118>)
 8000ad0:	f000 fc62 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_2_1_Pin Traffic_Pedes_1_Pin Traffic_1_2_Pin Traffic_1_1_Pin */
  GPIO_InitStruct.Pin = Traffic_2_1_Pin|Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_1_1_Pin;
 8000ad4:	f240 7301 	movw	r3, #1793	; 0x701
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_GPIO_Init+0x11c>)
 8000aee:	f000 fc53 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f000 fc17 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f000 fc30 	bl	8001362 <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	40010c00 	.word	0x40010c00
 8000b18:	10110000 	.word	0x10110000
 8000b1c:	40011000 	.word	0x40011000

08000b20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b30:	d103      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x1a>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 8000b32:	f000 f8cf 	bl	8000cd4 <timerRun>
		SCH_Update();
 8000b36:	f000 f813 	bl	8000b60 <SCH_Update>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	80fb      	strh	r3, [r7, #6]

}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5a:	b672      	cpsid	i
}
 8000b5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <Error_Handler+0x8>

08000b60 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <SCH_Update+0xa4>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4927      	ldr	r1, [pc, #156]	; (8000c08 <SCH_Update+0xa8>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <SCH_Update+0x44>
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <SCH_Update+0xa4>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4921      	ldr	r1, [pc, #132]	; (8000c08 <SCH_Update+0xa8>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1e59      	subs	r1, r3, #1
 8000b92:	481d      	ldr	r0, [pc, #116]	; (8000c08 <SCH_Update+0xa8>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4403      	add	r3, r0
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 8000ba2:	e02a      	b.n	8000bfa <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <SCH_Update+0xa4>)
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <SCH_Update+0xa4>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4816      	ldr	r0, [pc, #88]	; (8000c08 <SCH_Update+0xa8>)
 8000bae:	460b      	mov	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4403      	add	r3, r0
 8000bb8:	3308      	adds	r3, #8
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <SCH_Update+0xa8>)
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4403      	add	r3, r0
 8000bc8:	3304      	adds	r3, #4
 8000bca:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <SCH_Update+0xa4>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	490d      	ldr	r1, [pc, #52]	; (8000c08 <SCH_Update+0xa8>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	330c      	adds	r3, #12
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <SCH_Update+0xa4>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <SCH_Update+0xa8>)
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	330c      	adds	r3, #12
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000c8 	.word	0x200000c8
 8000c08:	2000020c 	.word	0x2000020c

08000c0c <find_new_min_task>:
	}

	find_new_min_task();
}

void find_new_min_task() {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	// find new min index of schedule array
	min_index = 0;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <find_new_min_task+0x84>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	min_delay = SCH_tasks_G[min_index].Delay;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <find_new_min_task+0x84>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	491d      	ldr	r1, [pc, #116]	; (8000c94 <find_new_min_task+0x88>)
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	3304      	adds	r3, #4
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <find_new_min_task+0x8c>)
 8000c30:	601a      	str	r2, [r3, #0]

	for (int i = min_index + 1; i < current_index_task; i++) {
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <find_new_min_task+0x84>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e01e      	b.n	8000c7a <find_new_min_task+0x6e>
		if (SCH_tasks_G[i].Delay < min_delay) {
 8000c3c:	4915      	ldr	r1, [pc, #84]	; (8000c94 <find_new_min_task+0x88>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <find_new_min_task+0x8c>)
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d20e      	bcs.n	8000c74 <find_new_min_task+0x68>
			min_index = i;
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <find_new_min_task+0x84>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6013      	str	r3, [r2, #0]
			min_delay = SCH_tasks_G[i].Delay;
 8000c5c:	490d      	ldr	r1, [pc, #52]	; (8000c94 <find_new_min_task+0x88>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <find_new_min_task+0x8c>)
 8000c72:	601a      	str	r2, [r3, #0]
	for (int i = min_index + 1; i < current_index_task; i++) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3301      	adds	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <find_new_min_task+0x90>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbdb      	blt.n	8000c3c <find_new_min_task+0x30>
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	200000c8 	.word	0x200000c8
 8000c94:	2000020c 	.word	0x2000020c
 8000c98:	200000cc 	.word	0x200000cc
 8000c9c:	200000c4 	.word	0x200000c4

08000ca0 <setTimer2>:
int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
	timer1_counter = duration / TIMER_CYCLE;
	timer1_flag = 0;
}
void setTimer2(int duration) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <setTimer2+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <setTimer2+0x2c>)
 8000cb4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <setTimer2+0x30>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000001c 	.word	0x2000001c
 8000ccc:	200000e8 	.word	0x200000e8
 8000cd0:	200000d4 	.word	0x200000d4

08000cd4 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <timerRun+0xac>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dd0b      	ble.n	8000cf8 <timerRun+0x24>
		timer1_counter--;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <timerRun+0xac>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <timerRun+0xac>)
 8000ce8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <timerRun+0xac>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dc02      	bgt.n	8000cf8 <timerRun+0x24>
			timer1_flag = 1;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <timerRun+0xb0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <timerRun+0xb4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd0b      	ble.n	8000d18 <timerRun+0x44>
		timer2_counter--;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <timerRun+0xb4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <timerRun+0xb4>)
 8000d08:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <timerRun+0xb4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dc02      	bgt.n	8000d18 <timerRun+0x44>
			timer2_flag = 1;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <timerRun+0xb8>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <timerRun+0xbc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd0b      	ble.n	8000d38 <timerRun+0x64>
		timer3_counter--;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <timerRun+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <timerRun+0xbc>)
 8000d28:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <timerRun+0xbc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dc02      	bgt.n	8000d38 <timerRun+0x64>
			timer3_flag = 1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <timerRun+0xc0>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <timerRun+0xc4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dd0b      	ble.n	8000d58 <timerRun+0x84>
		timer4_counter--;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <timerRun+0xc4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <timerRun+0xc4>)
 8000d48:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <timerRun+0xc4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dc02      	bgt.n	8000d58 <timerRun+0x84>
			timer4_flag = 1;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <timerRun+0xc8>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <timerRun+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd0b      	ble.n	8000d78 <timerRun+0xa4>
		timer5_counter--;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <timerRun+0xcc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <timerRun+0xcc>)
 8000d68:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <timerRun+0xcc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dc02      	bgt.n	8000d78 <timerRun+0xa4>
			timer5_flag = 1;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <timerRun+0xd0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	200000e4 	.word	0x200000e4
 8000d84:	200000d0 	.word	0x200000d0
 8000d88:	200000e8 	.word	0x200000e8
 8000d8c:	200000d4 	.word	0x200000d4
 8000d90:	200000ec 	.word	0x200000ec
 8000d94:	200000d8 	.word	0x200000d8
 8000d98:	200000f0 	.word	0x200000f0
 8000d9c:	200000dc 	.word	0x200000dc
 8000da0:	200000f4 	.word	0x200000f4
 8000da4:	200000e0 	.word	0x200000e0

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_MspInit+0x60>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_MspInit+0x60>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d114      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f000 fa75 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e40:	201c      	movs	r0, #28
 8000e42:	f000 fa8e 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e46:	e018      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d113      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f000 fa5b 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e74:	201d      	movs	r0, #29
 8000e76:	f000 fa74 	bl	8001362 <HAL_NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40000400 	.word	0x40000400

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_TIM_MspPostInit+0x58>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d117      	bne.n	8000edc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_TIM_MspPostInit+0x5c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_TIM_MspPostInit+0x5c>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_TIM_MspPostInit+0x5c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec4:	2340      	movs	r3, #64	; 0x40
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_TIM_MspPostInit+0x60>)
 8000ed8:	f000 fa5e 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010800 	.word	0x40010800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x70>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d123      	bne.n	8000f58 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	61d3      	str	r3, [r2, #28]
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_UART_MspInit+0x74>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f40:	230c      	movs	r3, #12
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_UART_MspInit+0x78>)
 8000f54:	f000 fa20 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f8c7 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM2_IRQHandler+0x10>)
 8000fc2:	f001 f8b1 	bl	8002128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000180 	.word	0x20000180

08000fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM3_IRQHandler+0x10>)
 8000fd6:	f001 f8a7 	bl	8002128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000138 	.word	0x20000138

08000fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fe8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fec:	f000 fb70 	bl	80016d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f001 ffd6 	bl	8002fd4 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005000 	.word	0x20005000
 8001054:	00000400 	.word	0x00000400
 8001058:	200000f8 	.word	0x200000f8
 800105c:	20000540 	.word	0x20000540

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	; (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001092:	f7ff ffe5 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f001 ffa3 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fb5b 	bl	8000754 <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010a8:	08003934 	.word	0x08003934
  ldr r2, =_sbss
 80010ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010b0:	20000540 	.word	0x20000540

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f923 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fe68 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f93b 	bl	800137e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f903 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000020 	.word	0x20000020
 800113c:	20000028 	.word	0x20000028
 8001140:	20000024 	.word	0x20000024

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000028 	.word	0x20000028
 8001164:	2000052c 	.word	0x2000052c

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	2000052c 	.word	0x2000052c

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4906      	ldr	r1, [pc, #24]	; (8001214 <__NVIC_EnableIRQ+0x34>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff90 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff2d 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff42 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff35 	bl	80011e0 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e169      	b.n	8001680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8158 	bne.w	800167a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a9a      	ldr	r2, [pc, #616]	; (8001638 <HAL_GPIO_Init+0x2a0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d05e      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013d4:	4a98      	ldr	r2, [pc, #608]	; (8001638 <HAL_GPIO_Init+0x2a0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d875      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013da:	4a98      	ldr	r2, [pc, #608]	; (800163c <HAL_GPIO_Init+0x2a4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d058      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013e0:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_GPIO_Init+0x2a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d86f      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013e6:	4a96      	ldr	r2, [pc, #600]	; (8001640 <HAL_GPIO_Init+0x2a8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d052      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013ec:	4a94      	ldr	r2, [pc, #592]	; (8001640 <HAL_GPIO_Init+0x2a8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d869      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013f2:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_GPIO_Init+0x2ac>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d04c      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013f8:	4a92      	ldr	r2, [pc, #584]	; (8001644 <HAL_GPIO_Init+0x2ac>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d863      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013fe:	4a92      	ldr	r2, [pc, #584]	; (8001648 <HAL_GPIO_Init+0x2b0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d046      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 8001404:	4a90      	ldr	r2, [pc, #576]	; (8001648 <HAL_GPIO_Init+0x2b0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d85d      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d82a      	bhi.n	8001464 <HAL_GPIO_Init+0xcc>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d859      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 8001412:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <HAL_GPIO_Init+0x80>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	08001493 	.word	0x08001493
 800141c:	0800146d 	.word	0x0800146d
 8001420:	0800147f 	.word	0x0800147f
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c7 	.word	0x080014c7
 800142c:	080014c7 	.word	0x080014c7
 8001430:	080014c7 	.word	0x080014c7
 8001434:	080014c7 	.word	0x080014c7
 8001438:	080014c7 	.word	0x080014c7
 800143c:	080014c7 	.word	0x080014c7
 8001440:	080014c7 	.word	0x080014c7
 8001444:	080014c7 	.word	0x080014c7
 8001448:	080014c7 	.word	0x080014c7
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014c7 	.word	0x080014c7
 8001454:	080014c7 	.word	0x080014c7
 8001458:	080014c7 	.word	0x080014c7
 800145c:	08001475 	.word	0x08001475
 8001460:	08001489 	.word	0x08001489
 8001464:	4a79      	ldr	r2, [pc, #484]	; (800164c <HAL_GPIO_Init+0x2b4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146a:	e02c      	b.n	80014c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e029      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	3304      	adds	r3, #4
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e024      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	3308      	adds	r3, #8
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e01f      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	330c      	adds	r3, #12
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e01a      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149a:	2304      	movs	r3, #4
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e013      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	611a      	str	r2, [r3, #16]
          break;
 80014b2:	e009      	b.n	80014c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	615a      	str	r2, [r3, #20]
          break;
 80014be:	e003      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          break;
 80014c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d801      	bhi.n	80014d2 <HAL_GPIO_Init+0x13a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_Init+0x13e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	d802      	bhi.n	80014e4 <HAL_GPIO_Init+0x14c>
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x152>
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	3b08      	subs	r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	210f      	movs	r1, #15
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	6a39      	ldr	r1, [r7, #32]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80b1 	beq.w	800167a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2bc>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a40      	ldr	r2, [pc, #256]	; (8001658 <HAL_GPIO_Init+0x2c0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_GPIO_Init+0x1ec>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3f      	ldr	r2, [pc, #252]	; (800165c <HAL_GPIO_Init+0x2c4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_GPIO_Init+0x1e8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <HAL_GPIO_Init+0x2c8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x1e4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3d      	ldr	r2, [pc, #244]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_Init+0x1e0>
 8001574:	2303      	movs	r3, #3
 8001576:	e006      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001578:	2304      	movs	r3, #4
 800157a:	e004      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 800157c:	2302      	movs	r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001584:	2300      	movs	r3, #0
 8001586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001596:	492f      	ldr	r1, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x2bc>)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	492c      	ldr	r1, [pc, #176]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4928      	ldr	r1, [pc, #160]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4922      	ldr	r1, [pc, #136]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	491e      	ldr	r1, [pc, #120]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4918      	ldr	r1, [pc, #96]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4914      	ldr	r1, [pc, #80]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d021      	beq.n	800166c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	60cb      	str	r3, [r1, #12]
 8001634:	e021      	b.n	800167a <HAL_GPIO_Init+0x2e2>
 8001636:	bf00      	nop
 8001638:	10320000 	.word	0x10320000
 800163c:	10310000 	.word	0x10310000
 8001640:	10220000 	.word	0x10220000
 8001644:	10210000 	.word	0x10210000
 8001648:	10120000 	.word	0x10120000
 800164c:	10110000 	.word	0x10110000
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40011000 	.word	0x40011000
 8001664:	40011400 	.word	0x40011400
 8001668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_GPIO_Init+0x304>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	43db      	mvns	r3, r3
 8001674:	4909      	ldr	r1, [pc, #36]	; (800169c <HAL_GPIO_Init+0x304>)
 8001676:	4013      	ands	r3, r2
 8001678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	3301      	adds	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f ae8e 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	372c      	adds	r7, #44	; 0x2c
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fa27 	bl	8000b42 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e26c      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d00c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172c:	4b8f      	ldr	r3, [pc, #572]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
 8001738:	4b8c      	ldr	r3, [pc, #560]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001746:	4b89      	ldr	r3, [pc, #548]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06c      	beq.n	800182c <HAL_RCC_OscConfig+0x12c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d168      	bne.n	800182c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e246      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x76>
 8001768:	4b80      	ldr	r3, [pc, #512]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a7f      	ldr	r2, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e02e      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7a      	ldr	r2, [pc, #488]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b78      	ldr	r3, [pc, #480]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a77      	ldr	r2, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0xbc>
 80017a2:	4b72      	ldr	r3, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a71      	ldr	r2, [pc, #452]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6f      	ldr	r3, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6e      	ldr	r2, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 80017bc:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a67      	ldr	r2, [pc, #412]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fcc4 	bl	8001168 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fcc0 	bl	8001168 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1fa      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe4>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fcb0 	bl	8001168 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fcac 	bl	8001168 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1e6      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x10c>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1ba      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4939      	ldr	r1, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fc65 	bl	8001168 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fc61 	bl	8001168 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e19b      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4927      	ldr	r1, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fc44 	bl	8001168 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc40 	bl	8001168 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e17a      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03a      	beq.n	8001984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc24 	bl	8001168 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fc20 	bl	8001168 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e15a      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 fad8 	bl	8001ef8 <RCC_Delay>
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fc0a 	bl	8001168 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	e00f      	b.n	8001978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc06 	bl	8001168 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d908      	bls.n	8001978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e140      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	42420000 	.word	0x42420000
 8001974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b9e      	ldr	r3, [pc, #632]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e9      	bne.n	8001958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a6 	beq.w	8001ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b97      	ldr	r3, [pc, #604]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a93      	ldr	r2, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b8e      	ldr	r3, [pc, #568]	; (8001bf8 <HAL_RCC_OscConfig+0x4f8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fbc7 	bl	8001168 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fbc3 	bl	8001168 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0fd      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x4f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x312>
 8001a04:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a72      	ldr	r2, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x356>
 8001a3c:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a69      	ldr	r2, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a56:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a66      	ldr	r2, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a63      	ldr	r2, [pc, #396]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb77 	bl	8001168 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb73 	bl	8001168 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0ab      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x37e>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb61 	bl	8001168 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fb5d 	bl	8001168 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e095      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8081 	beq.w	8001bea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d061      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d146      	bne.n	8001b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x4fc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb31 	bl	8001168 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fb2d 	bl	8001168 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e067      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a19      	ldr	r1, [r3, #32]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	430b      	orrs	r3, r1
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x4fc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb01 	bl	8001168 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fafd 	bl	8001168 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e037      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46a>
 8001b88:	e02f      	b.n	8001bea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_RCC_OscConfig+0x4fc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff faea 	bl	8001168 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fae6 	bl	8001168 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e020      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x498>
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e013      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42420060 	.word	0x42420060

08001c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4965      	ldr	r1, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e073      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06b      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff fa3a 	bl	8001168 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff fa36 	bl	8001168 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e053      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d210      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1cc>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f998 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	080038e0 	.word	0x080038e0
 8001dcc:	20000020 	.word	0x20000020
 8001dd0:	20000024 	.word	0x20000024

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b490      	push	{r4, r7}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ddc:	1d3c      	adds	r4, r7, #4
 8001dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de4:	f240 2301 	movw	r3, #513	; 0x201
 8001de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x46>
 8001e12:	e02d      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	623b      	str	r3, [r7, #32]
      break;
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e26:	4413      	add	r3, r2
 8001e28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c5b      	lsrs	r3, r3, #17
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e46:	4413      	add	r3, r2
 8001e48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	fb02 f203 	mul.w	r2, r2, r3
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	e004      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	623b      	str	r3, [r7, #32]
      break;
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e72:	623b      	str	r3, [r7, #32]
      break;
 8001e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc90      	pop	{r4, r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	080038d0 	.word	0x080038d0
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	007a1200 	.word	0x007a1200
 8001e90:	003d0900 	.word	0x003d0900

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000020 	.word	0x20000020

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff2 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	080038f0 	.word	0x080038f0

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	080038f0 	.word	0x080038f0

08001ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <RCC_Delay+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <RCC_Delay+0x38>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f14:	bf00      	nop
  }
  while (Delay --);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	60fa      	str	r2, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <RCC_Delay+0x1c>
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000020 	.word	0x20000020
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe ff56 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fb86 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e03a      	b.n	8002062 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_TIM_Base_Start_IT+0x98>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x58>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002016:	d009      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x58>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <HAL_TIM_Base_Start_IT+0x9c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x58>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <HAL_TIM_Base_Start_IT+0xa0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d010      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	e007      	b.n	8002060 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800

08002078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e041      	b.n	800210e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f839 	bl	8002116 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 fae4 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d122      	bne.n	8002184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0202 	mvn.w	r2, #2
 8002154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fa6f 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa62 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fa71 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d122      	bne.n	80021d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b04      	cmp	r3, #4
 800219e:	d11b      	bne.n	80021d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0204 	mvn.w	r2, #4
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa45 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa38 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa47 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d122      	bne.n	800222c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d11b      	bne.n	800222c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0208 	mvn.w	r2, #8
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa1b 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa0e 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fa1d 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b10      	cmp	r3, #16
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b10      	cmp	r3, #16
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0210 	mvn.w	r2, #16
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2208      	movs	r2, #8
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f9f1 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f9e4 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9f3 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0201 	mvn.w	r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fc3a 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fcbd 	bl	8002c52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d10e      	bne.n	8002304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f9b7 	bl	8002672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b20      	cmp	r3, #32
 8002310:	d10e      	bne.n	8002330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b20      	cmp	r3, #32
 800231e:	d107      	bne.n	8002330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0220 	mvn.w	r2, #32
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fc88 	bl	8002c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e0ac      	b.n	80024ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	f200 809f 	bhi.w	80024a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800239d 	.word	0x0800239d
 800236c:	080024a1 	.word	0x080024a1
 8002370:	080024a1 	.word	0x080024a1
 8002374:	080024a1 	.word	0x080024a1
 8002378:	080023dd 	.word	0x080023dd
 800237c:	080024a1 	.word	0x080024a1
 8002380:	080024a1 	.word	0x080024a1
 8002384:	080024a1 	.word	0x080024a1
 8002388:	0800241f 	.word	0x0800241f
 800238c:	080024a1 	.word	0x080024a1
 8002390:	080024a1 	.word	0x080024a1
 8002394:	080024a1 	.word	0x080024a1
 8002398:	0800245f 	.word	0x0800245f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f9d0 	bl	8002748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6999      	ldr	r1, [r3, #24]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	619a      	str	r2, [r3, #24]
      break;
 80023da:	e062      	b.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa16 	bl	8002814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	021a      	lsls	r2, r3, #8
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	619a      	str	r2, [r3, #24]
      break;
 800241c:	e041      	b.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa5f 	bl	80028e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0208 	orr.w	r2, r2, #8
 8002438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0204 	bic.w	r2, r2, #4
 8002448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69d9      	ldr	r1, [r3, #28]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	61da      	str	r2, [r3, #28]
      break;
 800245c:	e021      	b.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 faa9 	bl	80029bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	61da      	str	r2, [r3, #28]
      break;
 800249e:	e000      	b.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80024a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x18>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b3      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x180>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd0>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x168>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	f000 8085 	beq.w	8002620 <HAL_TIM_ConfigClockSource+0x16c>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa2>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x116>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xf6>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x136>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 faee 	bl	8002b46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04e      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f000 fad7 	bl	8002b46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 fa4e 	bl	8002a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 faa5 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fa6c 	bl	8002ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fa95 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 fa2e 	bl	8002a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fa85 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002608:	e00b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 fa7c 	bl	8002b12 <TIM_ITRx_SetConfig>
        break;
 800261a:	e002      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a29      	ldr	r2, [pc, #164]	; (800273c <TIM_Base_SetConfig+0xb8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00b      	beq.n	80026b4 <TIM_Base_SetConfig+0x30>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d007      	beq.n	80026b4 <TIM_Base_SetConfig+0x30>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a26      	ldr	r2, [pc, #152]	; (8002740 <TIM_Base_SetConfig+0xbc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_Base_SetConfig+0x30>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a25      	ldr	r2, [pc, #148]	; (8002744 <TIM_Base_SetConfig+0xc0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d108      	bne.n	80026c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <TIM_Base_SetConfig+0xb8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <TIM_Base_SetConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d007      	beq.n	80026e6 <TIM_Base_SetConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <TIM_Base_SetConfig+0xbc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d003      	beq.n	80026e6 <TIM_Base_SetConfig+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <TIM_Base_SetConfig+0xc0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <TIM_Base_SetConfig+0xb8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d103      	bne.n	800272c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	615a      	str	r2, [r3, #20]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800

08002748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <TIM_OC1_SetConfig+0xc8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d10c      	bne.n	80027be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0308 	bic.w	r3, r3, #8
 80027aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <TIM_OC1_SetConfig+0xc8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00

08002814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0210 	bic.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0320 	bic.w	r3, r3, #32
 800285e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <TIM_OC2_SetConfig+0xd0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10d      	bne.n	8002890 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <TIM_OC2_SetConfig+0xd0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d113      	bne.n	80028c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800289e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40012c00 	.word	0x40012c00

080028e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <TIM_OC3_SetConfig+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10d      	bne.n	8002962 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800294c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <TIM_OC3_SetConfig+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00

080029bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	031b      	lsls	r3, r3, #12
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <TIM_OC4_SetConfig+0x98>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d109      	bne.n	8002a30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 030a 	bic.w	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0210 	bic.w	r2, r3, #16
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f043 0307 	orr.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	609a      	str	r2, [r3, #8]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e046      	b.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d009      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10c      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800

08002c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e03f      	b.n	8002cf6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe f930 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f905 	bl	8002eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08a      	sub	sp, #40	; 0x28
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d17c      	bne.n	8002e18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_UART_Transmit+0x2c>
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e075      	b.n	8002e1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_UART_Transmit+0x3e>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e06e      	b.n	8002e1a <HAL_UART_Transmit+0x11c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fa09 	bl	8001168 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d108      	bne.n	8002d80 <HAL_UART_Transmit+0x82>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d104      	bne.n	8002d80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e003      	b.n	8002d88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d90:	e02a      	b.n	8002de8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f840 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e036      	b.n	8002e1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e007      	b.n	8002dda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1cf      	bne.n	8002d92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2140      	movs	r1, #64	; 0x40
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f810 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e006      	b.n	8002e1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	e02c      	b.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d028      	beq.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e42:	f7fe f991 	bl	8001168 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d21d      	bcs.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d0c3      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ef2:	f023 030c 	bic.w	r3, r3, #12
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2c      	ldr	r2, [pc, #176]	; (8002fcc <UART_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7fe ffd6 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	e002      	b.n	8002f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7fe ffbe 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009a      	lsls	r2, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <UART_SetConfig+0x118>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	0119      	lsls	r1, r3, #4
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <UART_SetConfig+0x118>)
 8002f66:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2064      	movs	r0, #100	; 0x64
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <UART_SetConfig+0x118>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f84:	4419      	add	r1, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <UART_SetConfig+0x118>)
 8002f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2064      	movs	r0, #100	; 0x64
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	3332      	adds	r3, #50	; 0x32
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <UART_SetConfig+0x118>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <__errno>:
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <__errno+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000002c 	.word	0x2000002c

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	4d0c      	ldr	r5, [pc, #48]	; (8003018 <__libc_init_array+0x38>)
 8002fe6:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	f000 fc5c 	bl	80038ac <_init>
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	4d0a      	ldr	r5, [pc, #40]	; (8003020 <__libc_init_array+0x40>)
 8002ff8:	4c0a      	ldr	r4, [pc, #40]	; (8003024 <__libc_init_array+0x44>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	f855 3b04 	ldr.w	r3, [r5], #4
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	0800392c 	.word	0x0800392c
 800301c:	0800392c 	.word	0x0800392c
 8003020:	0800392c 	.word	0x0800392c
 8003024:	08003930 	.word	0x08003930

08003028 <memset>:
 8003028:	4603      	mov	r3, r0
 800302a:	4402      	add	r2, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <siprintf>:
 8003038:	b40e      	push	{r1, r2, r3}
 800303a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800303e:	b500      	push	{lr}
 8003040:	b09c      	sub	sp, #112	; 0x70
 8003042:	ab1d      	add	r3, sp, #116	; 0x74
 8003044:	9002      	str	r0, [sp, #8]
 8003046:	9006      	str	r0, [sp, #24]
 8003048:	9107      	str	r1, [sp, #28]
 800304a:	9104      	str	r1, [sp, #16]
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <siprintf+0x38>)
 800304e:	4909      	ldr	r1, [pc, #36]	; (8003074 <siprintf+0x3c>)
 8003050:	f853 2b04 	ldr.w	r2, [r3], #4
 8003054:	9105      	str	r1, [sp, #20]
 8003056:	6800      	ldr	r0, [r0, #0]
 8003058:	a902      	add	r1, sp, #8
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f000 f868 	bl	8003130 <_svfiprintf_r>
 8003060:	2200      	movs	r2, #0
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	b01c      	add	sp, #112	; 0x70
 8003068:	f85d eb04 	ldr.w	lr, [sp], #4
 800306c:	b003      	add	sp, #12
 800306e:	4770      	bx	lr
 8003070:	2000002c 	.word	0x2000002c
 8003074:	ffff0208 	.word	0xffff0208

08003078 <__ssputs_r>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	688e      	ldr	r6, [r1, #8]
 800307e:	4682      	mov	sl, r0
 8003080:	429e      	cmp	r6, r3
 8003082:	460c      	mov	r4, r1
 8003084:	4690      	mov	r8, r2
 8003086:	461f      	mov	r7, r3
 8003088:	d838      	bhi.n	80030fc <__ssputs_r+0x84>
 800308a:	898a      	ldrh	r2, [r1, #12]
 800308c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003090:	d032      	beq.n	80030f8 <__ssputs_r+0x80>
 8003092:	6825      	ldr	r5, [r4, #0]
 8003094:	6909      	ldr	r1, [r1, #16]
 8003096:	3301      	adds	r3, #1
 8003098:	eba5 0901 	sub.w	r9, r5, r1
 800309c:	6965      	ldr	r5, [r4, #20]
 800309e:	444b      	add	r3, r9
 80030a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030a8:	106d      	asrs	r5, r5, #1
 80030aa:	429d      	cmp	r5, r3
 80030ac:	bf38      	it	cc
 80030ae:	461d      	movcc	r5, r3
 80030b0:	0553      	lsls	r3, r2, #21
 80030b2:	d531      	bpl.n	8003118 <__ssputs_r+0xa0>
 80030b4:	4629      	mov	r1, r5
 80030b6:	f000 fb53 	bl	8003760 <_malloc_r>
 80030ba:	4606      	mov	r6, r0
 80030bc:	b950      	cbnz	r0, 80030d4 <__ssputs_r+0x5c>
 80030be:	230c      	movs	r3, #12
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f8ca 3000 	str.w	r3, [sl]
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ce:	81a3      	strh	r3, [r4, #12]
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d4:	464a      	mov	r2, r9
 80030d6:	6921      	ldr	r1, [r4, #16]
 80030d8:	f000 face 	bl	8003678 <memcpy>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	81a3      	strh	r3, [r4, #12]
 80030e8:	6126      	str	r6, [r4, #16]
 80030ea:	444e      	add	r6, r9
 80030ec:	6026      	str	r6, [r4, #0]
 80030ee:	463e      	mov	r6, r7
 80030f0:	6165      	str	r5, [r4, #20]
 80030f2:	eba5 0509 	sub.w	r5, r5, r9
 80030f6:	60a5      	str	r5, [r4, #8]
 80030f8:	42be      	cmp	r6, r7
 80030fa:	d900      	bls.n	80030fe <__ssputs_r+0x86>
 80030fc:	463e      	mov	r6, r7
 80030fe:	4632      	mov	r2, r6
 8003100:	4641      	mov	r1, r8
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f000 fac6 	bl	8003694 <memmove>
 8003108:	68a3      	ldr	r3, [r4, #8]
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	1b9b      	subs	r3, r3, r6
 800310e:	4432      	add	r2, r6
 8003110:	2000      	movs	r0, #0
 8003112:	60a3      	str	r3, [r4, #8]
 8003114:	6022      	str	r2, [r4, #0]
 8003116:	e7db      	b.n	80030d0 <__ssputs_r+0x58>
 8003118:	462a      	mov	r2, r5
 800311a:	f000 fb7b 	bl	8003814 <_realloc_r>
 800311e:	4606      	mov	r6, r0
 8003120:	2800      	cmp	r0, #0
 8003122:	d1e1      	bne.n	80030e8 <__ssputs_r+0x70>
 8003124:	4650      	mov	r0, sl
 8003126:	6921      	ldr	r1, [r4, #16]
 8003128:	f000 face 	bl	80036c8 <_free_r>
 800312c:	e7c7      	b.n	80030be <__ssputs_r+0x46>
	...

08003130 <_svfiprintf_r>:
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	4698      	mov	r8, r3
 8003136:	898b      	ldrh	r3, [r1, #12]
 8003138:	4607      	mov	r7, r0
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	460d      	mov	r5, r1
 800313e:	4614      	mov	r4, r2
 8003140:	b09d      	sub	sp, #116	; 0x74
 8003142:	d50e      	bpl.n	8003162 <_svfiprintf_r+0x32>
 8003144:	690b      	ldr	r3, [r1, #16]
 8003146:	b963      	cbnz	r3, 8003162 <_svfiprintf_r+0x32>
 8003148:	2140      	movs	r1, #64	; 0x40
 800314a:	f000 fb09 	bl	8003760 <_malloc_r>
 800314e:	6028      	str	r0, [r5, #0]
 8003150:	6128      	str	r0, [r5, #16]
 8003152:	b920      	cbnz	r0, 800315e <_svfiprintf_r+0x2e>
 8003154:	230c      	movs	r3, #12
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	e0d1      	b.n	8003302 <_svfiprintf_r+0x1d2>
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	616b      	str	r3, [r5, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
 8003166:	2320      	movs	r3, #32
 8003168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800316c:	2330      	movs	r3, #48	; 0x30
 800316e:	f04f 0901 	mov.w	r9, #1
 8003172:	f8cd 800c 	str.w	r8, [sp, #12]
 8003176:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800331c <_svfiprintf_r+0x1ec>
 800317a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800317e:	4623      	mov	r3, r4
 8003180:	469a      	mov	sl, r3
 8003182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003186:	b10a      	cbz	r2, 800318c <_svfiprintf_r+0x5c>
 8003188:	2a25      	cmp	r2, #37	; 0x25
 800318a:	d1f9      	bne.n	8003180 <_svfiprintf_r+0x50>
 800318c:	ebba 0b04 	subs.w	fp, sl, r4
 8003190:	d00b      	beq.n	80031aa <_svfiprintf_r+0x7a>
 8003192:	465b      	mov	r3, fp
 8003194:	4622      	mov	r2, r4
 8003196:	4629      	mov	r1, r5
 8003198:	4638      	mov	r0, r7
 800319a:	f7ff ff6d 	bl	8003078 <__ssputs_r>
 800319e:	3001      	adds	r0, #1
 80031a0:	f000 80aa 	beq.w	80032f8 <_svfiprintf_r+0x1c8>
 80031a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031a6:	445a      	add	r2, fp
 80031a8:	9209      	str	r2, [sp, #36]	; 0x24
 80031aa:	f89a 3000 	ldrb.w	r3, [sl]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a2 	beq.w	80032f8 <_svfiprintf_r+0x1c8>
 80031b4:	2300      	movs	r3, #0
 80031b6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031be:	f10a 0a01 	add.w	sl, sl, #1
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	9307      	str	r3, [sp, #28]
 80031c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031ca:	931a      	str	r3, [sp, #104]	; 0x68
 80031cc:	4654      	mov	r4, sl
 80031ce:	2205      	movs	r2, #5
 80031d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d4:	4851      	ldr	r0, [pc, #324]	; (800331c <_svfiprintf_r+0x1ec>)
 80031d6:	f000 fa41 	bl	800365c <memchr>
 80031da:	9a04      	ldr	r2, [sp, #16]
 80031dc:	b9d8      	cbnz	r0, 8003216 <_svfiprintf_r+0xe6>
 80031de:	06d0      	lsls	r0, r2, #27
 80031e0:	bf44      	itt	mi
 80031e2:	2320      	movmi	r3, #32
 80031e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031e8:	0711      	lsls	r1, r2, #28
 80031ea:	bf44      	itt	mi
 80031ec:	232b      	movmi	r3, #43	; 0x2b
 80031ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f2:	f89a 3000 	ldrb.w	r3, [sl]
 80031f6:	2b2a      	cmp	r3, #42	; 0x2a
 80031f8:	d015      	beq.n	8003226 <_svfiprintf_r+0xf6>
 80031fa:	4654      	mov	r4, sl
 80031fc:	2000      	movs	r0, #0
 80031fe:	f04f 0c0a 	mov.w	ip, #10
 8003202:	9a07      	ldr	r2, [sp, #28]
 8003204:	4621      	mov	r1, r4
 8003206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800320a:	3b30      	subs	r3, #48	; 0x30
 800320c:	2b09      	cmp	r3, #9
 800320e:	d94e      	bls.n	80032ae <_svfiprintf_r+0x17e>
 8003210:	b1b0      	cbz	r0, 8003240 <_svfiprintf_r+0x110>
 8003212:	9207      	str	r2, [sp, #28]
 8003214:	e014      	b.n	8003240 <_svfiprintf_r+0x110>
 8003216:	eba0 0308 	sub.w	r3, r0, r8
 800321a:	fa09 f303 	lsl.w	r3, r9, r3
 800321e:	4313      	orrs	r3, r2
 8003220:	46a2      	mov	sl, r4
 8003222:	9304      	str	r3, [sp, #16]
 8003224:	e7d2      	b.n	80031cc <_svfiprintf_r+0x9c>
 8003226:	9b03      	ldr	r3, [sp, #12]
 8003228:	1d19      	adds	r1, r3, #4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	9103      	str	r1, [sp, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	bfbb      	ittet	lt
 8003232:	425b      	neglt	r3, r3
 8003234:	f042 0202 	orrlt.w	r2, r2, #2
 8003238:	9307      	strge	r3, [sp, #28]
 800323a:	9307      	strlt	r3, [sp, #28]
 800323c:	bfb8      	it	lt
 800323e:	9204      	strlt	r2, [sp, #16]
 8003240:	7823      	ldrb	r3, [r4, #0]
 8003242:	2b2e      	cmp	r3, #46	; 0x2e
 8003244:	d10c      	bne.n	8003260 <_svfiprintf_r+0x130>
 8003246:	7863      	ldrb	r3, [r4, #1]
 8003248:	2b2a      	cmp	r3, #42	; 0x2a
 800324a:	d135      	bne.n	80032b8 <_svfiprintf_r+0x188>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	3402      	adds	r4, #2
 8003250:	1d1a      	adds	r2, r3, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	9203      	str	r2, [sp, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	bfb8      	it	lt
 800325a:	f04f 33ff 	movlt.w	r3, #4294967295
 800325e:	9305      	str	r3, [sp, #20]
 8003260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800332c <_svfiprintf_r+0x1fc>
 8003264:	2203      	movs	r2, #3
 8003266:	4650      	mov	r0, sl
 8003268:	7821      	ldrb	r1, [r4, #0]
 800326a:	f000 f9f7 	bl	800365c <memchr>
 800326e:	b140      	cbz	r0, 8003282 <_svfiprintf_r+0x152>
 8003270:	2340      	movs	r3, #64	; 0x40
 8003272:	eba0 000a 	sub.w	r0, r0, sl
 8003276:	fa03 f000 	lsl.w	r0, r3, r0
 800327a:	9b04      	ldr	r3, [sp, #16]
 800327c:	3401      	adds	r4, #1
 800327e:	4303      	orrs	r3, r0
 8003280:	9304      	str	r3, [sp, #16]
 8003282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003286:	2206      	movs	r2, #6
 8003288:	4825      	ldr	r0, [pc, #148]	; (8003320 <_svfiprintf_r+0x1f0>)
 800328a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800328e:	f000 f9e5 	bl	800365c <memchr>
 8003292:	2800      	cmp	r0, #0
 8003294:	d038      	beq.n	8003308 <_svfiprintf_r+0x1d8>
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <_svfiprintf_r+0x1f4>)
 8003298:	bb1b      	cbnz	r3, 80032e2 <_svfiprintf_r+0x1b2>
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	3307      	adds	r3, #7
 800329e:	f023 0307 	bic.w	r3, r3, #7
 80032a2:	3308      	adds	r3, #8
 80032a4:	9303      	str	r3, [sp, #12]
 80032a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032a8:	4433      	add	r3, r6
 80032aa:	9309      	str	r3, [sp, #36]	; 0x24
 80032ac:	e767      	b.n	800317e <_svfiprintf_r+0x4e>
 80032ae:	460c      	mov	r4, r1
 80032b0:	2001      	movs	r0, #1
 80032b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80032b6:	e7a5      	b.n	8003204 <_svfiprintf_r+0xd4>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f04f 0c0a 	mov.w	ip, #10
 80032be:	4619      	mov	r1, r3
 80032c0:	3401      	adds	r4, #1
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	4620      	mov	r0, r4
 80032c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ca:	3a30      	subs	r2, #48	; 0x30
 80032cc:	2a09      	cmp	r2, #9
 80032ce:	d903      	bls.n	80032d8 <_svfiprintf_r+0x1a8>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0c5      	beq.n	8003260 <_svfiprintf_r+0x130>
 80032d4:	9105      	str	r1, [sp, #20]
 80032d6:	e7c3      	b.n	8003260 <_svfiprintf_r+0x130>
 80032d8:	4604      	mov	r4, r0
 80032da:	2301      	movs	r3, #1
 80032dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e0:	e7f0      	b.n	80032c4 <_svfiprintf_r+0x194>
 80032e2:	ab03      	add	r3, sp, #12
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	462a      	mov	r2, r5
 80032e8:	4638      	mov	r0, r7
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <_svfiprintf_r+0x1f8>)
 80032ec:	a904      	add	r1, sp, #16
 80032ee:	f3af 8000 	nop.w
 80032f2:	1c42      	adds	r2, r0, #1
 80032f4:	4606      	mov	r6, r0
 80032f6:	d1d6      	bne.n	80032a6 <_svfiprintf_r+0x176>
 80032f8:	89ab      	ldrh	r3, [r5, #12]
 80032fa:	065b      	lsls	r3, r3, #25
 80032fc:	f53f af2c 	bmi.w	8003158 <_svfiprintf_r+0x28>
 8003300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003302:	b01d      	add	sp, #116	; 0x74
 8003304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003308:	ab03      	add	r3, sp, #12
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	462a      	mov	r2, r5
 800330e:	4638      	mov	r0, r7
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <_svfiprintf_r+0x1f8>)
 8003312:	a904      	add	r1, sp, #16
 8003314:	f000 f87c 	bl	8003410 <_printf_i>
 8003318:	e7eb      	b.n	80032f2 <_svfiprintf_r+0x1c2>
 800331a:	bf00      	nop
 800331c:	080038f8 	.word	0x080038f8
 8003320:	08003902 	.word	0x08003902
 8003324:	00000000 	.word	0x00000000
 8003328:	08003079 	.word	0x08003079
 800332c:	080038fe 	.word	0x080038fe

08003330 <_printf_common>:
 8003330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	4616      	mov	r6, r2
 8003336:	4699      	mov	r9, r3
 8003338:	688a      	ldr	r2, [r1, #8]
 800333a:	690b      	ldr	r3, [r1, #16]
 800333c:	4607      	mov	r7, r0
 800333e:	4293      	cmp	r3, r2
 8003340:	bfb8      	it	lt
 8003342:	4613      	movlt	r3, r2
 8003344:	6033      	str	r3, [r6, #0]
 8003346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800334a:	460c      	mov	r4, r1
 800334c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003350:	b10a      	cbz	r2, 8003356 <_printf_common+0x26>
 8003352:	3301      	adds	r3, #1
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	0699      	lsls	r1, r3, #26
 800335a:	bf42      	ittt	mi
 800335c:	6833      	ldrmi	r3, [r6, #0]
 800335e:	3302      	addmi	r3, #2
 8003360:	6033      	strmi	r3, [r6, #0]
 8003362:	6825      	ldr	r5, [r4, #0]
 8003364:	f015 0506 	ands.w	r5, r5, #6
 8003368:	d106      	bne.n	8003378 <_printf_common+0x48>
 800336a:	f104 0a19 	add.w	sl, r4, #25
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	6832      	ldr	r2, [r6, #0]
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	42ab      	cmp	r3, r5
 8003376:	dc28      	bgt.n	80033ca <_printf_common+0x9a>
 8003378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800337c:	1e13      	subs	r3, r2, #0
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	bf18      	it	ne
 8003382:	2301      	movne	r3, #1
 8003384:	0692      	lsls	r2, r2, #26
 8003386:	d42d      	bmi.n	80033e4 <_printf_common+0xb4>
 8003388:	4649      	mov	r1, r9
 800338a:	4638      	mov	r0, r7
 800338c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003390:	47c0      	blx	r8
 8003392:	3001      	adds	r0, #1
 8003394:	d020      	beq.n	80033d8 <_printf_common+0xa8>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	68e5      	ldr	r5, [r4, #12]
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf18      	it	ne
 80033a2:	2500      	movne	r5, #0
 80033a4:	6832      	ldr	r2, [r6, #0]
 80033a6:	f04f 0600 	mov.w	r6, #0
 80033aa:	68a3      	ldr	r3, [r4, #8]
 80033ac:	bf08      	it	eq
 80033ae:	1aad      	subeq	r5, r5, r2
 80033b0:	6922      	ldr	r2, [r4, #16]
 80033b2:	bf08      	it	eq
 80033b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bfc4      	itt	gt
 80033bc:	1a9b      	subgt	r3, r3, r2
 80033be:	18ed      	addgt	r5, r5, r3
 80033c0:	341a      	adds	r4, #26
 80033c2:	42b5      	cmp	r5, r6
 80033c4:	d11a      	bne.n	80033fc <_printf_common+0xcc>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e008      	b.n	80033dc <_printf_common+0xac>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4652      	mov	r2, sl
 80033ce:	4649      	mov	r1, r9
 80033d0:	4638      	mov	r0, r7
 80033d2:	47c0      	blx	r8
 80033d4:	3001      	adds	r0, #1
 80033d6:	d103      	bne.n	80033e0 <_printf_common+0xb0>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	3501      	adds	r5, #1
 80033e2:	e7c4      	b.n	800336e <_printf_common+0x3e>
 80033e4:	2030      	movs	r0, #48	; 0x30
 80033e6:	18e1      	adds	r1, r4, r3
 80033e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033f2:	4422      	add	r2, r4
 80033f4:	3302      	adds	r3, #2
 80033f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033fa:	e7c5      	b.n	8003388 <_printf_common+0x58>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4622      	mov	r2, r4
 8003400:	4649      	mov	r1, r9
 8003402:	4638      	mov	r0, r7
 8003404:	47c0      	blx	r8
 8003406:	3001      	adds	r0, #1
 8003408:	d0e6      	beq.n	80033d8 <_printf_common+0xa8>
 800340a:	3601      	adds	r6, #1
 800340c:	e7d9      	b.n	80033c2 <_printf_common+0x92>
	...

08003410 <_printf_i>:
 8003410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	460c      	mov	r4, r1
 8003416:	7e27      	ldrb	r7, [r4, #24]
 8003418:	4691      	mov	r9, r2
 800341a:	2f78      	cmp	r7, #120	; 0x78
 800341c:	4680      	mov	r8, r0
 800341e:	469a      	mov	sl, r3
 8003420:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003426:	d807      	bhi.n	8003438 <_printf_i+0x28>
 8003428:	2f62      	cmp	r7, #98	; 0x62
 800342a:	d80a      	bhi.n	8003442 <_printf_i+0x32>
 800342c:	2f00      	cmp	r7, #0
 800342e:	f000 80d9 	beq.w	80035e4 <_printf_i+0x1d4>
 8003432:	2f58      	cmp	r7, #88	; 0x58
 8003434:	f000 80a4 	beq.w	8003580 <_printf_i+0x170>
 8003438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800343c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003440:	e03a      	b.n	80034b8 <_printf_i+0xa8>
 8003442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003446:	2b15      	cmp	r3, #21
 8003448:	d8f6      	bhi.n	8003438 <_printf_i+0x28>
 800344a:	a001      	add	r0, pc, #4	; (adr r0, 8003450 <_printf_i+0x40>)
 800344c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003450:	080034a9 	.word	0x080034a9
 8003454:	080034bd 	.word	0x080034bd
 8003458:	08003439 	.word	0x08003439
 800345c:	08003439 	.word	0x08003439
 8003460:	08003439 	.word	0x08003439
 8003464:	08003439 	.word	0x08003439
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003439 	.word	0x08003439
 8003470:	08003439 	.word	0x08003439
 8003474:	08003439 	.word	0x08003439
 8003478:	08003439 	.word	0x08003439
 800347c:	080035cb 	.word	0x080035cb
 8003480:	080034ed 	.word	0x080034ed
 8003484:	080035ad 	.word	0x080035ad
 8003488:	08003439 	.word	0x08003439
 800348c:	08003439 	.word	0x08003439
 8003490:	080035ed 	.word	0x080035ed
 8003494:	08003439 	.word	0x08003439
 8003498:	080034ed 	.word	0x080034ed
 800349c:	08003439 	.word	0x08003439
 80034a0:	08003439 	.word	0x08003439
 80034a4:	080035b5 	.word	0x080035b5
 80034a8:	680b      	ldr	r3, [r1, #0]
 80034aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	600a      	str	r2, [r1, #0]
 80034b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0a4      	b.n	8003606 <_printf_i+0x1f6>
 80034bc:	6825      	ldr	r5, [r4, #0]
 80034be:	6808      	ldr	r0, [r1, #0]
 80034c0:	062e      	lsls	r6, r5, #24
 80034c2:	f100 0304 	add.w	r3, r0, #4
 80034c6:	d50a      	bpl.n	80034de <_printf_i+0xce>
 80034c8:	6805      	ldr	r5, [r0, #0]
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	2d00      	cmp	r5, #0
 80034ce:	da03      	bge.n	80034d8 <_printf_i+0xc8>
 80034d0:	232d      	movs	r3, #45	; 0x2d
 80034d2:	426d      	negs	r5, r5
 80034d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d8:	230a      	movs	r3, #10
 80034da:	485e      	ldr	r0, [pc, #376]	; (8003654 <_printf_i+0x244>)
 80034dc:	e019      	b.n	8003512 <_printf_i+0x102>
 80034de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034e2:	6805      	ldr	r5, [r0, #0]
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	bf18      	it	ne
 80034e8:	b22d      	sxthne	r5, r5
 80034ea:	e7ef      	b.n	80034cc <_printf_i+0xbc>
 80034ec:	680b      	ldr	r3, [r1, #0]
 80034ee:	6825      	ldr	r5, [r4, #0]
 80034f0:	1d18      	adds	r0, r3, #4
 80034f2:	6008      	str	r0, [r1, #0]
 80034f4:	0628      	lsls	r0, r5, #24
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0xec>
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	e002      	b.n	8003502 <_printf_i+0xf2>
 80034fc:	0669      	lsls	r1, r5, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0xe8>
 8003500:	881d      	ldrh	r5, [r3, #0]
 8003502:	2f6f      	cmp	r7, #111	; 0x6f
 8003504:	bf0c      	ite	eq
 8003506:	2308      	moveq	r3, #8
 8003508:	230a      	movne	r3, #10
 800350a:	4852      	ldr	r0, [pc, #328]	; (8003654 <_printf_i+0x244>)
 800350c:	2100      	movs	r1, #0
 800350e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003512:	6866      	ldr	r6, [r4, #4]
 8003514:	2e00      	cmp	r6, #0
 8003516:	bfa8      	it	ge
 8003518:	6821      	ldrge	r1, [r4, #0]
 800351a:	60a6      	str	r6, [r4, #8]
 800351c:	bfa4      	itt	ge
 800351e:	f021 0104 	bicge.w	r1, r1, #4
 8003522:	6021      	strge	r1, [r4, #0]
 8003524:	b90d      	cbnz	r5, 800352a <_printf_i+0x11a>
 8003526:	2e00      	cmp	r6, #0
 8003528:	d04d      	beq.n	80035c6 <_printf_i+0x1b6>
 800352a:	4616      	mov	r6, r2
 800352c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003530:	fb03 5711 	mls	r7, r3, r1, r5
 8003534:	5dc7      	ldrb	r7, [r0, r7]
 8003536:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800353a:	462f      	mov	r7, r5
 800353c:	42bb      	cmp	r3, r7
 800353e:	460d      	mov	r5, r1
 8003540:	d9f4      	bls.n	800352c <_printf_i+0x11c>
 8003542:	2b08      	cmp	r3, #8
 8003544:	d10b      	bne.n	800355e <_printf_i+0x14e>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	07df      	lsls	r7, r3, #31
 800354a:	d508      	bpl.n	800355e <_printf_i+0x14e>
 800354c:	6923      	ldr	r3, [r4, #16]
 800354e:	6861      	ldr	r1, [r4, #4]
 8003550:	4299      	cmp	r1, r3
 8003552:	bfde      	ittt	le
 8003554:	2330      	movle	r3, #48	; 0x30
 8003556:	f806 3c01 	strble.w	r3, [r6, #-1]
 800355a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800355e:	1b92      	subs	r2, r2, r6
 8003560:	6122      	str	r2, [r4, #16]
 8003562:	464b      	mov	r3, r9
 8003564:	4621      	mov	r1, r4
 8003566:	4640      	mov	r0, r8
 8003568:	f8cd a000 	str.w	sl, [sp]
 800356c:	aa03      	add	r2, sp, #12
 800356e:	f7ff fedf 	bl	8003330 <_printf_common>
 8003572:	3001      	adds	r0, #1
 8003574:	d14c      	bne.n	8003610 <_printf_i+0x200>
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	b004      	add	sp, #16
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003580:	4834      	ldr	r0, [pc, #208]	; (8003654 <_printf_i+0x244>)
 8003582:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003586:	680e      	ldr	r6, [r1, #0]
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	f856 5b04 	ldr.w	r5, [r6], #4
 800358e:	061f      	lsls	r7, r3, #24
 8003590:	600e      	str	r6, [r1, #0]
 8003592:	d514      	bpl.n	80035be <_printf_i+0x1ae>
 8003594:	07d9      	lsls	r1, r3, #31
 8003596:	bf44      	itt	mi
 8003598:	f043 0320 	orrmi.w	r3, r3, #32
 800359c:	6023      	strmi	r3, [r4, #0]
 800359e:	b91d      	cbnz	r5, 80035a8 <_printf_i+0x198>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f023 0320 	bic.w	r3, r3, #32
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	2310      	movs	r3, #16
 80035aa:	e7af      	b.n	800350c <_printf_i+0xfc>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	f043 0320 	orr.w	r3, r3, #32
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	2378      	movs	r3, #120	; 0x78
 80035b6:	4828      	ldr	r0, [pc, #160]	; (8003658 <_printf_i+0x248>)
 80035b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035bc:	e7e3      	b.n	8003586 <_printf_i+0x176>
 80035be:	065e      	lsls	r6, r3, #25
 80035c0:	bf48      	it	mi
 80035c2:	b2ad      	uxthmi	r5, r5
 80035c4:	e7e6      	b.n	8003594 <_printf_i+0x184>
 80035c6:	4616      	mov	r6, r2
 80035c8:	e7bb      	b.n	8003542 <_printf_i+0x132>
 80035ca:	680b      	ldr	r3, [r1, #0]
 80035cc:	6826      	ldr	r6, [r4, #0]
 80035ce:	1d1d      	adds	r5, r3, #4
 80035d0:	6960      	ldr	r0, [r4, #20]
 80035d2:	600d      	str	r5, [r1, #0]
 80035d4:	0635      	lsls	r5, r6, #24
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	d501      	bpl.n	80035de <_printf_i+0x1ce>
 80035da:	6018      	str	r0, [r3, #0]
 80035dc:	e002      	b.n	80035e4 <_printf_i+0x1d4>
 80035de:	0671      	lsls	r1, r6, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0x1ca>
 80035e2:	8018      	strh	r0, [r3, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	4616      	mov	r6, r2
 80035e8:	6123      	str	r3, [r4, #16]
 80035ea:	e7ba      	b.n	8003562 <_printf_i+0x152>
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	1d1a      	adds	r2, r3, #4
 80035f0:	600a      	str	r2, [r1, #0]
 80035f2:	681e      	ldr	r6, [r3, #0]
 80035f4:	2100      	movs	r1, #0
 80035f6:	4630      	mov	r0, r6
 80035f8:	6862      	ldr	r2, [r4, #4]
 80035fa:	f000 f82f 	bl	800365c <memchr>
 80035fe:	b108      	cbz	r0, 8003604 <_printf_i+0x1f4>
 8003600:	1b80      	subs	r0, r0, r6
 8003602:	6060      	str	r0, [r4, #4]
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	6123      	str	r3, [r4, #16]
 8003608:	2300      	movs	r3, #0
 800360a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360e:	e7a8      	b.n	8003562 <_printf_i+0x152>
 8003610:	4632      	mov	r2, r6
 8003612:	4649      	mov	r1, r9
 8003614:	4640      	mov	r0, r8
 8003616:	6923      	ldr	r3, [r4, #16]
 8003618:	47d0      	blx	sl
 800361a:	3001      	adds	r0, #1
 800361c:	d0ab      	beq.n	8003576 <_printf_i+0x166>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d413      	bmi.n	800364c <_printf_i+0x23c>
 8003624:	68e0      	ldr	r0, [r4, #12]
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	4298      	cmp	r0, r3
 800362a:	bfb8      	it	lt
 800362c:	4618      	movlt	r0, r3
 800362e:	e7a4      	b.n	800357a <_printf_i+0x16a>
 8003630:	2301      	movs	r3, #1
 8003632:	4632      	mov	r2, r6
 8003634:	4649      	mov	r1, r9
 8003636:	4640      	mov	r0, r8
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d09b      	beq.n	8003576 <_printf_i+0x166>
 800363e:	3501      	adds	r5, #1
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	9903      	ldr	r1, [sp, #12]
 8003644:	1a5b      	subs	r3, r3, r1
 8003646:	42ab      	cmp	r3, r5
 8003648:	dcf2      	bgt.n	8003630 <_printf_i+0x220>
 800364a:	e7eb      	b.n	8003624 <_printf_i+0x214>
 800364c:	2500      	movs	r5, #0
 800364e:	f104 0619 	add.w	r6, r4, #25
 8003652:	e7f5      	b.n	8003640 <_printf_i+0x230>
 8003654:	08003909 	.word	0x08003909
 8003658:	0800391a 	.word	0x0800391a

0800365c <memchr>:
 800365c:	4603      	mov	r3, r0
 800365e:	b510      	push	{r4, lr}
 8003660:	b2c9      	uxtb	r1, r1
 8003662:	4402      	add	r2, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	4618      	mov	r0, r3
 8003668:	d101      	bne.n	800366e <memchr+0x12>
 800366a:	2000      	movs	r0, #0
 800366c:	e003      	b.n	8003676 <memchr+0x1a>
 800366e:	7804      	ldrb	r4, [r0, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	428c      	cmp	r4, r1
 8003674:	d1f6      	bne.n	8003664 <memchr+0x8>
 8003676:	bd10      	pop	{r4, pc}

08003678 <memcpy>:
 8003678:	440a      	add	r2, r1
 800367a:	4291      	cmp	r1, r2
 800367c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003680:	d100      	bne.n	8003684 <memcpy+0xc>
 8003682:	4770      	bx	lr
 8003684:	b510      	push	{r4, lr}
 8003686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800368a:	4291      	cmp	r1, r2
 800368c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003690:	d1f9      	bne.n	8003686 <memcpy+0xe>
 8003692:	bd10      	pop	{r4, pc}

08003694 <memmove>:
 8003694:	4288      	cmp	r0, r1
 8003696:	b510      	push	{r4, lr}
 8003698:	eb01 0402 	add.w	r4, r1, r2
 800369c:	d902      	bls.n	80036a4 <memmove+0x10>
 800369e:	4284      	cmp	r4, r0
 80036a0:	4623      	mov	r3, r4
 80036a2:	d807      	bhi.n	80036b4 <memmove+0x20>
 80036a4:	1e43      	subs	r3, r0, #1
 80036a6:	42a1      	cmp	r1, r4
 80036a8:	d008      	beq.n	80036bc <memmove+0x28>
 80036aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036b2:	e7f8      	b.n	80036a6 <memmove+0x12>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4402      	add	r2, r0
 80036b8:	428a      	cmp	r2, r1
 80036ba:	d100      	bne.n	80036be <memmove+0x2a>
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036c6:	e7f7      	b.n	80036b8 <memmove+0x24>

080036c8 <_free_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d043      	beq.n	8003758 <_free_r+0x90>
 80036d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfb8      	it	lt
 80036da:	18e4      	addlt	r4, r4, r3
 80036dc:	f000 f8d0 	bl	8003880 <__malloc_lock>
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <_free_r+0x94>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	4610      	mov	r0, r2
 80036e6:	b933      	cbnz	r3, 80036f6 <_free_r+0x2e>
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	6014      	str	r4, [r2, #0]
 80036ec:	4628      	mov	r0, r5
 80036ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f2:	f000 b8cb 	b.w	800388c <__malloc_unlock>
 80036f6:	42a3      	cmp	r3, r4
 80036f8:	d90a      	bls.n	8003710 <_free_r+0x48>
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	1862      	adds	r2, r4, r1
 80036fe:	4293      	cmp	r3, r2
 8003700:	bf01      	itttt	eq
 8003702:	681a      	ldreq	r2, [r3, #0]
 8003704:	685b      	ldreq	r3, [r3, #4]
 8003706:	1852      	addeq	r2, r2, r1
 8003708:	6022      	streq	r2, [r4, #0]
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6004      	str	r4, [r0, #0]
 800370e:	e7ed      	b.n	80036ec <_free_r+0x24>
 8003710:	461a      	mov	r2, r3
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	b10b      	cbz	r3, 800371a <_free_r+0x52>
 8003716:	42a3      	cmp	r3, r4
 8003718:	d9fa      	bls.n	8003710 <_free_r+0x48>
 800371a:	6811      	ldr	r1, [r2, #0]
 800371c:	1850      	adds	r0, r2, r1
 800371e:	42a0      	cmp	r0, r4
 8003720:	d10b      	bne.n	800373a <_free_r+0x72>
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	4401      	add	r1, r0
 8003726:	1850      	adds	r0, r2, r1
 8003728:	4283      	cmp	r3, r0
 800372a:	6011      	str	r1, [r2, #0]
 800372c:	d1de      	bne.n	80036ec <_free_r+0x24>
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4401      	add	r1, r0
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	6053      	str	r3, [r2, #4]
 8003738:	e7d8      	b.n	80036ec <_free_r+0x24>
 800373a:	d902      	bls.n	8003742 <_free_r+0x7a>
 800373c:	230c      	movs	r3, #12
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	e7d4      	b.n	80036ec <_free_r+0x24>
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	1821      	adds	r1, r4, r0
 8003746:	428b      	cmp	r3, r1
 8003748:	bf01      	itttt	eq
 800374a:	6819      	ldreq	r1, [r3, #0]
 800374c:	685b      	ldreq	r3, [r3, #4]
 800374e:	1809      	addeq	r1, r1, r0
 8003750:	6021      	streq	r1, [r4, #0]
 8003752:	6063      	str	r3, [r4, #4]
 8003754:	6054      	str	r4, [r2, #4]
 8003756:	e7c9      	b.n	80036ec <_free_r+0x24>
 8003758:	bd38      	pop	{r3, r4, r5, pc}
 800375a:	bf00      	nop
 800375c:	200000fc 	.word	0x200000fc

08003760 <_malloc_r>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	1ccd      	adds	r5, r1, #3
 8003764:	f025 0503 	bic.w	r5, r5, #3
 8003768:	3508      	adds	r5, #8
 800376a:	2d0c      	cmp	r5, #12
 800376c:	bf38      	it	cc
 800376e:	250c      	movcc	r5, #12
 8003770:	2d00      	cmp	r5, #0
 8003772:	4606      	mov	r6, r0
 8003774:	db01      	blt.n	800377a <_malloc_r+0x1a>
 8003776:	42a9      	cmp	r1, r5
 8003778:	d903      	bls.n	8003782 <_malloc_r+0x22>
 800377a:	230c      	movs	r3, #12
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	2000      	movs	r0, #0
 8003780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003782:	f000 f87d 	bl	8003880 <__malloc_lock>
 8003786:	4921      	ldr	r1, [pc, #132]	; (800380c <_malloc_r+0xac>)
 8003788:	680a      	ldr	r2, [r1, #0]
 800378a:	4614      	mov	r4, r2
 800378c:	b99c      	cbnz	r4, 80037b6 <_malloc_r+0x56>
 800378e:	4f20      	ldr	r7, [pc, #128]	; (8003810 <_malloc_r+0xb0>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b923      	cbnz	r3, 800379e <_malloc_r+0x3e>
 8003794:	4621      	mov	r1, r4
 8003796:	4630      	mov	r0, r6
 8003798:	f000 f862 	bl	8003860 <_sbrk_r>
 800379c:	6038      	str	r0, [r7, #0]
 800379e:	4629      	mov	r1, r5
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 f85d 	bl	8003860 <_sbrk_r>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	d123      	bne.n	80037f2 <_malloc_r+0x92>
 80037aa:	230c      	movs	r3, #12
 80037ac:	4630      	mov	r0, r6
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	f000 f86c 	bl	800388c <__malloc_unlock>
 80037b4:	e7e3      	b.n	800377e <_malloc_r+0x1e>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	1b5b      	subs	r3, r3, r5
 80037ba:	d417      	bmi.n	80037ec <_malloc_r+0x8c>
 80037bc:	2b0b      	cmp	r3, #11
 80037be:	d903      	bls.n	80037c8 <_malloc_r+0x68>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	441c      	add	r4, r3
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	e004      	b.n	80037d2 <_malloc_r+0x72>
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	42a2      	cmp	r2, r4
 80037cc:	bf0c      	ite	eq
 80037ce:	600b      	streq	r3, [r1, #0]
 80037d0:	6053      	strne	r3, [r2, #4]
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f85a 	bl	800388c <__malloc_unlock>
 80037d8:	f104 000b 	add.w	r0, r4, #11
 80037dc:	1d23      	adds	r3, r4, #4
 80037de:	f020 0007 	bic.w	r0, r0, #7
 80037e2:	1ac2      	subs	r2, r0, r3
 80037e4:	d0cc      	beq.n	8003780 <_malloc_r+0x20>
 80037e6:	1a1b      	subs	r3, r3, r0
 80037e8:	50a3      	str	r3, [r4, r2]
 80037ea:	e7c9      	b.n	8003780 <_malloc_r+0x20>
 80037ec:	4622      	mov	r2, r4
 80037ee:	6864      	ldr	r4, [r4, #4]
 80037f0:	e7cc      	b.n	800378c <_malloc_r+0x2c>
 80037f2:	1cc4      	adds	r4, r0, #3
 80037f4:	f024 0403 	bic.w	r4, r4, #3
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d0e3      	beq.n	80037c4 <_malloc_r+0x64>
 80037fc:	1a21      	subs	r1, r4, r0
 80037fe:	4630      	mov	r0, r6
 8003800:	f000 f82e 	bl	8003860 <_sbrk_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d1dd      	bne.n	80037c4 <_malloc_r+0x64>
 8003808:	e7cf      	b.n	80037aa <_malloc_r+0x4a>
 800380a:	bf00      	nop
 800380c:	200000fc 	.word	0x200000fc
 8003810:	20000100 	.word	0x20000100

08003814 <_realloc_r>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	4607      	mov	r7, r0
 8003818:	4614      	mov	r4, r2
 800381a:	460e      	mov	r6, r1
 800381c:	b921      	cbnz	r1, 8003828 <_realloc_r+0x14>
 800381e:	4611      	mov	r1, r2
 8003820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003824:	f7ff bf9c 	b.w	8003760 <_malloc_r>
 8003828:	b922      	cbnz	r2, 8003834 <_realloc_r+0x20>
 800382a:	f7ff ff4d 	bl	80036c8 <_free_r>
 800382e:	4625      	mov	r5, r4
 8003830:	4628      	mov	r0, r5
 8003832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003834:	f000 f830 	bl	8003898 <_malloc_usable_size_r>
 8003838:	42a0      	cmp	r0, r4
 800383a:	d20f      	bcs.n	800385c <_realloc_r+0x48>
 800383c:	4621      	mov	r1, r4
 800383e:	4638      	mov	r0, r7
 8003840:	f7ff ff8e 	bl	8003760 <_malloc_r>
 8003844:	4605      	mov	r5, r0
 8003846:	2800      	cmp	r0, #0
 8003848:	d0f2      	beq.n	8003830 <_realloc_r+0x1c>
 800384a:	4631      	mov	r1, r6
 800384c:	4622      	mov	r2, r4
 800384e:	f7ff ff13 	bl	8003678 <memcpy>
 8003852:	4631      	mov	r1, r6
 8003854:	4638      	mov	r0, r7
 8003856:	f7ff ff37 	bl	80036c8 <_free_r>
 800385a:	e7e9      	b.n	8003830 <_realloc_r+0x1c>
 800385c:	4635      	mov	r5, r6
 800385e:	e7e7      	b.n	8003830 <_realloc_r+0x1c>

08003860 <_sbrk_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4d05      	ldr	r5, [pc, #20]	; (800387c <_sbrk_r+0x1c>)
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	f7fd fbc2 	bl	8000ff4 <_sbrk>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_sbrk_r+0x1a>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_sbrk_r+0x1a>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000530 	.word	0x20000530

08003880 <__malloc_lock>:
 8003880:	4801      	ldr	r0, [pc, #4]	; (8003888 <__malloc_lock+0x8>)
 8003882:	f000 b811 	b.w	80038a8 <__retarget_lock_acquire_recursive>
 8003886:	bf00      	nop
 8003888:	20000538 	.word	0x20000538

0800388c <__malloc_unlock>:
 800388c:	4801      	ldr	r0, [pc, #4]	; (8003894 <__malloc_unlock+0x8>)
 800388e:	f000 b80c 	b.w	80038aa <__retarget_lock_release_recursive>
 8003892:	bf00      	nop
 8003894:	20000538 	.word	0x20000538

08003898 <_malloc_usable_size_r>:
 8003898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800389c:	1f18      	subs	r0, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bfbc      	itt	lt
 80038a2:	580b      	ldrlt	r3, [r1, r0]
 80038a4:	18c0      	addlt	r0, r0, r3
 80038a6:	4770      	bx	lr

080038a8 <__retarget_lock_acquire_recursive>:
 80038a8:	4770      	bx	lr

080038aa <__retarget_lock_release_recursive>:
 80038aa:	4770      	bx	lr

080038ac <_init>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr

080038b8 <_fini>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr
