
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb4  08003bb4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb4  08003bb4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb4  08003bb4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000090  08003c4c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08003c4c  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e977  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fd  00000000  00000000  0002ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00030f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888b  00000000  00000000  00032a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8a6  00000000  00000000  0004b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba99  00000000  00000000  00059b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e55ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  000e5620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b34 	.word	0x08003b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08003b34 	.word	0x08003b34

0800014c <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <updateDisplay+0x34>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <updateDisplay+0x38>)
 8000156:	fb82 1203 	smull	r1, r2, r2, r3
 800015a:	1192      	asrs	r2, r2, #6
 800015c:	17db      	asrs	r3, r3, #31
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	461a      	mov	r2, r3
 8000162:	4909      	ldr	r1, [pc, #36]	; (8000188 <updateDisplay+0x3c>)
 8000164:	4809      	ldr	r0, [pc, #36]	; (800018c <updateDisplay+0x40>)
 8000166:	f003 f8ab 	bl	80032c0 <siprintf>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	4906      	ldr	r1, [pc, #24]	; (800018c <updateDisplay+0x40>)
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <updateDisplay+0x44>)
 8000176:	f002 ff06 	bl	8002f86 <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000008 	.word	0x20000008
 8000184:	10624dd3 	.word	0x10624dd3
 8000188:	08003b4c 	.word	0x08003b4c
 800018c:	200000e8 	.word	0x200000e8
 8000190:	200001ac 	.word	0x200001ac

08000194 <WhichButtonIsPressed>:
#include "displayuart.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000198:	2000      	movs	r0, #0
 800019a:	f000 facb 	bl	8000734 <is_button_pressed>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <WhichButtonIsPressed+0x14>
 80001a4:	2301      	movs	r3, #1
 80001a6:	e010      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fac3 	bl	8000734 <is_button_pressed>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <WhichButtonIsPressed+0x24>
 80001b4:	2302      	movs	r3, #2
 80001b6:	e008      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 80001b8:	2002      	movs	r0, #2
 80001ba:	f000 fabb 	bl	8000734 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <WhichButtonIsPressed+0x34>
 80001c4:	2303      	movs	r3, #3
 80001c6:	e000      	b.n	80001ca <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 80001c8:	2300      	movs	r3, #0
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	bd80      	pop	{r7, pc}
	...

080001d0 <clear_vertical>:

void clear_vertical() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Traffic_1_1_Pin, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <clear_vertical+0x20>)
 80001dc:	f001 fb88 	bl	80018f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Traffic_1_2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2108      	movs	r1, #8
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <clear_vertical+0x24>)
 80001e6:	f001 fb83 	bl	80018f0 <HAL_GPIO_WritePin>

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010800 	.word	0x40010800
 80001f4:	40010c00 	.word	0x40010c00

080001f8 <clear_horizontal>:

void clear_horizontal() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin | Traffic_2_2_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2130      	movs	r1, #48	; 0x30
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <clear_horizontal+0x14>)
 8000202:	f001 fb75 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010c00 	.word	0x40010c00

08000210 <vertical_processing>:

void vertical_processing() {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	clear_vertical();
 8000214:	f7ff ffdc 	bl	80001d0 <clear_vertical>
	switch (CURRENT_STATE[0]) {
 8000218:	4b18      	ldr	r3, [pc, #96]	; (800027c <vertical_processing+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d01e      	beq.n	800025e <vertical_processing+0x4e>
 8000220:	2b02      	cmp	r3, #2
 8000222:	dc28      	bgt.n	8000276 <vertical_processing+0x66>
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <vertical_processing+0x1e>
 8000228:	2b01      	cmp	r3, #1
 800022a:	d00c      	beq.n	8000246 <vertical_processing+0x36>
	case 2:
		HAL_GPIO_WritePin(GPIOA, Traffic_1_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, Traffic_1_2_Pin, GPIO_PIN_SET);
		break;
	default:
		break;
 800022c:	e023      	b.n	8000276 <vertical_processing+0x66>
		HAL_GPIO_WritePin(GPIOA, Traffic_1_1_Pin, GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <vertical_processing+0x70>)
 8000236:	f001 fb5b 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_1_2_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <vertical_processing+0x74>)
 8000240:	f001 fb56 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 8000244:	e018      	b.n	8000278 <vertical_processing+0x68>
		HAL_GPIO_WritePin(GPIOA, Traffic_1_1_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <vertical_processing+0x70>)
 800024e:	f001 fb4f 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_1_2_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2108      	movs	r1, #8
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <vertical_processing+0x74>)
 8000258:	f001 fb4a 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 800025c:	e00c      	b.n	8000278 <vertical_processing+0x68>
		HAL_GPIO_WritePin(GPIOA, Traffic_1_1_Pin, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <vertical_processing+0x70>)
 8000266:	f001 fb43 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_1_2_Pin, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	2108      	movs	r1, #8
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <vertical_processing+0x74>)
 8000270:	f001 fb3e 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 8000274:	e000      	b.n	8000278 <vertical_processing+0x68>
		break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000000 	.word	0x20000000
 8000280:	40010800 	.word	0x40010800
 8000284:	40010c00 	.word	0x40010c00

08000288 <horizontal_processing>:

void horizontal_processing() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	clear_horizontal();
 800028c:	f7ff ffb4 	bl	80001f8 <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <horizontal_processing+0x68>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d01c      	beq.n	80002d2 <horizontal_processing+0x4a>
 8000298:	2b02      	cmp	r3, #2
 800029a:	dc25      	bgt.n	80002e8 <horizontal_processing+0x60>
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <horizontal_processing+0x1e>
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d00b      	beq.n	80002bc <horizontal_processing+0x34>
	case 2:
		HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, Traffic_2_2_Pin, GPIO_PIN_SET);
		break;
	default:
		break;
 80002a4:	e020      	b.n	80002e8 <horizontal_processing+0x60>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2120      	movs	r1, #32
 80002aa:	4812      	ldr	r0, [pc, #72]	; (80002f4 <horizontal_processing+0x6c>)
 80002ac:	f001 fb20 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_2_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2110      	movs	r1, #16
 80002b4:	480f      	ldr	r0, [pc, #60]	; (80002f4 <horizontal_processing+0x6c>)
 80002b6:	f001 fb1b 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 80002ba:	e016      	b.n	80002ea <horizontal_processing+0x62>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2120      	movs	r1, #32
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <horizontal_processing+0x6c>)
 80002c2:	f001 fb15 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_2_Pin, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <horizontal_processing+0x6c>)
 80002cc:	f001 fb10 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 80002d0:	e00b      	b.n	80002ea <horizontal_processing+0x62>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_1_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2120      	movs	r1, #32
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <horizontal_processing+0x6c>)
 80002d8:	f001 fb0a 	bl	80018f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Traffic_2_2_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <horizontal_processing+0x6c>)
 80002e2:	f001 fb05 	bl	80018f0 <HAL_GPIO_WritePin>
		break;
 80002e6:	e000      	b.n	80002ea <horizontal_processing+0x62>
		break;
 80002e8:	bf00      	nop
	}
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000000 	.word	0x20000000
 80002f4:	40010c00 	.word	0x40010c00

080002f8 <state_update>:

void state_update(int idx) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d112      	bne.n	800032c <state_update+0x34>
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] + 1) % 3;
 8000306:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <state_update+0x78>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	1c59      	adds	r1, r3, #1
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <state_update+0x7c>)
 8000312:	fb83 3201 	smull	r3, r2, r3, r1
 8000316:	17cb      	asrs	r3, r1, #31
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	4613      	mov	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	1aca      	subs	r2, r1, r3
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <state_update+0x78>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800032a:	e011      	b.n	8000350 <state_update+0x58>
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <state_update+0x78>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	1c99      	adds	r1, r3, #2
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <state_update+0x7c>)
 8000338:	fb83 3201 	smull	r3, r2, r3, r1
 800033c:	17cb      	asrs	r3, r1, #31
 800033e:	1ad2      	subs	r2, r2, r3
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	1aca      	subs	r2, r1, r3
 8000348:	4909      	ldr	r1, [pc, #36]	; (8000370 <state_update+0x78>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <state_update+0x78>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	4a07      	ldr	r2, [pc, #28]	; (8000378 <state_update+0x80>)
 800035a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035e:	4907      	ldr	r1, [pc, #28]	; (800037c <state_update+0x84>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	20000000 	.word	0x20000000
 8000374:	55555556 	.word	0x55555556
 8000378:	20000010 	.word	0x20000010
 800037c:	20000008 	.word	0x20000008

08000380 <check_state>:

void check_state() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <check_state+0x2c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	dc04      	bgt.n	8000396 <check_state+0x16>
		state_update(VER_LED);
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ffb3 	bl	80002f8 <state_update>
		vertical_processing();
 8000392:	f7ff ff3d 	bl	8000210 <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <check_state+0x2c>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	2b00      	cmp	r3, #0
 800039c:	dc04      	bgt.n	80003a8 <check_state+0x28>
		state_update(HOR_LED);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff ffaa 	bl	80002f8 <state_update>
		horizontal_processing();
 80003a4:	f7ff ff70 	bl	8000288 <horizontal_processing>
	}
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000008 	.word	0x20000008

080003b0 <update_clock>:

void update_clock() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <update_clock+0x38>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d113      	bne.n	80003e4 <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <update_clock+0x3c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <update_clock+0x3c>)
 80003c6:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <update_clock+0x3c>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80003d0:	4a06      	ldr	r2, [pc, #24]	; (80003ec <update_clock+0x3c>)
 80003d2:	6053      	str	r3, [r2, #4]
		check_state();
 80003d4:	f7ff ffd4 	bl	8000380 <check_state>
		updateDisplay();
 80003d8:	f7ff feb8 	bl	800014c <updateDisplay>
		setTimer2(1000);
 80003dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e0:	f000 fdd4 	bl	8000f8c <setTimer2>
	}
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000d4 	.word	0x200000d4
 80003ec:	20000008 	.word	0x20000008

080003f0 <reset>:

void reset() {
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED * TIME_UNIT;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <reset+0x4c>)
 80003f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80003fa:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW * TIME_UNIT;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <reset+0x4c>)
 80003fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000402:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN * TIME_UNIT;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <reset+0x4c>)
 8000406:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800040a:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <reset+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <reset+0x50>)
 8000414:	2202      	movs	r2, #2
 8000416:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <reset+0x50>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a07      	ldr	r2, [pc, #28]	; (800043c <reset+0x4c>)
 800041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <reset+0x54>)
 8000424:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <reset+0x50>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <reset+0x4c>)
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <reset+0x54>)
 8000432:	6053      	str	r3, [r2, #4]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	20000010 	.word	0x20000010
 8000440:	20000000 	.word	0x20000000
 8000444:	20000008 	.word	0x20000008

08000448 <restart>:

void restart(){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	status = 0;
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <restart+0x14>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200000ac 	.word	0x200000ac

08000460 <confirm_action>:

void confirm_action(int mode) {
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b03      	cmp	r3, #3
 800046c:	d84f      	bhi.n	800050e <confirm_action+0xae>
 800046e:	a201      	add	r2, pc, #4	; (adr r2, 8000474 <confirm_action+0x14>)
 8000470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000474:	0800050f 	.word	0x0800050f
 8000478:	08000485 	.word	0x08000485
 800047c:	080004b3 	.word	0x080004b3
 8000480:	080004e1 	.word	0x080004e1
	switch (mode) {
	case 0: //Normal mode -> do nothing
		return;
	case 1: // Inc red time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <confirm_action+0xb8>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <confirm_action+0xbc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000490:	fb01 f303 	mul.w	r3, r1, r3
 8000494:	4413      	add	r3, r2
 8000496:	4a20      	ldr	r2, [pc, #128]	; (8000518 <confirm_action+0xb8>)
 8000498:	6013      	str	r3, [r2, #0]
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <confirm_action+0xb8>)
 800049c:	689a      	ldr	r2, [r3, #8]
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <confirm_action+0xbc>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <confirm_action+0xb8>)
 80004ae:	6093      	str	r3, [r2, #8]
		break;
 80004b0:	e02e      	b.n	8000510 <confirm_action+0xb0>
	case 2: // Inc yellow time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <confirm_action+0xb8>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <confirm_action+0xbc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004be:	fb01 f303 	mul.w	r3, r1, r3
 80004c2:	4413      	add	r3, r2
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <confirm_action+0xb8>)
 80004c6:	6013      	str	r3, [r2, #0]
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (TIMES_INC * TIME_UNIT);
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <confirm_action+0xb8>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <confirm_action+0xbc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d4:	fb01 f303 	mul.w	r3, r1, r3
 80004d8:	4413      	add	r3, r2
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <confirm_action+0xb8>)
 80004dc:	6053      	str	r3, [r2, #4]
		break;
 80004de:	e017      	b.n	8000510 <confirm_action+0xb0>
	case 3: // Inc green time
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <confirm_action+0xb8>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <confirm_action+0xbc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ec:	fb01 f303 	mul.w	r3, r1, r3
 80004f0:	4413      	add	r3, r2
 80004f2:	4a09      	ldr	r2, [pc, #36]	; (8000518 <confirm_action+0xb8>)
 80004f4:	6013      	str	r3, [r2, #0]
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <confirm_action+0xb8>)
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <confirm_action+0xbc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000502:	fb01 f303 	mul.w	r3, r1, r3
 8000506:	4413      	add	r3, r2
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <confirm_action+0xb8>)
 800050a:	6093      	str	r3, [r2, #8]
		break;
 800050c:	e000      	b.n	8000510 <confirm_action+0xb0>
	default:
		break;
 800050e:	bf00      	nop
	}

}
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	20000010 	.word	0x20000010
 800051c:	200000b8 	.word	0x200000b8

08000520 <state_handle>:

void state_handle() {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <state_handle+0x9c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d841      	bhi.n	80005b0 <state_handle+0x90>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <state_handle+0x14>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	08000545 	.word	0x08000545
 8000538:	08000553 	.word	0x08000553
 800053c:	08000573 	.word	0x08000573
 8000540:	08000593 	.word	0x08000593
	case 0:
		SEG7_CLOCK[VER_LED] = 0;
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <state_handle+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <state_handle+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
		break;
 8000550:	e02f      	b.n	80005b2 <state_handle+0x92>
	case 1:
		SEG7_CLOCK[VER_LED] = 1 * TIME_UNIT;
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <state_handle+0xa0>)
 8000554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000558:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[0] + TIMES_INC * TIME_UNIT;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <state_handle+0xa4>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <state_handle+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000566:	fb01 f303 	mul.w	r3, r1, r3
 800056a:	4413      	add	r3, r2
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <state_handle+0xa0>)
 800056e:	6053      	str	r3, [r2, #4]
		break;
 8000570:	e01f      	b.n	80005b2 <state_handle+0x92>
	case 2:
		SEG7_CLOCK[VER_LED] = 2  * TIME_UNIT;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <state_handle+0xa0>)
 8000574:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000578:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[1] + TIMES_INC * TIME_UNIT;
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <state_handle+0xa4>)
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <state_handle+0xa8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000586:	fb01 f303 	mul.w	r3, r1, r3
 800058a:	4413      	add	r3, r2
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <state_handle+0xa0>)
 800058e:	6053      	str	r3, [r2, #4]
		break;
 8000590:	e00f      	b.n	80005b2 <state_handle+0x92>
	case 3:
		SEG7_CLOCK[VER_LED] = 3  * TIME_UNIT;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <state_handle+0xa0>)
 8000594:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000598:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <state_handle+0xa4>)
 800059c:	689a      	ldr	r2, [r3, #8]
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <state_handle+0xa8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a6:	fb01 f303 	mul.w	r3, r1, r3
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <state_handle+0xa0>)
 80005ae:	6053      	str	r3, [r2, #4]
	default:
		break;
 80005b0:	bf00      	nop
	}
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000b4 	.word	0x200000b4
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000010 	.word	0x20000010
 80005c8:	200000b8 	.word	0x200000b8

080005cc <traffic_processing>:

void traffic_processing() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	switch (status) {
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <traffic_processing+0x68>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d027      	beq.n	8000628 <traffic_processing+0x5c>
 80005d8:	2b02      	cmp	r3, #2
 80005da:	dc28      	bgt.n	800062e <traffic_processing+0x62>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <traffic_processing+0x1a>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d01e      	beq.n	8000622 <traffic_processing+0x56>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 80005e4:	e023      	b.n	800062e <traffic_processing+0x62>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <traffic_processing+0x6c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <traffic_processing+0x6c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <traffic_processing+0x6c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <traffic_processing+0x70>)
 80005f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <traffic_processing+0x74>)
 80005fe:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <traffic_processing+0x6c>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <traffic_processing+0x70>)
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <traffic_processing+0x74>)
 800060c:	6053      	str	r3, [r2, #4]
		updateDisplay();
 800060e:	f7ff fd9d 	bl	800014c <updateDisplay>
		vertical_processing();
 8000612:	f7ff fdfd 	bl	8000210 <vertical_processing>
		horizontal_processing();
 8000616:	f7ff fe37 	bl	8000288 <horizontal_processing>
		status = 1;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <traffic_processing+0x68>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
		break;
 8000620:	e006      	b.n	8000630 <traffic_processing+0x64>
		update_clock();
 8000622:	f7ff fec5 	bl	80003b0 <update_clock>
		break;
 8000626:	e003      	b.n	8000630 <traffic_processing+0x64>
		state_handle();
 8000628:	f7ff ff7a 	bl	8000520 <state_handle>
		break;
 800062c:	e000      	b.n	8000630 <traffic_processing+0x64>
		break;
 800062e:	bf00      	nop
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000ac 	.word	0x200000ac
 8000638:	20000000 	.word	0x20000000
 800063c:	20000010 	.word	0x20000010
 8000640:	20000008 	.word	0x20000008

08000644 <input_processing>:

void input_processing() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f873 	bl	8000734 <is_button_pressed>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d011      	beq.n	8000678 <input_processing+0x34>
		status = 2;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <input_processing+0xa0>)
 8000656:	2202      	movs	r2, #2
 8000658:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1) % 4;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <input_processing+0xa4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	425a      	negs	r2, r3
 8000662:	f003 0303 	and.w	r3, r3, #3
 8000666:	f002 0203 	and.w	r2, r2, #3
 800066a:	bf58      	it	pl
 800066c:	4253      	negpl	r3, r2
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <input_processing+0xa4>)
 8000670:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <input_processing+0xa8>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
	}

	// Add button
	if (is_button_pressed(1) && index_mode != 0) {
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f85b 	bl	8000734 <is_button_pressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <input_processing+0x52>
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <input_processing+0xa4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <input_processing+0x52>
		TIMES_INC++;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <input_processing+0xa8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <input_processing+0xa8>)
 8000694:	6013      	str	r3, [r2, #0]
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != 0) {
 8000696:	2002      	movs	r0, #2
 8000698:	f000 f84c 	bl	8000734 <is_button_pressed>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <input_processing+0x88>
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <input_processing+0xa4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d010      	beq.n	80006cc <input_processing+0x88>
		if (TIMES_INC != 0) {
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <input_processing+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <input_processing+0x78>
			confirm_action(index_mode);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <input_processing+0xa4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fed2 	bl	8000460 <confirm_action>
		}
		TIMES_INC = 0;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <input_processing+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
		index_mode = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <input_processing+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
		restart();
 80006c8:	f7ff febe 	bl	8000448 <restart>
	}

	// RESET when start
	if (start == 0) {
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <input_processing+0xac>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <input_processing+0x9a>
		reset();
 80006d4:	f7ff fe8c 	bl	80003f0 <reset>
		start = 1;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <input_processing+0xac>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
	}
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	200000b8 	.word	0x200000b8
 80006f0:	200000b0 	.word	0x200000b0

080006f4 <fsm_simple_button_run>:

void fsm_simple_button_run() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	switch (buttonState) {
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <fsm_simple_button_run+0x3c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <fsm_simple_button_run+0x12>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00a      	beq.n	800071a <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 8000704:	e011      	b.n	800072a <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 8000706:	f7ff fd45 	bl	8000194 <WhichButtonIsPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <fsm_simple_button_run+0x3c>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
			input_processing();
 8000716:	f7ff ff95 	bl	8000644 <input_processing>
		if (!WhichButtonIsPressed()) {
 800071a:	f7ff fd3b 	bl	8000194 <WhichButtonIsPressed>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <fsm_simple_button_run+0x3c>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		break;
 800072a:	bf00      	nop
	}
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000bc 	.word	0x200000bc

08000734 <is_button_pressed>:
			}
		}
	}
}
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d901      	bls.n	8000748 <is_button_pressed+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e007      	b.n	8000758 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <is_button_pressed+0x30>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000c0 	.word	0x200000c0

08000768 <SCH_Go_To_Sleep>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SCH_Go_To_Sleep() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 800076c:	f000 fe12 	bl	8001394 <HAL_SuspendTick>
	//HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 0); // Just to indicate sleep mode is active
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000770:	2101      	movs	r1, #1
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f8ec 	bl	8001950 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000778:	f000 fe1a 	bl	80013b0 <HAL_ResumeTick>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fda4 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f822 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f94e 	bl	8000a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000790:	f000 f922 	bl	80009d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000794:	f000 f85e 	bl	8000854 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000798:	f000 f8a8 	bl	80008ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <main+0x48>)
 800079e:	f001 fd5d 	bl	800225c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <main+0x4c>)
 80007a4:	f001 fd5a 	bl	800225c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //SCH_Init();


  find_new_min_task();
 80007a8:	f000 fba0 	bl	8000eec <find_new_min_task>
  setTimer2(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fbec 	bl	8000f8c <setTimer2>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80007b4:	f000 f9f8 	bl	8000ba8 <SCH_Dispatch_Tasks>
	  // turn on LED for indicate when not in sleep mode
	  // SCH go to sleep, wait for any interrupt.
	  SCH_Go_To_Sleep();
 80007b8:	f7ff ffd6 	bl	8000768 <SCH_Go_To_Sleep>
	  // turn of LED for indicate while MCU is sleeping.
    /* USER CODE END WHILE */
	  traffic_processing();
 80007bc:	f7ff ff06 	bl	80005cc <traffic_processing>
	  fsm_simple_button_run();
 80007c0:	f7ff ff98 	bl	80006f4 <fsm_simple_button_run>
  {
 80007c4:	e7f6      	b.n	80007b4 <main+0x34>
 80007c6:	bf00      	nop
 80007c8:	20000164 	.word	0x20000164
 80007cc:	2000011c 	.word	0x2000011c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b090      	sub	sp, #64	; 0x40
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2228      	movs	r2, #40	; 0x28
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fd66 	bl	80032b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000802:	2300      	movs	r3, #0
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000806:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4618      	mov	r0, r3
 8000812:	f001 f8b9 	bl	8001988 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800081c:	f000 f9bf 	bl	8000b9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2102      	movs	r1, #2
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fb24 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000846:	f000 f9aa 	bl	8000b9e <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3740      	adds	r7, #64	; 0x40
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM2_Init+0x94>)
 800087a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000888:	2213      	movs	r2, #19
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_TIM2_Init+0x94>)
 800089a:	f001 fc8f 	bl	80021bc <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a4:	f000 f97b 	bl	8000b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008b6:	f001 ff41 	bl	800273c <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f96d 	bl	8000b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fa9b 	bl	8002e0c <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f95f 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000164 	.word	0x20000164

080008ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_TIM3_Init+0xe4>)
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <MX_TIM3_Init+0xe8>)
 8000920:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000924:	223f      	movs	r2, #63	; 0x3f
 8000926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_TIM3_Init+0xe4>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000930:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000934:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_TIM3_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000944:	f001 fc3a 	bl	80021bc <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800094e:	f000 f926 	bl	8000b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095c:	4619      	mov	r1, r3
 800095e:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000960:	f001 feec 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800096a:	f000 f918 	bl	8000b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_TIM3_Init+0xe4>)
 8000970:	f001 fcc6 	bl	8002300 <HAL_TIM_PWM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 f910 	bl	8000b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	4619      	mov	r1, r3
 800098c:	4810      	ldr	r0, [pc, #64]	; (80009d0 <MX_TIM3_Init+0xe4>)
 800098e:	f002 fa3d 	bl	8002e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000998:	f000 f901 	bl	8000b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM3_Init+0xe4>)
 80009b4:	f001 fe04 	bl	80025c0 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009be:	f000 f8ee 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM3_Init+0xe4>)
 80009c4:	f000 fb6e 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000011c 	.word	0x2000011c
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f002 fa6c 	bl	8002eec <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f8c0 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001ac 	.word	0x200001ac
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a40:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a44      	ldr	r2, [pc, #272]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a3e      	ldr	r2, [pc, #248]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <MX_GPIO_Init+0x12c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Traffic_Pedes_2_Pin|Traffic_1_1_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <MX_GPIO_Init+0x130>)
 8000aa8:	f000 ff22 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000ab2:	482b      	ldr	r0, [pc, #172]	; (8000b60 <MX_GPIO_Init+0x134>)
 8000ab4:	f000 ff1c 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_GPIO_Init+0x138>)
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	4826      	ldr	r0, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x13c>)
 8000ace:	f000 fd8b 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin B_2_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin|B_2_Pin;
 8000ad2:	2313      	movs	r3, #19
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <MX_GPIO_Init+0x130>)
 8000ae6:	f000 fd7f 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Traffic_Pedes_2_Pin Traffic_1_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Traffic_Pedes_2_Pin|Traffic_1_1_Pin;
 8000aea:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <MX_GPIO_Init+0x130>)
 8000b04:	f000 fd70 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_3_Pin */
  GPIO_InitStruct.Pin = B_3_Pin;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B_3_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_GPIO_Init+0x134>)
 8000b1c:	f000 fd64 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_Pedes_1_Pin Traffic_1_2_Pin Traffic_2_2_Pin Traffic_2_1_Pin */
  GPIO_InitStruct.Pin = Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin;
 8000b20:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_GPIO_Init+0x134>)
 8000b3a:	f000 fd55 	bl	80015e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2028      	movs	r0, #40	; 0x28
 8000b44:	f000 fd19 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b48:	2028      	movs	r0, #40	; 0x28
 8000b4a:	f000 fd32 	bl	80015b2 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	10110000 	.word	0x10110000
 8000b68:	40011000 	.word	0x40011000

08000b6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
		//timestamp++; // increase timestamp by 10ms
		SCH_Update();
 8000b7e:	f000 f85f 	bl	8000c40 <SCH_Update>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	80fb      	strh	r3, [r7, #6]

}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba2:	b672      	cpsid	i
}
 8000ba4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <Error_Handler+0x8>

08000ba8 <SCH_Dispatch_Tasks>:
	}

	return Return_code;
}

void SCH_Dispatch_Tasks(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	int i = min_index;
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SCH_Dispatch_Tasks+0x90>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	607b      	str	r3, [r7, #4]
	// check flag of min_index
	if (SCH_tasks_G[i].RunMe > 0) {
 8000bb4:	4921      	ldr	r1, [pc, #132]	; (8000c3c <SCH_Dispatch_Tasks+0x94>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d02f      	beq.n	8000c2a <SCH_Dispatch_Tasks+0x82>
		update_other_tasks();
 8000bca:	f000 f957 	bl	8000e7c <update_other_tasks>
		(*SCH_tasks_G[i].pTask)();
 8000bce:	491b      	ldr	r1, [pc, #108]	; (8000c3c <SCH_Dispatch_Tasks+0x94>)
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4798      	blx	r3
		SCH_tasks_G[i].RunMe--;
 8000be0:	4916      	ldr	r1, [pc, #88]	; (8000c3c <SCH_Dispatch_Tasks+0x94>)
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	330c      	adds	r3, #12
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	b2d8      	uxtb	r0, r3
 8000bf6:	4911      	ldr	r1, [pc, #68]	; (8000c3c <SCH_Dispatch_Tasks+0x94>)
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	330c      	adds	r3, #12
 8000c06:	4602      	mov	r2, r0
 8000c08:	701a      	strb	r2, [r3, #0]
		// If it's one-shot task, remove it form the array
		if (SCH_tasks_G[i].Period == 0) {
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <SCH_Dispatch_Tasks+0x94>)
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d104      	bne.n	8000c2a <SCH_Dispatch_Tasks+0x82>
			SCH_Delete_Task(i);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8c7 	bl	8000db8 <SCH_Delete_Task>
		}
	}
	// Report system status
	SCH_Report_Status();
 8000c2a:	f000 f9a9 	bl	8000f80 <SCH_Report_Status>
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000cc 	.word	0x200000cc
 8000c3c:	200001f0 	.word	0x200001f0

08000c40 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 8000c44:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <SCH_Update+0xa4>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4927      	ldr	r1, [pc, #156]	; (8000ce8 <SCH_Update+0xa8>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <SCH_Update+0x44>
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <SCH_Update+0xa4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4921      	ldr	r1, [pc, #132]	; (8000ce8 <SCH_Update+0xa8>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1e59      	subs	r1, r3, #1
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <SCH_Update+0xa8>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4403      	add	r3, r0
 8000c7e:	3304      	adds	r3, #4
 8000c80:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 8000c82:	e02a      	b.n	8000cda <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SCH_Update+0xa4>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <SCH_Update+0xa4>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4816      	ldr	r0, [pc, #88]	; (8000ce8 <SCH_Update+0xa8>)
 8000c8e:	460b      	mov	r3, r1
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	440b      	add	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4403      	add	r3, r0
 8000c98:	3308      	adds	r3, #8
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <SCH_Update+0xa8>)
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3304      	adds	r3, #4
 8000caa:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <SCH_Update+0xa4>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <SCH_Update+0xa8>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <SCH_Update+0xa4>)
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <SCH_Update+0xa8>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200000cc 	.word	0x200000cc
 8000ce8:	200001f0 	.word	0x200001f0

08000cec <Shift_Task_To_Left>:

void Shift_Task_To_Left(int index_a, int index_b) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	SCH_tasks_G[index_a].pTask = SCH_tasks_G[index_b].pTask;
 8000cf6:	492f      	ldr	r1, [pc, #188]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	482b      	ldr	r0, [pc, #172]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4403      	add	r3, r0
 8000d14:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Delay = SCH_tasks_G[index_b].Delay;
 8000d16:	4927      	ldr	r1, [pc, #156]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3304      	adds	r3, #4
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	4822      	ldr	r0, [pc, #136]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4403      	add	r3, r0
 8000d36:	3304      	adds	r3, #4
 8000d38:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Period =  SCH_tasks_G[index_b].Period;
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	3308      	adds	r3, #8
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4403      	add	r3, r0
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].RunMe = SCH_tasks_G[index_b].RunMe;
 8000d5e:	4915      	ldr	r1, [pc, #84]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	330c      	adds	r3, #12
 8000d6e:	7818      	ldrb	r0, [r3, #0]
 8000d70:	4910      	ldr	r1, [pc, #64]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	330c      	adds	r3, #12
 8000d80:	4602      	mov	r2, r0
 8000d82:	701a      	strb	r2, [r3, #0]

	SCH_tasks_G[index_a].TaskID = SCH_tasks_G[index_b].TaskID;
 8000d84:	490b      	ldr	r1, [pc, #44]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	3310      	adds	r3, #16
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <Shift_Task_To_Left+0xc8>)
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4403      	add	r3, r0
 8000da4:	3310      	adds	r3, #16
 8000da6:	6019      	str	r1, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200001f0 	.word	0x200001f0

08000db8 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint16_t TASK_INDEX) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
	unsigned char Return_code;
	if (current_index_task < 0 || current_index_task >= SCH_MAX_TASKS) {
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db03      	blt.n	8000dd2 <SCH_Delete_Task+0x1a>
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b27      	cmp	r3, #39	; 0x27
 8000dd0:	dd06      	ble.n	8000de0 <SCH_Delete_Task+0x28>
		// No task at this location...
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <SCH_Delete_Task+0xbc>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	72fb      	strb	r3, [r7, #11]
		return Return_code;
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	e043      	b.n	8000e68 <SCH_Delete_Task+0xb0>
	} else {
		Return_code = RETURN_NORMAL;
 8000de0:	2303      	movs	r3, #3
 8000de2:	72fb      	strb	r3, [r7, #11]
	}
	// Shift task from TASK_INDEX + 1 to the left
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e008      	b.n	8000dfc <SCH_Delete_Task+0x44>
		Shift_Task_To_Left(i, i + 1);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff ff7b 	bl	8000cec <Shift_Task_To_Left>
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dbf1      	blt.n	8000dea <SCH_Delete_Task+0x32>
	}
	// Remove last index task
	SCH_tasks_G[current_index_task].pTask = 0x0000 ;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	491b      	ldr	r1, [pc, #108]	; (8000e78 <SCH_Delete_Task+0xc0>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4916      	ldr	r1, [pc, #88]	; (8000e78 <SCH_Delete_Task+0xc0>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4910      	ldr	r1, [pc, #64]	; (8000e78 <SCH_Delete_Task+0xc0>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3308      	adds	r3, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	490b      	ldr	r1, [pc, #44]	; (8000e78 <SCH_Delete_Task+0xc0>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	330c      	adds	r3, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <SCH_Delete_Task+0xb8>)
 8000e64:	6013      	str	r3, [r2, #0]

	return Return_code;
 8000e66:	7afb      	ldrb	r3, [r7, #11]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000c4 	.word	0x200000c4
 8000e74:	200000c8 	.word	0x200000c8
 8000e78:	200001f0 	.word	0x200001f0

08000e7c <update_other_tasks>:

void update_other_tasks() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e01e      	b.n	8000ec6 <update_other_tasks+0x4a>
		if (i == min_index) {
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <update_other_tasks+0x60>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d015      	beq.n	8000ebe <update_other_tasks+0x42>
			continue;
		}

		SCH_tasks_G[i].Delay -= min_delay;
 8000e92:	4913      	ldr	r1, [pc, #76]	; (8000ee0 <update_other_tasks+0x64>)
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <update_other_tasks+0x68>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	1a99      	subs	r1, r3, r2
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <update_other_tasks+0x64>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4403      	add	r3, r0
 8000eb8:	3304      	adds	r3, #4
 8000eba:	6019      	str	r1, [r3, #0]
 8000ebc:	e000      	b.n	8000ec0 <update_other_tasks+0x44>
			continue;
 8000ebe:	bf00      	nop
	for (int i = 0; i < current_index_task; i++) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <update_other_tasks+0x6c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbdb      	blt.n	8000e88 <update_other_tasks+0xc>
	}

	find_new_min_task();
 8000ed0:	f000 f80c 	bl	8000eec <find_new_min_task>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000cc 	.word	0x200000cc
 8000ee0:	200001f0 	.word	0x200001f0
 8000ee4:	200000d0 	.word	0x200000d0
 8000ee8:	200000c4 	.word	0x200000c4

08000eec <find_new_min_task>:

void find_new_min_task() {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
	// find new min index of schedule array
	min_index = 0;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <find_new_min_task+0x84>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	min_delay = SCH_tasks_G[min_index].Delay;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <find_new_min_task+0x84>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	491d      	ldr	r1, [pc, #116]	; (8000f74 <find_new_min_task+0x88>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3304      	adds	r3, #4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <find_new_min_task+0x8c>)
 8000f10:	601a      	str	r2, [r3, #0]

	for (int i = min_index + 1; i < current_index_task; i++) {
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <find_new_min_task+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	e01e      	b.n	8000f5a <find_new_min_task+0x6e>
		if (SCH_tasks_G[i].Delay < min_delay) {
 8000f1c:	4915      	ldr	r1, [pc, #84]	; (8000f74 <find_new_min_task+0x88>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <find_new_min_task+0x8c>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d20e      	bcs.n	8000f54 <find_new_min_task+0x68>
			min_index = i;
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <find_new_min_task+0x84>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6013      	str	r3, [r2, #0]
			min_delay = SCH_tasks_G[i].Delay;
 8000f3c:	490d      	ldr	r1, [pc, #52]	; (8000f74 <find_new_min_task+0x88>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <find_new_min_task+0x8c>)
 8000f52:	601a      	str	r2, [r3, #0]
	for (int i = min_index + 1; i < current_index_task; i++) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <find_new_min_task+0x90>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbdb      	blt.n	8000f1c <find_new_min_task+0x30>
		}
	}
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	200000cc 	.word	0x200000cc
 8000f74:	200001f0 	.word	0x200001f0
 8000f78:	200000d0 	.word	0x200000d0
 8000f7c:	200000c4 	.word	0x200000c4

08000f80 <SCH_Report_Status>:
void SCH_Report_Status(void) {
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
				Error_code_G = 0; // Reset error code
			}
		}
	}
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <setTimer2>:
int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
	timer1_counter = duration / TIMER_CYCLE;
	timer1_flag = 0;
}
void setTimer2(int duration) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <setTimer2+0x28>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <setTimer2+0x2c>)
 8000fa0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <setTimer2+0x30>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000001c 	.word	0x2000001c
 8000fb8:	200000d8 	.word	0x200000d8
 8000fbc:	200000d4 	.word	0x200000d4

08000fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d114      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201c      	movs	r0, #28
 8001054:	f000 fa91 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001058:	201c      	movs	r0, #28
 800105a:	f000 faaa 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105e:	e018      	b.n	8001092 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d113      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	201d      	movs	r0, #29
 8001088:	f000 fa77 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800108c:	201d      	movs	r0, #29
 800108e:	f000 fa90 	bl	80015b2 <HAL_NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40000400 	.word	0x40000400

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_TIM_MspPostInit+0x58>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d117      	bne.n	80010f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_MspPostInit+0x5c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_TIM_MspPostInit+0x5c>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_TIM_MspPostInit+0x5c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010f0:	f000 fa7a 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40000400 	.word	0x40000400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x70>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d123      	bne.n	8001170 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x74>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_UART_MspInit+0x74>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x74>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x74>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_UART_MspInit+0x74>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_UART_MspInit+0x74>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001158:	230c      	movs	r3, #12
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_MspInit+0x78>)
 800116c:	f000 fa3c 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f8c7 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x10>)
 80011da:	f001 f8e9 	bl	80023b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000164 	.word	0x20000164

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM3_IRQHandler+0x10>)
 80011ee:	f001 f8df 	bl	80023b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000011c 	.word	0x2000011c

080011fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001200:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001204:	f000 fb8c 	bl	8001920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f002 f80e 	bl	800325c <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20005000 	.word	0x20005000
 800126c:	00000400 	.word	0x00000400
 8001270:	200000dc 	.word	0x200000dc
 8001274:	20000528 	.word	0x20000528

08001278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012aa:	f7ff ffe5 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f001 ffdb 	bl	8003268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff fa65 	bl	8000780 <main>
  bx lr
 80012b6:	4770      	bx	lr
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012c0:	08003bbc 	.word	0x08003bbc
  ldr r2, =_sbss
 80012c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012c8:	20000524 	.word	0x20000524

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f93f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fe68 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f957 	bl	80015ce <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f91f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000020 	.word	0x20000020
 8001354:	20000028 	.word	0x20000028
 8001358:	20000024 	.word	0x20000024

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000028 	.word	0x20000028
 800137c:	20000510 	.word	0x20000510

08001380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000510 	.word	0x20000510

08001394 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <HAL_SuspendTick+0x18>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_SuspendTick+0x18>)
 800139e:	f023 0302 	bic.w	r3, r3, #2
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_ResumeTick+0x18>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <HAL_ResumeTick+0x18>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e010 	.word	0xe000e010

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4906      	ldr	r1, [pc, #24]	; (8001464 <__NVIC_EnableIRQ+0x34>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff90 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff2d 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff42 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff90 	bl	80014bc <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5f 	bl	8001468 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff35 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e169      	b.n	80018d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015fc:	2201      	movs	r2, #1
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8158 	bne.w	80018ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a9a      	ldr	r2, [pc, #616]	; (8001888 <HAL_GPIO_Init+0x2a0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d05e      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001624:	4a98      	ldr	r2, [pc, #608]	; (8001888 <HAL_GPIO_Init+0x2a0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d875      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800162a:	4a98      	ldr	r2, [pc, #608]	; (800188c <HAL_GPIO_Init+0x2a4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d058      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001630:	4a96      	ldr	r2, [pc, #600]	; (800188c <HAL_GPIO_Init+0x2a4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d86f      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001636:	4a96      	ldr	r2, [pc, #600]	; (8001890 <HAL_GPIO_Init+0x2a8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d052      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 800163c:	4a94      	ldr	r2, [pc, #592]	; (8001890 <HAL_GPIO_Init+0x2a8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d869      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001642:	4a94      	ldr	r2, [pc, #592]	; (8001894 <HAL_GPIO_Init+0x2ac>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04c      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001648:	4a92      	ldr	r2, [pc, #584]	; (8001894 <HAL_GPIO_Init+0x2ac>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d863      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800164e:	4a92      	ldr	r2, [pc, #584]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d046      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001654:	4a90      	ldr	r2, [pc, #576]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d85d      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d82a      	bhi.n	80016b4 <HAL_GPIO_Init+0xcc>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d859      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_GPIO_Init+0x80>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016bd 	.word	0x080016bd
 8001670:	080016cf 	.word	0x080016cf
 8001674:	08001711 	.word	0x08001711
 8001678:	08001717 	.word	0x08001717
 800167c:	08001717 	.word	0x08001717
 8001680:	08001717 	.word	0x08001717
 8001684:	08001717 	.word	0x08001717
 8001688:	08001717 	.word	0x08001717
 800168c:	08001717 	.word	0x08001717
 8001690:	08001717 	.word	0x08001717
 8001694:	08001717 	.word	0x08001717
 8001698:	08001717 	.word	0x08001717
 800169c:	08001717 	.word	0x08001717
 80016a0:	08001717 	.word	0x08001717
 80016a4:	08001717 	.word	0x08001717
 80016a8:	08001717 	.word	0x08001717
 80016ac:	080016c5 	.word	0x080016c5
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	4a79      	ldr	r2, [pc, #484]	; (800189c <HAL_GPIO_Init+0x2b4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ba:	e02c      	b.n	8001716 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e029      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	3304      	adds	r3, #4
 80016ca:	623b      	str	r3, [r7, #32]
          break;
 80016cc:	e024      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	3308      	adds	r3, #8
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e01f      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	330c      	adds	r3, #12
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e01a      	b.n	8001718 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ea:	2304      	movs	r3, #4
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e013      	b.n	8001718 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	611a      	str	r2, [r3, #16]
          break;
 8001702:	e009      	b.n	8001718 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	615a      	str	r2, [r3, #20]
          break;
 800170e:	e003      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x130>
          break;
 8001716:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2bff      	cmp	r3, #255	; 0xff
 800171c:	d801      	bhi.n	8001722 <HAL_GPIO_Init+0x13a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_Init+0x13e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d802      	bhi.n	8001734 <HAL_GPIO_Init+0x14c>
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x152>
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3b08      	subs	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	210f      	movs	r1, #15
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80b1 	beq.w	80018ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_GPIO_Init+0x2b8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <HAL_GPIO_Init+0x2b8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <HAL_GPIO_Init+0x2b8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001780:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <HAL_GPIO_Init+0x2bc>)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <HAL_GPIO_Init+0x2c0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_GPIO_Init+0x1ec>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3f      	ldr	r2, [pc, #252]	; (80018ac <HAL_GPIO_Init+0x2c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1e8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <HAL_GPIO_Init+0x2c8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1e4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3d      	ldr	r2, [pc, #244]	; (80018b4 <HAL_GPIO_Init+0x2cc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1e0>
 80017c4:	2303      	movs	r3, #3
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017c8:	2304      	movs	r3, #4
 80017ca:	e004      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017d4:	2300      	movs	r3, #0
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4093      	lsls	r3, r2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e6:	492f      	ldr	r1, [pc, #188]	; (80018a4 <HAL_GPIO_Init+0x2bc>)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	492c      	ldr	r1, [pc, #176]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4928      	ldr	r1, [pc, #160]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4922      	ldr	r1, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	491e      	ldr	r1, [pc, #120]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	4914      	ldr	r1, [pc, #80]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d021      	beq.n	80018bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
 8001884:	e021      	b.n	80018ca <HAL_GPIO_Init+0x2e2>
 8001886:	bf00      	nop
 8001888:	10320000 	.word	0x10320000
 800188c:	10310000 	.word	0x10310000
 8001890:	10220000 	.word	0x10220000
 8001894:	10210000 	.word	0x10210000
 8001898:	10120000 	.word	0x10120000
 800189c:	10110000 	.word	0x10110000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40011400 	.word	0x40011400
 80018b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_GPIO_Init+0x304>)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4909      	ldr	r1, [pc, #36]	; (80018ec <HAL_GPIO_Init+0x304>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3301      	adds	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f ae8e 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	372c      	adds	r7, #44	; 0x2c
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	611a      	str	r2, [r3, #16]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f923 	bl	8000b8a <HAL_GPIO_EXTI_Callback>
  }
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_PWR_EnterSLEEPMode+0x34>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800196e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001970:	e002      	b.n	8001978 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001972:	bf40      	sev
    __WFE();
 8001974:	bf20      	wfe
    __WFE();
 8001976:	bf20      	wfe
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc8c 	bl	8001380 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc88 	bl	8001380 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fc78 	bl	8001380 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fc74 	bl	8001380 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc2d 	bl	8001380 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc29 	bl	8001380 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc0c 	bl	8001380 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc08 	bl	8001380 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fbec 	bl	8001380 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fbe8 	bl	8001380 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fad8 	bl	8002180 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fbd2 	bl	8001380 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fbce 	bl	8001380 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fb8f 	bl	8001380 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fb8b 	bl	8001380 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb3f 	bl	8001380 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb3b 	bl	8001380 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb29 	bl	8001380 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fb25 	bl	8001380 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff faf9 	bl	8001380 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff faf5 	bl	8001380 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fac9 	bl	8001380 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fac5 	bl	8001380 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fab2 	bl	8001380 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff faae 	bl	8001380 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7ff fa02 	bl	8001380 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff f9fe 	bl	8001380 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f960 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08003b68 	.word	0x08003b68
 8002054:	20000020 	.word	0x20000020
 8002058:	20000024 	.word	0x20000024

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800206c:	f240 2301 	movw	r3, #513	; 0x201
 8002070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e02d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	623b      	str	r3, [r7, #32]
      break;
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ce:	4413      	add	r3, r2
 80020d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08003b58 	.word	0x08003b58
 8002110:	40021000 	.word	0x40021000
 8002114:	007a1200 	.word	0x007a1200
 8002118:	003d0900 	.word	0x003d0900

0800211c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_RCC_GetHCLKFreq+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000020 	.word	0x20000020

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002134:	f7ff fff2 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08003b78 	.word	0x08003b78

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800215c:	f7ff ffde 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08003b78 	.word	0x08003b78

08002180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <RCC_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <RCC_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000020 	.word	0x20000020
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe ff1e 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fb86 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e03a      	b.n	80022ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_TIM_Base_Start_IT+0xa0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d010      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e041      	b.n	8002396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f839 	bl	800239e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fae4 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d122      	bne.n	800240c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d11b      	bne.n	800240c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0202 	mvn.w	r2, #2
 80023dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa6f 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa62 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fa71 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d122      	bne.n	8002460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d11b      	bne.n	8002460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0204 	mvn.w	r2, #4
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa45 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa38 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fa47 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b08      	cmp	r3, #8
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b08      	cmp	r3, #8
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0208 	mvn.w	r2, #8
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2204      	movs	r2, #4
 800248a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa1b 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa0e 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa1d 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0210 	mvn.w	r2, #16
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2208      	movs	r2, #8
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9f1 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f9e4 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f9f3 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fb1c 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	d10e      	bne.n	8002560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d107      	bne.n	8002560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fcbd 	bl	8002eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d10e      	bne.n	800258c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d107      	bne.n	800258c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9b7 	bl	80028fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0220 	mvn.w	r2, #32
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fc88 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ac      	b.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f200 809f 	bhi.w	8002728 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002729 	.word	0x08002729
 80025f8:	08002729 	.word	0x08002729
 80025fc:	08002729 	.word	0x08002729
 8002600:	08002665 	.word	0x08002665
 8002604:	08002729 	.word	0x08002729
 8002608:	08002729 	.word	0x08002729
 800260c:	08002729 	.word	0x08002729
 8002610:	080026a7 	.word	0x080026a7
 8002614:	08002729 	.word	0x08002729
 8002618:	08002729 	.word	0x08002729
 800261c:	08002729 	.word	0x08002729
 8002620:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f9d0 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      break;
 8002662:	e062      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fa16 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      break;
 80026a4:	e041      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa5f 	bl	8002b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      break;
 80026e4:	e021      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 faa9 	bl	8002c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e000      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e0b3      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x180>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278c:	d03e      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xd0>
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002792:	f200 8087 	bhi.w	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	f000 8085 	beq.w	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d87f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027a4:	2b70      	cmp	r3, #112	; 0x70
 80027a6:	d01a      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xa2>
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d87b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b60      	cmp	r3, #96	; 0x60
 80027ae:	d050      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0x116>
 80027b0:	2b60      	cmp	r3, #96	; 0x60
 80027b2:	d877      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b50      	cmp	r3, #80	; 0x50
 80027b6:	d03c      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xf6>
 80027b8:	2b50      	cmp	r3, #80	; 0x50
 80027ba:	d873      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d058      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x136>
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d86f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b30      	cmp	r3, #48	; 0x30
 80027c6:	d064      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d86b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d060      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d867      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d05a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027dc:	e062      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f000 faee 	bl	8002dce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002800:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	609a      	str	r2, [r3, #8]
      break;
 800280a:	e04e      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f000 fad7 	bl	8002dce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282e:	609a      	str	r2, [r3, #8]
      break;
 8002830:	e03b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	461a      	mov	r2, r3
 8002840:	f000 fa4e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2150      	movs	r1, #80	; 0x50
 800284a:	4618      	mov	r0, r3
 800284c:	f000 faa5 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002850:	e02b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 fa6c 	bl	8002d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2160      	movs	r1, #96	; 0x60
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fa95 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002870:	e01b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 fa2e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fa85 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002890:	e00b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f000 fa7c 	bl	8002d9a <TIM_ITRx_SetConfig>
        break;
 80028a2:	e002      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10c      	bne.n	8002a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0308 	bic.w	r3, r3, #8
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <TIM_OC2_SetConfig+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10d      	bne.n	8002b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <TIM_OC2_SetConfig+0xd0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d113      	bne.n	8002b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <TIM_OC3_SetConfig+0xd0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10d      	bne.n	8002bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <TIM_OC3_SetConfig+0xd0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00

08002c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	031b      	lsls	r3, r3, #12
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <TIM_OC4_SetConfig+0x98>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f023 0210 	bic.w	r2, r3, #16
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	031b      	lsls	r3, r3, #12
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f043 0307 	orr.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e046      	b.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d009      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10c      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03f      	b.n	8002f7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f8f8 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f905 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af02      	add	r7, sp, #8
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d17c      	bne.n	80030a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Transmit+0x2c>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e075      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x3e>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e06e      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fda:	f7fe f9d1 	bl	8001380 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Transmit+0x82>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003018:	e02a      	b.n	8003070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f840 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e036      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	3302      	adds	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e007      	b.n	8003062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cf      	bne.n	800301a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f810 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	e02c      	b.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d028      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x30>
 80030ca:	f7fe f959 	bl	8001380 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d21d      	bcs.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e00f      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	429a      	cmp	r2, r3
 8003132:	d0c3      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800317a:	f023 030c 	bic.w	r3, r3, #12
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <UART_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe ffd6 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe ffbe 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 80031b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	0119      	lsls	r1, r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009a      	lsls	r2, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <UART_SetConfig+0x118>)
 80031ee:	fba3 0302 	umull	r0, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4419      	add	r1, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <UART_SetConfig+0x118>)
 8003226:	fba3 0302 	umull	r0, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	440a      	add	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013800 	.word	0x40013800
 8003258:	51eb851f 	.word	0x51eb851f

0800325c <__errno>:
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <__errno+0x8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	2000002c 	.word	0x2000002c

08003268 <__libc_init_array>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	2600      	movs	r6, #0
 800326c:	4d0c      	ldr	r5, [pc, #48]	; (80032a0 <__libc_init_array+0x38>)
 800326e:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <__libc_init_array+0x3c>)
 8003270:	1b64      	subs	r4, r4, r5
 8003272:	10a4      	asrs	r4, r4, #2
 8003274:	42a6      	cmp	r6, r4
 8003276:	d109      	bne.n	800328c <__libc_init_array+0x24>
 8003278:	f000 fc5c 	bl	8003b34 <_init>
 800327c:	2600      	movs	r6, #0
 800327e:	4d0a      	ldr	r5, [pc, #40]	; (80032a8 <__libc_init_array+0x40>)
 8003280:	4c0a      	ldr	r4, [pc, #40]	; (80032ac <__libc_init_array+0x44>)
 8003282:	1b64      	subs	r4, r4, r5
 8003284:	10a4      	asrs	r4, r4, #2
 8003286:	42a6      	cmp	r6, r4
 8003288:	d105      	bne.n	8003296 <__libc_init_array+0x2e>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003290:	4798      	blx	r3
 8003292:	3601      	adds	r6, #1
 8003294:	e7ee      	b.n	8003274 <__libc_init_array+0xc>
 8003296:	f855 3b04 	ldr.w	r3, [r5], #4
 800329a:	4798      	blx	r3
 800329c:	3601      	adds	r6, #1
 800329e:	e7f2      	b.n	8003286 <__libc_init_array+0x1e>
 80032a0:	08003bb4 	.word	0x08003bb4
 80032a4:	08003bb4 	.word	0x08003bb4
 80032a8:	08003bb4 	.word	0x08003bb4
 80032ac:	08003bb8 	.word	0x08003bb8

080032b0 <memset>:
 80032b0:	4603      	mov	r3, r0
 80032b2:	4402      	add	r2, r0
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d100      	bne.n	80032ba <memset+0xa>
 80032b8:	4770      	bx	lr
 80032ba:	f803 1b01 	strb.w	r1, [r3], #1
 80032be:	e7f9      	b.n	80032b4 <memset+0x4>

080032c0 <siprintf>:
 80032c0:	b40e      	push	{r1, r2, r3}
 80032c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032c6:	b500      	push	{lr}
 80032c8:	b09c      	sub	sp, #112	; 0x70
 80032ca:	ab1d      	add	r3, sp, #116	; 0x74
 80032cc:	9002      	str	r0, [sp, #8]
 80032ce:	9006      	str	r0, [sp, #24]
 80032d0:	9107      	str	r1, [sp, #28]
 80032d2:	9104      	str	r1, [sp, #16]
 80032d4:	4808      	ldr	r0, [pc, #32]	; (80032f8 <siprintf+0x38>)
 80032d6:	4909      	ldr	r1, [pc, #36]	; (80032fc <siprintf+0x3c>)
 80032d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80032dc:	9105      	str	r1, [sp, #20]
 80032de:	6800      	ldr	r0, [r0, #0]
 80032e0:	a902      	add	r1, sp, #8
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	f000 f868 	bl	80033b8 <_svfiprintf_r>
 80032e8:	2200      	movs	r2, #0
 80032ea:	9b02      	ldr	r3, [sp, #8]
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	b01c      	add	sp, #112	; 0x70
 80032f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032f4:	b003      	add	sp, #12
 80032f6:	4770      	bx	lr
 80032f8:	2000002c 	.word	0x2000002c
 80032fc:	ffff0208 	.word	0xffff0208

08003300 <__ssputs_r>:
 8003300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	688e      	ldr	r6, [r1, #8]
 8003306:	4682      	mov	sl, r0
 8003308:	429e      	cmp	r6, r3
 800330a:	460c      	mov	r4, r1
 800330c:	4690      	mov	r8, r2
 800330e:	461f      	mov	r7, r3
 8003310:	d838      	bhi.n	8003384 <__ssputs_r+0x84>
 8003312:	898a      	ldrh	r2, [r1, #12]
 8003314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003318:	d032      	beq.n	8003380 <__ssputs_r+0x80>
 800331a:	6825      	ldr	r5, [r4, #0]
 800331c:	6909      	ldr	r1, [r1, #16]
 800331e:	3301      	adds	r3, #1
 8003320:	eba5 0901 	sub.w	r9, r5, r1
 8003324:	6965      	ldr	r5, [r4, #20]
 8003326:	444b      	add	r3, r9
 8003328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800332c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003330:	106d      	asrs	r5, r5, #1
 8003332:	429d      	cmp	r5, r3
 8003334:	bf38      	it	cc
 8003336:	461d      	movcc	r5, r3
 8003338:	0553      	lsls	r3, r2, #21
 800333a:	d531      	bpl.n	80033a0 <__ssputs_r+0xa0>
 800333c:	4629      	mov	r1, r5
 800333e:	f000 fb53 	bl	80039e8 <_malloc_r>
 8003342:	4606      	mov	r6, r0
 8003344:	b950      	cbnz	r0, 800335c <__ssputs_r+0x5c>
 8003346:	230c      	movs	r3, #12
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f8ca 3000 	str.w	r3, [sl]
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003356:	81a3      	strh	r3, [r4, #12]
 8003358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335c:	464a      	mov	r2, r9
 800335e:	6921      	ldr	r1, [r4, #16]
 8003360:	f000 face 	bl	8003900 <memcpy>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800336a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	6126      	str	r6, [r4, #16]
 8003372:	444e      	add	r6, r9
 8003374:	6026      	str	r6, [r4, #0]
 8003376:	463e      	mov	r6, r7
 8003378:	6165      	str	r5, [r4, #20]
 800337a:	eba5 0509 	sub.w	r5, r5, r9
 800337e:	60a5      	str	r5, [r4, #8]
 8003380:	42be      	cmp	r6, r7
 8003382:	d900      	bls.n	8003386 <__ssputs_r+0x86>
 8003384:	463e      	mov	r6, r7
 8003386:	4632      	mov	r2, r6
 8003388:	4641      	mov	r1, r8
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	f000 fac6 	bl	800391c <memmove>
 8003390:	68a3      	ldr	r3, [r4, #8]
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	1b9b      	subs	r3, r3, r6
 8003396:	4432      	add	r2, r6
 8003398:	2000      	movs	r0, #0
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	e7db      	b.n	8003358 <__ssputs_r+0x58>
 80033a0:	462a      	mov	r2, r5
 80033a2:	f000 fb7b 	bl	8003a9c <_realloc_r>
 80033a6:	4606      	mov	r6, r0
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d1e1      	bne.n	8003370 <__ssputs_r+0x70>
 80033ac:	4650      	mov	r0, sl
 80033ae:	6921      	ldr	r1, [r4, #16]
 80033b0:	f000 face 	bl	8003950 <_free_r>
 80033b4:	e7c7      	b.n	8003346 <__ssputs_r+0x46>
	...

080033b8 <_svfiprintf_r>:
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	4698      	mov	r8, r3
 80033be:	898b      	ldrh	r3, [r1, #12]
 80033c0:	4607      	mov	r7, r0
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	460d      	mov	r5, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	b09d      	sub	sp, #116	; 0x74
 80033ca:	d50e      	bpl.n	80033ea <_svfiprintf_r+0x32>
 80033cc:	690b      	ldr	r3, [r1, #16]
 80033ce:	b963      	cbnz	r3, 80033ea <_svfiprintf_r+0x32>
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	f000 fb09 	bl	80039e8 <_malloc_r>
 80033d6:	6028      	str	r0, [r5, #0]
 80033d8:	6128      	str	r0, [r5, #16]
 80033da:	b920      	cbnz	r0, 80033e6 <_svfiprintf_r+0x2e>
 80033dc:	230c      	movs	r3, #12
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	e0d1      	b.n	800358a <_svfiprintf_r+0x1d2>
 80033e6:	2340      	movs	r3, #64	; 0x40
 80033e8:	616b      	str	r3, [r5, #20]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9309      	str	r3, [sp, #36]	; 0x24
 80033ee:	2320      	movs	r3, #32
 80033f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033f4:	2330      	movs	r3, #48	; 0x30
 80033f6:	f04f 0901 	mov.w	r9, #1
 80033fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035a4 <_svfiprintf_r+0x1ec>
 8003402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003406:	4623      	mov	r3, r4
 8003408:	469a      	mov	sl, r3
 800340a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800340e:	b10a      	cbz	r2, 8003414 <_svfiprintf_r+0x5c>
 8003410:	2a25      	cmp	r2, #37	; 0x25
 8003412:	d1f9      	bne.n	8003408 <_svfiprintf_r+0x50>
 8003414:	ebba 0b04 	subs.w	fp, sl, r4
 8003418:	d00b      	beq.n	8003432 <_svfiprintf_r+0x7a>
 800341a:	465b      	mov	r3, fp
 800341c:	4622      	mov	r2, r4
 800341e:	4629      	mov	r1, r5
 8003420:	4638      	mov	r0, r7
 8003422:	f7ff ff6d 	bl	8003300 <__ssputs_r>
 8003426:	3001      	adds	r0, #1
 8003428:	f000 80aa 	beq.w	8003580 <_svfiprintf_r+0x1c8>
 800342c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800342e:	445a      	add	r2, fp
 8003430:	9209      	str	r2, [sp, #36]	; 0x24
 8003432:	f89a 3000 	ldrb.w	r3, [sl]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a2 	beq.w	8003580 <_svfiprintf_r+0x1c8>
 800343c:	2300      	movs	r3, #0
 800343e:	f04f 32ff 	mov.w	r2, #4294967295
 8003442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003446:	f10a 0a01 	add.w	sl, sl, #1
 800344a:	9304      	str	r3, [sp, #16]
 800344c:	9307      	str	r3, [sp, #28]
 800344e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003452:	931a      	str	r3, [sp, #104]	; 0x68
 8003454:	4654      	mov	r4, sl
 8003456:	2205      	movs	r2, #5
 8003458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800345c:	4851      	ldr	r0, [pc, #324]	; (80035a4 <_svfiprintf_r+0x1ec>)
 800345e:	f000 fa41 	bl	80038e4 <memchr>
 8003462:	9a04      	ldr	r2, [sp, #16]
 8003464:	b9d8      	cbnz	r0, 800349e <_svfiprintf_r+0xe6>
 8003466:	06d0      	lsls	r0, r2, #27
 8003468:	bf44      	itt	mi
 800346a:	2320      	movmi	r3, #32
 800346c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003470:	0711      	lsls	r1, r2, #28
 8003472:	bf44      	itt	mi
 8003474:	232b      	movmi	r3, #43	; 0x2b
 8003476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800347a:	f89a 3000 	ldrb.w	r3, [sl]
 800347e:	2b2a      	cmp	r3, #42	; 0x2a
 8003480:	d015      	beq.n	80034ae <_svfiprintf_r+0xf6>
 8003482:	4654      	mov	r4, sl
 8003484:	2000      	movs	r0, #0
 8003486:	f04f 0c0a 	mov.w	ip, #10
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	4621      	mov	r1, r4
 800348e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003492:	3b30      	subs	r3, #48	; 0x30
 8003494:	2b09      	cmp	r3, #9
 8003496:	d94e      	bls.n	8003536 <_svfiprintf_r+0x17e>
 8003498:	b1b0      	cbz	r0, 80034c8 <_svfiprintf_r+0x110>
 800349a:	9207      	str	r2, [sp, #28]
 800349c:	e014      	b.n	80034c8 <_svfiprintf_r+0x110>
 800349e:	eba0 0308 	sub.w	r3, r0, r8
 80034a2:	fa09 f303 	lsl.w	r3, r9, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	46a2      	mov	sl, r4
 80034aa:	9304      	str	r3, [sp, #16]
 80034ac:	e7d2      	b.n	8003454 <_svfiprintf_r+0x9c>
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	1d19      	adds	r1, r3, #4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	9103      	str	r1, [sp, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bfbb      	ittet	lt
 80034ba:	425b      	neglt	r3, r3
 80034bc:	f042 0202 	orrlt.w	r2, r2, #2
 80034c0:	9307      	strge	r3, [sp, #28]
 80034c2:	9307      	strlt	r3, [sp, #28]
 80034c4:	bfb8      	it	lt
 80034c6:	9204      	strlt	r2, [sp, #16]
 80034c8:	7823      	ldrb	r3, [r4, #0]
 80034ca:	2b2e      	cmp	r3, #46	; 0x2e
 80034cc:	d10c      	bne.n	80034e8 <_svfiprintf_r+0x130>
 80034ce:	7863      	ldrb	r3, [r4, #1]
 80034d0:	2b2a      	cmp	r3, #42	; 0x2a
 80034d2:	d135      	bne.n	8003540 <_svfiprintf_r+0x188>
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	3402      	adds	r4, #2
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	9203      	str	r2, [sp, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bfb8      	it	lt
 80034e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80034e6:	9305      	str	r3, [sp, #20]
 80034e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035b4 <_svfiprintf_r+0x1fc>
 80034ec:	2203      	movs	r2, #3
 80034ee:	4650      	mov	r0, sl
 80034f0:	7821      	ldrb	r1, [r4, #0]
 80034f2:	f000 f9f7 	bl	80038e4 <memchr>
 80034f6:	b140      	cbz	r0, 800350a <_svfiprintf_r+0x152>
 80034f8:	2340      	movs	r3, #64	; 0x40
 80034fa:	eba0 000a 	sub.w	r0, r0, sl
 80034fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003502:	9b04      	ldr	r3, [sp, #16]
 8003504:	3401      	adds	r4, #1
 8003506:	4303      	orrs	r3, r0
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350e:	2206      	movs	r2, #6
 8003510:	4825      	ldr	r0, [pc, #148]	; (80035a8 <_svfiprintf_r+0x1f0>)
 8003512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003516:	f000 f9e5 	bl	80038e4 <memchr>
 800351a:	2800      	cmp	r0, #0
 800351c:	d038      	beq.n	8003590 <_svfiprintf_r+0x1d8>
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <_svfiprintf_r+0x1f4>)
 8003520:	bb1b      	cbnz	r3, 800356a <_svfiprintf_r+0x1b2>
 8003522:	9b03      	ldr	r3, [sp, #12]
 8003524:	3307      	adds	r3, #7
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	3308      	adds	r3, #8
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003530:	4433      	add	r3, r6
 8003532:	9309      	str	r3, [sp, #36]	; 0x24
 8003534:	e767      	b.n	8003406 <_svfiprintf_r+0x4e>
 8003536:	460c      	mov	r4, r1
 8003538:	2001      	movs	r0, #1
 800353a:	fb0c 3202 	mla	r2, ip, r2, r3
 800353e:	e7a5      	b.n	800348c <_svfiprintf_r+0xd4>
 8003540:	2300      	movs	r3, #0
 8003542:	f04f 0c0a 	mov.w	ip, #10
 8003546:	4619      	mov	r1, r3
 8003548:	3401      	adds	r4, #1
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	4620      	mov	r0, r4
 800354e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003552:	3a30      	subs	r2, #48	; 0x30
 8003554:	2a09      	cmp	r2, #9
 8003556:	d903      	bls.n	8003560 <_svfiprintf_r+0x1a8>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0c5      	beq.n	80034e8 <_svfiprintf_r+0x130>
 800355c:	9105      	str	r1, [sp, #20]
 800355e:	e7c3      	b.n	80034e8 <_svfiprintf_r+0x130>
 8003560:	4604      	mov	r4, r0
 8003562:	2301      	movs	r3, #1
 8003564:	fb0c 2101 	mla	r1, ip, r1, r2
 8003568:	e7f0      	b.n	800354c <_svfiprintf_r+0x194>
 800356a:	ab03      	add	r3, sp, #12
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	462a      	mov	r2, r5
 8003570:	4638      	mov	r0, r7
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <_svfiprintf_r+0x1f8>)
 8003574:	a904      	add	r1, sp, #16
 8003576:	f3af 8000 	nop.w
 800357a:	1c42      	adds	r2, r0, #1
 800357c:	4606      	mov	r6, r0
 800357e:	d1d6      	bne.n	800352e <_svfiprintf_r+0x176>
 8003580:	89ab      	ldrh	r3, [r5, #12]
 8003582:	065b      	lsls	r3, r3, #25
 8003584:	f53f af2c 	bmi.w	80033e0 <_svfiprintf_r+0x28>
 8003588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800358a:	b01d      	add	sp, #116	; 0x74
 800358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003590:	ab03      	add	r3, sp, #12
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	462a      	mov	r2, r5
 8003596:	4638      	mov	r0, r7
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <_svfiprintf_r+0x1f8>)
 800359a:	a904      	add	r1, sp, #16
 800359c:	f000 f87c 	bl	8003698 <_printf_i>
 80035a0:	e7eb      	b.n	800357a <_svfiprintf_r+0x1c2>
 80035a2:	bf00      	nop
 80035a4:	08003b80 	.word	0x08003b80
 80035a8:	08003b8a 	.word	0x08003b8a
 80035ac:	00000000 	.word	0x00000000
 80035b0:	08003301 	.word	0x08003301
 80035b4:	08003b86 	.word	0x08003b86

080035b8 <_printf_common>:
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035bc:	4616      	mov	r6, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	4607      	mov	r7, r0
 80035c6:	4293      	cmp	r3, r2
 80035c8:	bfb8      	it	lt
 80035ca:	4613      	movlt	r3, r2
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035d2:	460c      	mov	r4, r1
 80035d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d8:	b10a      	cbz	r2, 80035de <_printf_common+0x26>
 80035da:	3301      	adds	r3, #1
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0699      	lsls	r1, r3, #26
 80035e2:	bf42      	ittt	mi
 80035e4:	6833      	ldrmi	r3, [r6, #0]
 80035e6:	3302      	addmi	r3, #2
 80035e8:	6033      	strmi	r3, [r6, #0]
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	f015 0506 	ands.w	r5, r5, #6
 80035f0:	d106      	bne.n	8003600 <_printf_common+0x48>
 80035f2:	f104 0a19 	add.w	sl, r4, #25
 80035f6:	68e3      	ldr	r3, [r4, #12]
 80035f8:	6832      	ldr	r2, [r6, #0]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	42ab      	cmp	r3, r5
 80035fe:	dc28      	bgt.n	8003652 <_printf_common+0x9a>
 8003600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003604:	1e13      	subs	r3, r2, #0
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	bf18      	it	ne
 800360a:	2301      	movne	r3, #1
 800360c:	0692      	lsls	r2, r2, #26
 800360e:	d42d      	bmi.n	800366c <_printf_common+0xb4>
 8003610:	4649      	mov	r1, r9
 8003612:	4638      	mov	r0, r7
 8003614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d020      	beq.n	8003660 <_printf_common+0xa8>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	68e5      	ldr	r5, [r4, #12]
 8003622:	f003 0306 	and.w	r3, r3, #6
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf18      	it	ne
 800362a:	2500      	movne	r5, #0
 800362c:	6832      	ldr	r2, [r6, #0]
 800362e:	f04f 0600 	mov.w	r6, #0
 8003632:	68a3      	ldr	r3, [r4, #8]
 8003634:	bf08      	it	eq
 8003636:	1aad      	subeq	r5, r5, r2
 8003638:	6922      	ldr	r2, [r4, #16]
 800363a:	bf08      	it	eq
 800363c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003640:	4293      	cmp	r3, r2
 8003642:	bfc4      	itt	gt
 8003644:	1a9b      	subgt	r3, r3, r2
 8003646:	18ed      	addgt	r5, r5, r3
 8003648:	341a      	adds	r4, #26
 800364a:	42b5      	cmp	r5, r6
 800364c:	d11a      	bne.n	8003684 <_printf_common+0xcc>
 800364e:	2000      	movs	r0, #0
 8003650:	e008      	b.n	8003664 <_printf_common+0xac>
 8003652:	2301      	movs	r3, #1
 8003654:	4652      	mov	r2, sl
 8003656:	4649      	mov	r1, r9
 8003658:	4638      	mov	r0, r7
 800365a:	47c0      	blx	r8
 800365c:	3001      	adds	r0, #1
 800365e:	d103      	bne.n	8003668 <_printf_common+0xb0>
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003668:	3501      	adds	r5, #1
 800366a:	e7c4      	b.n	80035f6 <_printf_common+0x3e>
 800366c:	2030      	movs	r0, #48	; 0x30
 800366e:	18e1      	adds	r1, r4, r3
 8003670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800367a:	4422      	add	r2, r4
 800367c:	3302      	adds	r3, #2
 800367e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003682:	e7c5      	b.n	8003610 <_printf_common+0x58>
 8003684:	2301      	movs	r3, #1
 8003686:	4622      	mov	r2, r4
 8003688:	4649      	mov	r1, r9
 800368a:	4638      	mov	r0, r7
 800368c:	47c0      	blx	r8
 800368e:	3001      	adds	r0, #1
 8003690:	d0e6      	beq.n	8003660 <_printf_common+0xa8>
 8003692:	3601      	adds	r6, #1
 8003694:	e7d9      	b.n	800364a <_printf_common+0x92>
	...

08003698 <_printf_i>:
 8003698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	460c      	mov	r4, r1
 800369e:	7e27      	ldrb	r7, [r4, #24]
 80036a0:	4691      	mov	r9, r2
 80036a2:	2f78      	cmp	r7, #120	; 0x78
 80036a4:	4680      	mov	r8, r0
 80036a6:	469a      	mov	sl, r3
 80036a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ae:	d807      	bhi.n	80036c0 <_printf_i+0x28>
 80036b0:	2f62      	cmp	r7, #98	; 0x62
 80036b2:	d80a      	bhi.n	80036ca <_printf_i+0x32>
 80036b4:	2f00      	cmp	r7, #0
 80036b6:	f000 80d9 	beq.w	800386c <_printf_i+0x1d4>
 80036ba:	2f58      	cmp	r7, #88	; 0x58
 80036bc:	f000 80a4 	beq.w	8003808 <_printf_i+0x170>
 80036c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036c8:	e03a      	b.n	8003740 <_printf_i+0xa8>
 80036ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ce:	2b15      	cmp	r3, #21
 80036d0:	d8f6      	bhi.n	80036c0 <_printf_i+0x28>
 80036d2:	a001      	add	r0, pc, #4	; (adr r0, 80036d8 <_printf_i+0x40>)
 80036d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036d8:	08003731 	.word	0x08003731
 80036dc:	08003745 	.word	0x08003745
 80036e0:	080036c1 	.word	0x080036c1
 80036e4:	080036c1 	.word	0x080036c1
 80036e8:	080036c1 	.word	0x080036c1
 80036ec:	080036c1 	.word	0x080036c1
 80036f0:	08003745 	.word	0x08003745
 80036f4:	080036c1 	.word	0x080036c1
 80036f8:	080036c1 	.word	0x080036c1
 80036fc:	080036c1 	.word	0x080036c1
 8003700:	080036c1 	.word	0x080036c1
 8003704:	08003853 	.word	0x08003853
 8003708:	08003775 	.word	0x08003775
 800370c:	08003835 	.word	0x08003835
 8003710:	080036c1 	.word	0x080036c1
 8003714:	080036c1 	.word	0x080036c1
 8003718:	08003875 	.word	0x08003875
 800371c:	080036c1 	.word	0x080036c1
 8003720:	08003775 	.word	0x08003775
 8003724:	080036c1 	.word	0x080036c1
 8003728:	080036c1 	.word	0x080036c1
 800372c:	0800383d 	.word	0x0800383d
 8003730:	680b      	ldr	r3, [r1, #0]
 8003732:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	600a      	str	r2, [r1, #0]
 800373c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003740:	2301      	movs	r3, #1
 8003742:	e0a4      	b.n	800388e <_printf_i+0x1f6>
 8003744:	6825      	ldr	r5, [r4, #0]
 8003746:	6808      	ldr	r0, [r1, #0]
 8003748:	062e      	lsls	r6, r5, #24
 800374a:	f100 0304 	add.w	r3, r0, #4
 800374e:	d50a      	bpl.n	8003766 <_printf_i+0xce>
 8003750:	6805      	ldr	r5, [r0, #0]
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	2d00      	cmp	r5, #0
 8003756:	da03      	bge.n	8003760 <_printf_i+0xc8>
 8003758:	232d      	movs	r3, #45	; 0x2d
 800375a:	426d      	negs	r5, r5
 800375c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003760:	230a      	movs	r3, #10
 8003762:	485e      	ldr	r0, [pc, #376]	; (80038dc <_printf_i+0x244>)
 8003764:	e019      	b.n	800379a <_printf_i+0x102>
 8003766:	f015 0f40 	tst.w	r5, #64	; 0x40
 800376a:	6805      	ldr	r5, [r0, #0]
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	bf18      	it	ne
 8003770:	b22d      	sxthne	r5, r5
 8003772:	e7ef      	b.n	8003754 <_printf_i+0xbc>
 8003774:	680b      	ldr	r3, [r1, #0]
 8003776:	6825      	ldr	r5, [r4, #0]
 8003778:	1d18      	adds	r0, r3, #4
 800377a:	6008      	str	r0, [r1, #0]
 800377c:	0628      	lsls	r0, r5, #24
 800377e:	d501      	bpl.n	8003784 <_printf_i+0xec>
 8003780:	681d      	ldr	r5, [r3, #0]
 8003782:	e002      	b.n	800378a <_printf_i+0xf2>
 8003784:	0669      	lsls	r1, r5, #25
 8003786:	d5fb      	bpl.n	8003780 <_printf_i+0xe8>
 8003788:	881d      	ldrh	r5, [r3, #0]
 800378a:	2f6f      	cmp	r7, #111	; 0x6f
 800378c:	bf0c      	ite	eq
 800378e:	2308      	moveq	r3, #8
 8003790:	230a      	movne	r3, #10
 8003792:	4852      	ldr	r0, [pc, #328]	; (80038dc <_printf_i+0x244>)
 8003794:	2100      	movs	r1, #0
 8003796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800379a:	6866      	ldr	r6, [r4, #4]
 800379c:	2e00      	cmp	r6, #0
 800379e:	bfa8      	it	ge
 80037a0:	6821      	ldrge	r1, [r4, #0]
 80037a2:	60a6      	str	r6, [r4, #8]
 80037a4:	bfa4      	itt	ge
 80037a6:	f021 0104 	bicge.w	r1, r1, #4
 80037aa:	6021      	strge	r1, [r4, #0]
 80037ac:	b90d      	cbnz	r5, 80037b2 <_printf_i+0x11a>
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	d04d      	beq.n	800384e <_printf_i+0x1b6>
 80037b2:	4616      	mov	r6, r2
 80037b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80037b8:	fb03 5711 	mls	r7, r3, r1, r5
 80037bc:	5dc7      	ldrb	r7, [r0, r7]
 80037be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037c2:	462f      	mov	r7, r5
 80037c4:	42bb      	cmp	r3, r7
 80037c6:	460d      	mov	r5, r1
 80037c8:	d9f4      	bls.n	80037b4 <_printf_i+0x11c>
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d10b      	bne.n	80037e6 <_printf_i+0x14e>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	07df      	lsls	r7, r3, #31
 80037d2:	d508      	bpl.n	80037e6 <_printf_i+0x14e>
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	6861      	ldr	r1, [r4, #4]
 80037d8:	4299      	cmp	r1, r3
 80037da:	bfde      	ittt	le
 80037dc:	2330      	movle	r3, #48	; 0x30
 80037de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037e6:	1b92      	subs	r2, r2, r6
 80037e8:	6122      	str	r2, [r4, #16]
 80037ea:	464b      	mov	r3, r9
 80037ec:	4621      	mov	r1, r4
 80037ee:	4640      	mov	r0, r8
 80037f0:	f8cd a000 	str.w	sl, [sp]
 80037f4:	aa03      	add	r2, sp, #12
 80037f6:	f7ff fedf 	bl	80035b8 <_printf_common>
 80037fa:	3001      	adds	r0, #1
 80037fc:	d14c      	bne.n	8003898 <_printf_i+0x200>
 80037fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003802:	b004      	add	sp, #16
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	4834      	ldr	r0, [pc, #208]	; (80038dc <_printf_i+0x244>)
 800380a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800380e:	680e      	ldr	r6, [r1, #0]
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	f856 5b04 	ldr.w	r5, [r6], #4
 8003816:	061f      	lsls	r7, r3, #24
 8003818:	600e      	str	r6, [r1, #0]
 800381a:	d514      	bpl.n	8003846 <_printf_i+0x1ae>
 800381c:	07d9      	lsls	r1, r3, #31
 800381e:	bf44      	itt	mi
 8003820:	f043 0320 	orrmi.w	r3, r3, #32
 8003824:	6023      	strmi	r3, [r4, #0]
 8003826:	b91d      	cbnz	r5, 8003830 <_printf_i+0x198>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	2310      	movs	r3, #16
 8003832:	e7af      	b.n	8003794 <_printf_i+0xfc>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f043 0320 	orr.w	r3, r3, #32
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	2378      	movs	r3, #120	; 0x78
 800383e:	4828      	ldr	r0, [pc, #160]	; (80038e0 <_printf_i+0x248>)
 8003840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003844:	e7e3      	b.n	800380e <_printf_i+0x176>
 8003846:	065e      	lsls	r6, r3, #25
 8003848:	bf48      	it	mi
 800384a:	b2ad      	uxthmi	r5, r5
 800384c:	e7e6      	b.n	800381c <_printf_i+0x184>
 800384e:	4616      	mov	r6, r2
 8003850:	e7bb      	b.n	80037ca <_printf_i+0x132>
 8003852:	680b      	ldr	r3, [r1, #0]
 8003854:	6826      	ldr	r6, [r4, #0]
 8003856:	1d1d      	adds	r5, r3, #4
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	600d      	str	r5, [r1, #0]
 800385c:	0635      	lsls	r5, r6, #24
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	d501      	bpl.n	8003866 <_printf_i+0x1ce>
 8003862:	6018      	str	r0, [r3, #0]
 8003864:	e002      	b.n	800386c <_printf_i+0x1d4>
 8003866:	0671      	lsls	r1, r6, #25
 8003868:	d5fb      	bpl.n	8003862 <_printf_i+0x1ca>
 800386a:	8018      	strh	r0, [r3, #0]
 800386c:	2300      	movs	r3, #0
 800386e:	4616      	mov	r6, r2
 8003870:	6123      	str	r3, [r4, #16]
 8003872:	e7ba      	b.n	80037ea <_printf_i+0x152>
 8003874:	680b      	ldr	r3, [r1, #0]
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	600a      	str	r2, [r1, #0]
 800387a:	681e      	ldr	r6, [r3, #0]
 800387c:	2100      	movs	r1, #0
 800387e:	4630      	mov	r0, r6
 8003880:	6862      	ldr	r2, [r4, #4]
 8003882:	f000 f82f 	bl	80038e4 <memchr>
 8003886:	b108      	cbz	r0, 800388c <_printf_i+0x1f4>
 8003888:	1b80      	subs	r0, r0, r6
 800388a:	6060      	str	r0, [r4, #4]
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	6123      	str	r3, [r4, #16]
 8003890:	2300      	movs	r3, #0
 8003892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003896:	e7a8      	b.n	80037ea <_printf_i+0x152>
 8003898:	4632      	mov	r2, r6
 800389a:	4649      	mov	r1, r9
 800389c:	4640      	mov	r0, r8
 800389e:	6923      	ldr	r3, [r4, #16]
 80038a0:	47d0      	blx	sl
 80038a2:	3001      	adds	r0, #1
 80038a4:	d0ab      	beq.n	80037fe <_printf_i+0x166>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	079b      	lsls	r3, r3, #30
 80038aa:	d413      	bmi.n	80038d4 <_printf_i+0x23c>
 80038ac:	68e0      	ldr	r0, [r4, #12]
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	4298      	cmp	r0, r3
 80038b2:	bfb8      	it	lt
 80038b4:	4618      	movlt	r0, r3
 80038b6:	e7a4      	b.n	8003802 <_printf_i+0x16a>
 80038b8:	2301      	movs	r3, #1
 80038ba:	4632      	mov	r2, r6
 80038bc:	4649      	mov	r1, r9
 80038be:	4640      	mov	r0, r8
 80038c0:	47d0      	blx	sl
 80038c2:	3001      	adds	r0, #1
 80038c4:	d09b      	beq.n	80037fe <_printf_i+0x166>
 80038c6:	3501      	adds	r5, #1
 80038c8:	68e3      	ldr	r3, [r4, #12]
 80038ca:	9903      	ldr	r1, [sp, #12]
 80038cc:	1a5b      	subs	r3, r3, r1
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	dcf2      	bgt.n	80038b8 <_printf_i+0x220>
 80038d2:	e7eb      	b.n	80038ac <_printf_i+0x214>
 80038d4:	2500      	movs	r5, #0
 80038d6:	f104 0619 	add.w	r6, r4, #25
 80038da:	e7f5      	b.n	80038c8 <_printf_i+0x230>
 80038dc:	08003b91 	.word	0x08003b91
 80038e0:	08003ba2 	.word	0x08003ba2

080038e4 <memchr>:
 80038e4:	4603      	mov	r3, r0
 80038e6:	b510      	push	{r4, lr}
 80038e8:	b2c9      	uxtb	r1, r1
 80038ea:	4402      	add	r2, r0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	d101      	bne.n	80038f6 <memchr+0x12>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e003      	b.n	80038fe <memchr+0x1a>
 80038f6:	7804      	ldrb	r4, [r0, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	428c      	cmp	r4, r1
 80038fc:	d1f6      	bne.n	80038ec <memchr+0x8>
 80038fe:	bd10      	pop	{r4, pc}

08003900 <memcpy>:
 8003900:	440a      	add	r2, r1
 8003902:	4291      	cmp	r1, r2
 8003904:	f100 33ff 	add.w	r3, r0, #4294967295
 8003908:	d100      	bne.n	800390c <memcpy+0xc>
 800390a:	4770      	bx	lr
 800390c:	b510      	push	{r4, lr}
 800390e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003912:	4291      	cmp	r1, r2
 8003914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003918:	d1f9      	bne.n	800390e <memcpy+0xe>
 800391a:	bd10      	pop	{r4, pc}

0800391c <memmove>:
 800391c:	4288      	cmp	r0, r1
 800391e:	b510      	push	{r4, lr}
 8003920:	eb01 0402 	add.w	r4, r1, r2
 8003924:	d902      	bls.n	800392c <memmove+0x10>
 8003926:	4284      	cmp	r4, r0
 8003928:	4623      	mov	r3, r4
 800392a:	d807      	bhi.n	800393c <memmove+0x20>
 800392c:	1e43      	subs	r3, r0, #1
 800392e:	42a1      	cmp	r1, r4
 8003930:	d008      	beq.n	8003944 <memmove+0x28>
 8003932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800393a:	e7f8      	b.n	800392e <memmove+0x12>
 800393c:	4601      	mov	r1, r0
 800393e:	4402      	add	r2, r0
 8003940:	428a      	cmp	r2, r1
 8003942:	d100      	bne.n	8003946 <memmove+0x2a>
 8003944:	bd10      	pop	{r4, pc}
 8003946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800394a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800394e:	e7f7      	b.n	8003940 <memmove+0x24>

08003950 <_free_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4605      	mov	r5, r0
 8003954:	2900      	cmp	r1, #0
 8003956:	d043      	beq.n	80039e0 <_free_r+0x90>
 8003958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395c:	1f0c      	subs	r4, r1, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	18e4      	addlt	r4, r4, r3
 8003964:	f000 f8d0 	bl	8003b08 <__malloc_lock>
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <_free_r+0x94>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	4610      	mov	r0, r2
 800396e:	b933      	cbnz	r3, 800397e <_free_r+0x2e>
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	6014      	str	r4, [r2, #0]
 8003974:	4628      	mov	r0, r5
 8003976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800397a:	f000 b8cb 	b.w	8003b14 <__malloc_unlock>
 800397e:	42a3      	cmp	r3, r4
 8003980:	d90a      	bls.n	8003998 <_free_r+0x48>
 8003982:	6821      	ldr	r1, [r4, #0]
 8003984:	1862      	adds	r2, r4, r1
 8003986:	4293      	cmp	r3, r2
 8003988:	bf01      	itttt	eq
 800398a:	681a      	ldreq	r2, [r3, #0]
 800398c:	685b      	ldreq	r3, [r3, #4]
 800398e:	1852      	addeq	r2, r2, r1
 8003990:	6022      	streq	r2, [r4, #0]
 8003992:	6063      	str	r3, [r4, #4]
 8003994:	6004      	str	r4, [r0, #0]
 8003996:	e7ed      	b.n	8003974 <_free_r+0x24>
 8003998:	461a      	mov	r2, r3
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b10b      	cbz	r3, 80039a2 <_free_r+0x52>
 800399e:	42a3      	cmp	r3, r4
 80039a0:	d9fa      	bls.n	8003998 <_free_r+0x48>
 80039a2:	6811      	ldr	r1, [r2, #0]
 80039a4:	1850      	adds	r0, r2, r1
 80039a6:	42a0      	cmp	r0, r4
 80039a8:	d10b      	bne.n	80039c2 <_free_r+0x72>
 80039aa:	6820      	ldr	r0, [r4, #0]
 80039ac:	4401      	add	r1, r0
 80039ae:	1850      	adds	r0, r2, r1
 80039b0:	4283      	cmp	r3, r0
 80039b2:	6011      	str	r1, [r2, #0]
 80039b4:	d1de      	bne.n	8003974 <_free_r+0x24>
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4401      	add	r1, r0
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	6053      	str	r3, [r2, #4]
 80039c0:	e7d8      	b.n	8003974 <_free_r+0x24>
 80039c2:	d902      	bls.n	80039ca <_free_r+0x7a>
 80039c4:	230c      	movs	r3, #12
 80039c6:	602b      	str	r3, [r5, #0]
 80039c8:	e7d4      	b.n	8003974 <_free_r+0x24>
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	1821      	adds	r1, r4, r0
 80039ce:	428b      	cmp	r3, r1
 80039d0:	bf01      	itttt	eq
 80039d2:	6819      	ldreq	r1, [r3, #0]
 80039d4:	685b      	ldreq	r3, [r3, #4]
 80039d6:	1809      	addeq	r1, r1, r0
 80039d8:	6021      	streq	r1, [r4, #0]
 80039da:	6063      	str	r3, [r4, #4]
 80039dc:	6054      	str	r4, [r2, #4]
 80039de:	e7c9      	b.n	8003974 <_free_r+0x24>
 80039e0:	bd38      	pop	{r3, r4, r5, pc}
 80039e2:	bf00      	nop
 80039e4:	200000e0 	.word	0x200000e0

080039e8 <_malloc_r>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	1ccd      	adds	r5, r1, #3
 80039ec:	f025 0503 	bic.w	r5, r5, #3
 80039f0:	3508      	adds	r5, #8
 80039f2:	2d0c      	cmp	r5, #12
 80039f4:	bf38      	it	cc
 80039f6:	250c      	movcc	r5, #12
 80039f8:	2d00      	cmp	r5, #0
 80039fa:	4606      	mov	r6, r0
 80039fc:	db01      	blt.n	8003a02 <_malloc_r+0x1a>
 80039fe:	42a9      	cmp	r1, r5
 8003a00:	d903      	bls.n	8003a0a <_malloc_r+0x22>
 8003a02:	230c      	movs	r3, #12
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	2000      	movs	r0, #0
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a0a:	f000 f87d 	bl	8003b08 <__malloc_lock>
 8003a0e:	4921      	ldr	r1, [pc, #132]	; (8003a94 <_malloc_r+0xac>)
 8003a10:	680a      	ldr	r2, [r1, #0]
 8003a12:	4614      	mov	r4, r2
 8003a14:	b99c      	cbnz	r4, 8003a3e <_malloc_r+0x56>
 8003a16:	4f20      	ldr	r7, [pc, #128]	; (8003a98 <_malloc_r+0xb0>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b923      	cbnz	r3, 8003a26 <_malloc_r+0x3e>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f000 f862 	bl	8003ae8 <_sbrk_r>
 8003a24:	6038      	str	r0, [r7, #0]
 8003a26:	4629      	mov	r1, r5
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 f85d 	bl	8003ae8 <_sbrk_r>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	d123      	bne.n	8003a7a <_malloc_r+0x92>
 8003a32:	230c      	movs	r3, #12
 8003a34:	4630      	mov	r0, r6
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	f000 f86c 	bl	8003b14 <__malloc_unlock>
 8003a3c:	e7e3      	b.n	8003a06 <_malloc_r+0x1e>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	1b5b      	subs	r3, r3, r5
 8003a42:	d417      	bmi.n	8003a74 <_malloc_r+0x8c>
 8003a44:	2b0b      	cmp	r3, #11
 8003a46:	d903      	bls.n	8003a50 <_malloc_r+0x68>
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	441c      	add	r4, r3
 8003a4c:	6025      	str	r5, [r4, #0]
 8003a4e:	e004      	b.n	8003a5a <_malloc_r+0x72>
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	42a2      	cmp	r2, r4
 8003a54:	bf0c      	ite	eq
 8003a56:	600b      	streq	r3, [r1, #0]
 8003a58:	6053      	strne	r3, [r2, #4]
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f000 f85a 	bl	8003b14 <__malloc_unlock>
 8003a60:	f104 000b 	add.w	r0, r4, #11
 8003a64:	1d23      	adds	r3, r4, #4
 8003a66:	f020 0007 	bic.w	r0, r0, #7
 8003a6a:	1ac2      	subs	r2, r0, r3
 8003a6c:	d0cc      	beq.n	8003a08 <_malloc_r+0x20>
 8003a6e:	1a1b      	subs	r3, r3, r0
 8003a70:	50a3      	str	r3, [r4, r2]
 8003a72:	e7c9      	b.n	8003a08 <_malloc_r+0x20>
 8003a74:	4622      	mov	r2, r4
 8003a76:	6864      	ldr	r4, [r4, #4]
 8003a78:	e7cc      	b.n	8003a14 <_malloc_r+0x2c>
 8003a7a:	1cc4      	adds	r4, r0, #3
 8003a7c:	f024 0403 	bic.w	r4, r4, #3
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d0e3      	beq.n	8003a4c <_malloc_r+0x64>
 8003a84:	1a21      	subs	r1, r4, r0
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f82e 	bl	8003ae8 <_sbrk_r>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d1dd      	bne.n	8003a4c <_malloc_r+0x64>
 8003a90:	e7cf      	b.n	8003a32 <_malloc_r+0x4a>
 8003a92:	bf00      	nop
 8003a94:	200000e0 	.word	0x200000e0
 8003a98:	200000e4 	.word	0x200000e4

08003a9c <_realloc_r>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	4607      	mov	r7, r0
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	460e      	mov	r6, r1
 8003aa4:	b921      	cbnz	r1, 8003ab0 <_realloc_r+0x14>
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aac:	f7ff bf9c 	b.w	80039e8 <_malloc_r>
 8003ab0:	b922      	cbnz	r2, 8003abc <_realloc_r+0x20>
 8003ab2:	f7ff ff4d 	bl	8003950 <_free_r>
 8003ab6:	4625      	mov	r5, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003abc:	f000 f830 	bl	8003b20 <_malloc_usable_size_r>
 8003ac0:	42a0      	cmp	r0, r4
 8003ac2:	d20f      	bcs.n	8003ae4 <_realloc_r+0x48>
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7ff ff8e 	bl	80039e8 <_malloc_r>
 8003acc:	4605      	mov	r5, r0
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d0f2      	beq.n	8003ab8 <_realloc_r+0x1c>
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	f7ff ff13 	bl	8003900 <memcpy>
 8003ada:	4631      	mov	r1, r6
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7ff ff37 	bl	8003950 <_free_r>
 8003ae2:	e7e9      	b.n	8003ab8 <_realloc_r+0x1c>
 8003ae4:	4635      	mov	r5, r6
 8003ae6:	e7e7      	b.n	8003ab8 <_realloc_r+0x1c>

08003ae8 <_sbrk_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	2300      	movs	r3, #0
 8003aec:	4d05      	ldr	r5, [pc, #20]	; (8003b04 <_sbrk_r+0x1c>)
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fd fb8a 	bl	800120c <_sbrk>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_sbrk_r+0x1a>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_sbrk_r+0x1a>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	20000514 	.word	0x20000514

08003b08 <__malloc_lock>:
 8003b08:	4801      	ldr	r0, [pc, #4]	; (8003b10 <__malloc_lock+0x8>)
 8003b0a:	f000 b811 	b.w	8003b30 <__retarget_lock_acquire_recursive>
 8003b0e:	bf00      	nop
 8003b10:	2000051c 	.word	0x2000051c

08003b14 <__malloc_unlock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_unlock+0x8>)
 8003b16:	f000 b80c 	b.w	8003b32 <__retarget_lock_release_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	2000051c 	.word	0x2000051c

08003b20 <_malloc_usable_size_r>:
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbc      	itt	lt
 8003b2a:	580b      	ldrlt	r3, [r1, r0]
 8003b2c:	18c0      	addlt	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <__retarget_lock_acquire_recursive>:
 8003b30:	4770      	bx	lr

08003b32 <__retarget_lock_release_recursive>:
 8003b32:	4770      	bx	lr

08003b34 <_init>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr

08003b40 <_fini>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr
