
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004a28  08004a28  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a28  08004a28  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200000b8  08004ae8  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08004ae8  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8f3  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002622  00000000  00000000  0002f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019313  00000000  00000000  00033a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1dd  00000000  00000000  0004cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b784  00000000  00000000  0005bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e76ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000e7700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	080049a8 	.word	0x080049a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	080049a8 	.word	0x080049a8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <updateDisplay+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <updateDisplay+0x38>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	1192      	asrs	r2, r2, #6
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4909      	ldr	r1, [pc, #36]	; (8000a60 <updateDisplay+0x3c>)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <updateDisplay+0x40>)
 8000a3e:	f003 fb79 	bl	8004134 <siprintf>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4906      	ldr	r1, [pc, #24]	; (8000a64 <updateDisplay+0x40>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <updateDisplay+0x44>)
 8000a4e:	f003 f9d4 	bl	8003dfa <HAL_UART_Transmit>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	10624dd3 	.word	0x10624dd3
 8000a60:	080049c0 	.word	0x080049c0
 8000a64:	20000164 	.word	0x20000164
 8000a68:	20000228 	.word	0x20000228

08000a6c <WhichButtonIsPressed>:
#include "traffic_light.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb21 	bl	80010b8 <is_button_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <WhichButtonIsPressed+0x14>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e010      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fb19 	bl	80010b8 <is_button_pressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <WhichButtonIsPressed+0x24>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e008      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 8000a90:	2002      	movs	r0, #2
 8000a92:	f000 fb11 	bl	80010b8 <is_button_pressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <WhichButtonIsPressed+0x34>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <clear_vertical>:

void clear_vertical() {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_1_LED);
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f001 fa30 	bl	8001f10 <clear_led>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <clear_horizontal>:

void clear_horizontal() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_2_LED);
 8000ab8:	2029      	movs	r0, #41	; 0x29
 8000aba:	f001 fa29 	bl	8001f10 <clear_led>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <vertical_processing>:

void vertical_processing() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	clear_vertical();
 8000ac8:	f7ff ffed 	bl	8000aa6 <clear_vertical>
	switch (CURRENT_STATE[0]) {
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <vertical_processing+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d010      	beq.n	8000af6 <vertical_processing+0x32>
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	dc13      	bgt.n	8000b00 <vertical_processing+0x3c>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <vertical_processing+0x1e>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <vertical_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000ae0:	e00e      	b.n	8000b00 <vertical_processing+0x3c>
		set_led_color(TRAFFIC_1_LED, RED_COLOR);
 8000ae2:	211e      	movs	r1, #30
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f001 f951 	bl	8001d8c <set_led_color>
		break;
 8000aea:	e00a      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, AMBER_COLOR);
 8000aec:	211f      	movs	r1, #31
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f001 f94c 	bl	8001d8c <set_led_color>
		break;
 8000af4:	e005      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
 8000af6:	2120      	movs	r1, #32
 8000af8:	2028      	movs	r0, #40	; 0x28
 8000afa:	f001 f947 	bl	8001d8c <set_led_color>
		break;
 8000afe:	e000      	b.n	8000b02 <vertical_processing+0x3e>
		break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <horizontal_processing>:

void horizontal_processing() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	clear_horizontal();
 8000b10:	f7ff ffd0 	bl	8000ab4 <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <horizontal_processing+0x44>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d010      	beq.n	8000b3e <horizontal_processing+0x32>
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	dc13      	bgt.n	8000b48 <horizontal_processing+0x3c>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <horizontal_processing+0x1e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d005      	beq.n	8000b34 <horizontal_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000b28:	e00e      	b.n	8000b48 <horizontal_processing+0x3c>
		set_led_color(TRAFFIC_2_LED, RED_COLOR);
 8000b2a:	211e      	movs	r1, #30
 8000b2c:	2029      	movs	r0, #41	; 0x29
 8000b2e:	f001 f92d 	bl	8001d8c <set_led_color>
		break;
 8000b32:	e00a      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, AMBER_COLOR);
 8000b34:	211f      	movs	r1, #31
 8000b36:	2029      	movs	r0, #41	; 0x29
 8000b38:	f001 f928 	bl	8001d8c <set_led_color>
		break;
 8000b3c:	e005      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
 8000b3e:	2120      	movs	r1, #32
 8000b40:	2029      	movs	r0, #41	; 0x29
 8000b42:	f001 f923 	bl	8001d8c <set_led_color>
		break;
 8000b46:	e000      	b.n	8000b4a <horizontal_processing+0x3e>
		break;
 8000b48:	bf00      	nop
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000

08000b54 <state_update>:

void state_update(int idx) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d11e      	bne.n	8000ba0 <state_update+0x4c>
		switch (CURRENT_STATE[idx]) {
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <state_update+0x94>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d012      	beq.n	8000b94 <state_update+0x40>
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	dc29      	bgt.n	8000bc6 <state_update+0x72>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <state_update+0x28>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d006      	beq.n	8000b88 <state_update+0x34>
			break;
		case 2:
			CURRENT_STATE[idx] = 1;
			break;
		default:
			break;
 8000b7a:	e024      	b.n	8000bc6 <state_update+0x72>
			CURRENT_STATE[idx] = 2;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <state_update+0x94>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2102      	movs	r1, #2
 8000b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b86:	e01f      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 0;
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <state_update+0x94>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b92:	e019      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 1;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <state_update+0x94>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b9e:	e013      	b.n	8000bc8 <state_update+0x74>
		}
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <state_update+0x94>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	1c99      	adds	r1, r3, #2
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <state_update+0x98>)
 8000bac:	fb83 3201 	smull	r3, r2, r3, r1
 8000bb0:	17cb      	asrs	r3, r1, #31
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <state_update+0x94>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bc4:	e000      	b.n	8000bc8 <state_update+0x74>
			break;
 8000bc6:	bf00      	nop
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <state_update+0x94>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <state_update+0x9c>)
 8000bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd6:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <state_update+0xa0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000
 8000bec:	55555556 	.word	0x55555556
 8000bf0:	20000010 	.word	0x20000010
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <check_state>:

void check_state() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <check_state+0x2c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc04      	bgt.n	8000c0e <check_state+0x16>
		state_update(VER_LED);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ffa5 	bl	8000b54 <state_update>
		vertical_processing();
 8000c0a:	f7ff ff5b 	bl	8000ac4 <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <check_state+0x2c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dc04      	bgt.n	8000c20 <check_state+0x28>
		state_update(HOR_LED);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff9c 	bl	8000b54 <state_update>
		horizontal_processing();
 8000c1c:	f7ff ff76 	bl	8000b0c <horizontal_processing>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000008 	.word	0x20000008

08000c28 <update_clock>:

void update_clock() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <update_clock+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d113      	bne.n	8000c5c <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <update_clock+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <update_clock+0x3c>)
 8000c3e:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <update_clock+0x3c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <update_clock+0x3c>)
 8000c4a:	6053      	str	r3, [r2, #4]
		check_state();
 8000c4c:	f7ff ffd4 	bl	8000bf8 <check_state>
		updateDisplay();
 8000c50:	f7ff fee8 	bl	8000a24 <updateDisplay>
		setTimer2(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 fe7e 	bl	8001958 <setTimer2>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000134 	.word	0x20000134
 8000c64:	20000008 	.word	0x20000008

08000c68 <reset>:

void reset() {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED * TIME_UNIT;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <reset+0x4c>)
 8000c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c72:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW * TIME_UNIT;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <reset+0x4c>)
 8000c76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c7a:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN * TIME_UNIT;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <reset+0x4c>)
 8000c7e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000c82:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <reset+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <reset+0x50>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <reset+0x50>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <reset+0x4c>)
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <reset+0x54>)
 8000c9c:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <reset+0x50>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <reset+0x4c>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <reset+0x54>)
 8000caa:	6053      	str	r3, [r2, #4]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <restart>:

void restart(){
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	status = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <restart+0x14>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000d4 	.word	0x200000d4

08000cd8 <confirm_action>:

void confirm_action(int mode) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d82e      	bhi.n	8000d44 <confirm_action+0x6c>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <confirm_action+0x14>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d45 	.word	0x08000d45
 8000cf0:	08000cfd 	.word	0x08000cfd
 8000cf4:	08000d15 	.word	0x08000d15
 8000cf8:	08000d2d 	.word	0x08000d2d
	switch (mode) {
	case 0: //Normal mode -> do nothing
		return;
	case 1: // Inc red time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <confirm_action+0x78>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <confirm_action+0x7c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d08:	fb01 f303 	mul.w	r3, r1, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <confirm_action+0x78>)
 8000d10:	6013      	str	r3, [r2, #0]
		break;
 8000d12:	e018      	b.n	8000d46 <confirm_action+0x6e>
	case 2: // Inc yellow time mode
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (TIMES_INC * TIME_UNIT);
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <confirm_action+0x78>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <confirm_action+0x7c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <confirm_action+0x78>)
 8000d28:	6053      	str	r3, [r2, #4]
		break;
 8000d2a:	e00c      	b.n	8000d46 <confirm_action+0x6e>
	case 3: // Inc green time
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <confirm_action+0x78>)
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <confirm_action+0x7c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	fb01 f303 	mul.w	r3, r1, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <confirm_action+0x78>)
 8000d40:	6093      	str	r3, [r2, #8]
		break;
 8000d42:	e000      	b.n	8000d46 <confirm_action+0x6e>
	default:
		break;
 8000d44:	bf00      	nop
	}

}
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000010 	.word	0x20000010
 8000d54:	200000e0 	.word	0x200000e0

08000d58 <state_handle>:

void state_handle() {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <state_handle+0x9c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d841      	bhi.n	8000de8 <state_handle+0x90>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <state_handle+0x14>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d8b 	.word	0x08000d8b
 8000d74:	08000dab 	.word	0x08000dab
 8000d78:	08000dcb 	.word	0x08000dcb
	case 0:
		SEG7_CLOCK[VER_LED] = 0;
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <state_handle+0xa0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <state_handle+0xa0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
		break;
 8000d88:	e02f      	b.n	8000dea <state_handle+0x92>
	case 1:
		SEG7_CLOCK[VER_LED] = 1 * TIME_UNIT;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <state_handle+0xa0>)
 8000d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d90:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[0] + TIMES_INC * TIME_UNIT;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <state_handle+0xa4>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <state_handle+0xa8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <state_handle+0xa0>)
 8000da6:	6053      	str	r3, [r2, #4]
		break;
 8000da8:	e01f      	b.n	8000dea <state_handle+0x92>
	case 2:
		SEG7_CLOCK[VER_LED] = 2  * TIME_UNIT;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <state_handle+0xa0>)
 8000dac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000db0:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[1] + TIMES_INC * TIME_UNIT;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <state_handle+0xa4>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <state_handle+0xa8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <state_handle+0xa0>)
 8000dc6:	6053      	str	r3, [r2, #4]
		break;
 8000dc8:	e00f      	b.n	8000dea <state_handle+0x92>
	case 3:
		SEG7_CLOCK[VER_LED] = 3  * TIME_UNIT;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <state_handle+0xa0>)
 8000dcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dd0:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <state_handle+0xa4>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <state_handle+0xa8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dde:	fb01 f303 	mul.w	r3, r1, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <state_handle+0xa0>)
 8000de6:	6053      	str	r3, [r2, #4]
	default:
		break;
 8000de8:	bf00      	nop
	}
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200000dc 	.word	0x200000dc
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	200000e0 	.word	0x200000e0

08000e04 <traffic_processing>:

void traffic_processing() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	switch (status) {
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <traffic_processing+0x68>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d027      	beq.n	8000e60 <traffic_processing+0x5c>
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	dc28      	bgt.n	8000e66 <traffic_processing+0x62>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <traffic_processing+0x1a>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d01e      	beq.n	8000e5a <traffic_processing+0x56>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 8000e1c:	e023      	b.n	8000e66 <traffic_processing+0x62>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <traffic_processing+0x6c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <traffic_processing+0x6c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <traffic_processing+0x6c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <traffic_processing+0x70>)
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <traffic_processing+0x74>)
 8000e36:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <traffic_processing+0x6c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <traffic_processing+0x70>)
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <traffic_processing+0x74>)
 8000e44:	6053      	str	r3, [r2, #4]
		updateDisplay();
 8000e46:	f7ff fded 	bl	8000a24 <updateDisplay>
		vertical_processing();
 8000e4a:	f7ff fe3b 	bl	8000ac4 <vertical_processing>
		horizontal_processing();
 8000e4e:	f7ff fe5d 	bl	8000b0c <horizontal_processing>
		status = 1;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <traffic_processing+0x68>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		break;
 8000e58:	e006      	b.n	8000e68 <traffic_processing+0x64>
		update_clock();
 8000e5a:	f7ff fee5 	bl	8000c28 <update_clock>
		break;
 8000e5e:	e003      	b.n	8000e68 <traffic_processing+0x64>
		state_handle();
 8000e60:	f7ff ff7a 	bl	8000d58 <state_handle>
		break;
 8000e64:	e000      	b.n	8000e68 <traffic_processing+0x64>
		break;
 8000e66:	bf00      	nop
	}
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000d4 	.word	0x200000d4
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000008 	.word	0x20000008

08000e7c <input_processing>:

void input_processing() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 f919 	bl	80010b8 <is_button_pressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d011      	beq.n	8000eb0 <input_processing+0x34>
		status = 2;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <input_processing+0xa0>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1) % 4;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <input_processing+0xa4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	425a      	negs	r2, r3
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	bf58      	it	pl
 8000ea4:	4253      	negpl	r3, r2
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <input_processing+0xa4>)
 8000ea8:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <input_processing+0xa8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
	}

	// Add button
	if (is_button_pressed(1) && index_mode != 0) {
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 f901 	bl	80010b8 <is_button_pressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <input_processing+0x52>
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <input_processing+0xa4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <input_processing+0x52>
		TIMES_INC++;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <input_processing+0xa8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <input_processing+0xa8>)
 8000ecc:	6013      	str	r3, [r2, #0]
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != 0) {
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f8f2 	bl	80010b8 <is_button_pressed>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d014      	beq.n	8000f04 <input_processing+0x88>
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <input_processing+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <input_processing+0x88>
		if (TIMES_INC != 0) {
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <input_processing+0xa8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <input_processing+0x78>
			confirm_action(index_mode);
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <input_processing+0xa4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fef2 	bl	8000cd8 <confirm_action>
		}
		TIMES_INC = 0;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <input_processing+0xa8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
		index_mode = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <input_processing+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		restart();
 8000f00:	f7ff fede 	bl	8000cc0 <restart>
	}

	// RESET when start
	if (start == 0) {
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <input_processing+0xac>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <input_processing+0x9a>
		reset();
 8000f0c:	f7ff feac 	bl	8000c68 <reset>
		start = 1;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <input_processing+0xac>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
	}
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	200000dc 	.word	0x200000dc
 8000f24:	200000e0 	.word	0x200000e0
 8000f28:	200000d8 	.word	0x200000d8

08000f2c <fsm_simple_button_run>:

void fsm_simple_button_run() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	switch (buttonState) {
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <fsm_simple_button_run+0x3c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <fsm_simple_button_run+0x12>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00a      	beq.n	8000f52 <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 8000f3c:	e011      	b.n	8000f62 <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 8000f3e:	f7ff fd95 	bl	8000a6c <WhichButtonIsPressed>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <fsm_simple_button_run+0x3c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
			input_processing();
 8000f4e:	f7ff ff95 	bl	8000e7c <input_processing>
		if (!WhichButtonIsPressed()) {
 8000f52:	f7ff fd8b 	bl	8000a6c <WhichButtonIsPressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <fsm_simple_button_run+0x3c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
		break;
 8000f62:	bf00      	nop
	}
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000f8 	.word	0x200000f8

08000f6c <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e081      	b.n	800107c <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <button_reading+0x124>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	7819      	ldrb	r1, [r3, #0]
 8000f80:	4a44      	ldr	r2, [pc, #272]	; (8001094 <button_reading+0x128>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	460a      	mov	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <button_reading+0x12c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f92:	4942      	ldr	r1, [pc, #264]	; (800109c <button_reading+0x130>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f001 fb1f 	bl	80025e0 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <button_reading+0x124>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <button_reading+0x124>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4936      	ldr	r1, [pc, #216]	; (8001094 <button_reading+0x128>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d158      	bne.n	8001076 <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <button_reading+0x124>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	7819      	ldrb	r1, [r3, #0]
 8000fcc:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <button_reading+0x134>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <button_reading+0x134>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d135      	bne.n	800104e <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 8000fe2:	4a30      	ldr	r2, [pc, #192]	; (80010a4 <button_reading+0x138>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fea:	2b18      	cmp	r3, #24
 8000fec:	d80e      	bhi.n	800100c <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <button_reading+0x13c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <button_reading+0x138>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b299      	uxth	r1, r3
 8001002:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <button_reading+0x138>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800100a:	e009      	b.n	8001020 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 800100c:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <button_reading+0x138>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2100      	movs	r1, #0
 8001012:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <button_reading+0x140>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2101      	movs	r1, #1
 800101c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <button_reading+0x144>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001028:	2b63      	cmp	r3, #99	; 0x63
 800102a:	d80a      	bhi.n	8001042 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <button_reading+0x144>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001034:	3301      	adds	r3, #1
 8001036:	b299      	uxth	r1, r3
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <button_reading+0x144>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001040:	e019      	b.n	8001076 <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <button_reading+0x148>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e013      	b.n	8001076 <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <button_reading+0x144>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2100      	movs	r1, #0
 8001054:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <button_reading+0x138>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2100      	movs	r1, #0
 800105e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <button_reading+0x148>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <button_reading+0x140>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2100      	movs	r1, #0
 8001072:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b03      	cmp	r3, #3
 8001080:	f77f af7a 	ble.w	8000f78 <button_reading+0xc>
			}
		}
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000100 	.word	0x20000100
 8001094:	20000104 	.word	0x20000104
 8001098:	2000001c 	.word	0x2000001c
 800109c:	2000002c 	.word	0x2000002c
 80010a0:	200000fc 	.word	0x200000fc
 80010a4:	20000114 	.word	0x20000114
 80010a8:	200000e4 	.word	0x200000e4
 80010ac:	200000e8 	.word	0x200000e8
 80010b0:	2000010c 	.word	0x2000010c
 80010b4:	20000108 	.word	0x20000108

080010b8 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d901      	bls.n	80010cc <is_button_pressed+0x14>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e007      	b.n	80010dc <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <is_button_pressed+0x30>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200000fc 	.word	0x200000fc

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 ff5e 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f822 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 f94e 	bl	8001398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010fc:	f000 f922 	bl	8001344 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001100:	f000 f85e 	bl	80011c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001104:	f000 f8a8 	bl	8001258 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <main+0x48>)
 800110c:	f001 ffc4 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <main+0x4c>)
 8001112:	f001 ff17 	bl	8002f44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <main+0x48>)
 8001118:	f001 ff14 	bl	8002f44 <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(fsm_simple_button_run, 0, 10);
//  SCH_Add_Task(traffic_processing, 0, 1000);
//  SCH_Add_Task(button_reading, 40, 10);
//  SCH_Add_Task(pedestrian_scramble, 30, 10);
//  find_new_min_task();
  setTimer2(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f000 fc1a 	bl	8001958 <setTimer2>
//	  turn of LED for indicate while MCU is sleeping.
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //set_led_color(TRAFFIC_1_LED, RED_COLOR);
	  fsm_simple_button_run();
 8001124:	f7ff ff02 	bl	8000f2c <fsm_simple_button_run>
	  traffic_processing();
 8001128:	f7ff fe6c 	bl	8000e04 <traffic_processing>
	  pedestrian_scramble();
 800112c:	f000 fa08 	bl	8001540 <pedestrian_scramble>
	  fsm_simple_button_run();
 8001130:	e7f8      	b.n	8001124 <main+0x38>
 8001132:	bf00      	nop
 8001134:	20000198 	.word	0x20000198
 8001138:	200001e0 	.word	0x200001e0

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b090      	sub	sp, #64	; 0x40
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ffea 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2310      	movs	r3, #16
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001172:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fa77 	bl	8002670 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001188:	f000 f9d5 	bl	8001536 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fce2 	bl	8002b70 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011b2:	f000 f9c0 	bl	8001536 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3740      	adds	r7, #64	; 0x40
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM2_Init+0x94>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM2_Init+0x94>)
 80011e6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80011ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM2_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM2_Init+0x94>)
 80011f4:	2213      	movs	r2, #19
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_TIM2_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM2_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_TIM2_Init+0x94>)
 8001206:	f001 fe4d 	bl	8002ea4 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001210:	f000 f991 	bl	8001536 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM2_Init+0x94>)
 8001222:	f002 f9a1 	bl	8003568 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800122c:	f000 f983 	bl	8001536 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM2_Init+0x94>)
 800123e:	f002 fd1f 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 f975 	bl	8001536 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001e0 	.word	0x200001e0

08001258 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	; 0x38
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <MX_TIM3_Init+0xe4>)
 800128a:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <MX_TIM3_Init+0xe8>)
 800128c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <MX_TIM3_Init+0xe4>)
 8001290:	223f      	movs	r2, #63	; 0x3f
 8001292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <MX_TIM3_Init+0xe4>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_TIM3_Init+0xe4>)
 800129c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_TIM3_Init+0xe4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_TIM3_Init+0xe4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <MX_TIM3_Init+0xe4>)
 80012b0:	f001 fdf8 	bl	8002ea4 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012ba:	f000 f93c 	bl	8001536 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	; (800133c <MX_TIM3_Init+0xe4>)
 80012cc:	f002 f94c 	bl	8003568 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012d6:	f000 f92e 	bl	8001536 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM3_Init+0xe4>)
 80012dc:	f001 fe84 	bl	8002fe8 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012e6:	f000 f926 	bl	8001536 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM3_Init+0xe4>)
 80012fa:	f002 fcc1 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001304:	f000 f917 	bl	8001536 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM3_Init+0xe4>)
 8001320:	f002 f864 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800132a:	f000 f904 	bl	8001536 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM3_Init+0xe4>)
 8001330:	f000 fc08 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000198 	.word	0x20000198
 8001340:	40000400 	.word	0x40000400

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f002 fcf0 	bl	8003d60 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f8d6 	bl	8001536 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000228 	.word	0x20000228
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a4d      	ldr	r2, [pc, #308]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <MX_GPIO_Init+0x150>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x150>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Traffic_1_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2130      	movs	r1, #48	; 0x30
 8001410:	4836      	ldr	r0, [pc, #216]	; (80014ec <MX_GPIO_Init+0x154>)
 8001412:	f001 f8fc 	bl	800260e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f240 3101 	movw	r1, #769	; 0x301
 800141c:	4834      	ldr	r0, [pc, #208]	; (80014f0 <MX_GPIO_Init+0x158>)
 800141e:	f001 f8f6 	bl	800260e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001428:	4832      	ldr	r0, [pc, #200]	; (80014f4 <MX_GPIO_Init+0x15c>)
 800142a:	f001 f8f0 	bl	800260e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_GPIO_Init+0x160>)
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	482c      	ldr	r0, [pc, #176]	; (80014f4 <MX_GPIO_Init+0x15c>)
 8001444:	f000 ff48 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin;
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <MX_GPIO_Init+0x154>)
 800145c:	f000 ff3c 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Traffic_1_2_Pin|LD2_Pin;
 8001460:	2330      	movs	r3, #48	; 0x30
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2302      	movs	r3, #2
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <MX_GPIO_Init+0x154>)
 8001478:	f000 ff2e 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_1_Pin Traffic_2_2_Pin Traffic_2_1_Pin */
  GPIO_InitStruct.Pin = Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin;
 800147c:	f240 3301 	movw	r3, #769	; 0x301
 8001480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2302      	movs	r3, #2
 800148c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4816      	ldr	r0, [pc, #88]	; (80014f0 <MX_GPIO_Init+0x158>)
 8001496:	f000 ff1f 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_Pedes_1_Pin Traffic_Pedes_2_Pin */
  GPIO_InitStruct.Pin = Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin;
 800149a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_GPIO_Init+0x15c>)
 80014b4:	f000 ff10 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_2_Pin B_3_Pin */
  GPIO_InitStruct.Pin = B_2_Pin|B_3_Pin;
 80014b8:	2318      	movs	r3, #24
 80014ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <MX_GPIO_Init+0x158>)
 80014cc:	f000 ff04 	bl	80022d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2028      	movs	r0, #40	; 0x28
 80014d6:	f000 fec8 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f000 fee1 	bl	80022a2 <HAL_NVIC_EnableIRQ>

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40011000 	.word	0x40011000
 80014f8:	10110000 	.word	0x10110000

080014fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d105      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x1e>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 800150e:	f000 fa3d 	bl	800198c <timerRun>
		SCH_Update();
 8001512:	f000 f9cb 	bl	80018ac <SCH_Update>
		button_reading();
 8001516:	f7ff fd29 	bl	8000f6c <button_reading>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	80fb      	strh	r3, [r7, #6]

}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153a:	b672      	cpsid	i
}
 800153c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153e:	e7fe      	b.n	800153e <Error_Handler+0x8>

08001540 <pedestrian_scramble>:
int flag_button = 0;
extern TIM_HandleTypeDef htim3;

float extra_step = 1;

void pedestrian_scramble() {
 8001540:	b598      	push	{r3, r4, r7, lr}
 8001542:	af00      	add	r7, sp, #0
		if (is_button_pressed(3)) {
 8001544:	2003      	movs	r0, #3
 8001546:	f7ff fdb7 	bl	80010b8 <is_button_pressed>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00b      	beq.n	8001568 <pedestrian_scramble+0x28>
			if (get_led_color(TRAFFIC_1_LED) == RED_COLOR) {
 8001550:	2028      	movs	r0, #40	; 0x28
 8001552:	f000 fc95 	bl	8001e80 <get_led_color>
 8001556:	4603      	mov	r3, r0
 8001558:	2b1e      	cmp	r3, #30
 800155a:	d105      	bne.n	8001568 <pedestrian_scramble+0x28>
				pedestrian_active = 1;
 800155c:	4b9c      	ldr	r3, [pc, #624]	; (80017d0 <pedestrian_scramble+0x290>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
				flag_button = 1;
 8001562:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <pedestrian_scramble+0x294>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
			}
		}

		if (get_led_color(TRAFFIC_1_LED) == RED_COLOR && flag_button) {
 8001568:	2028      	movs	r0, #40	; 0x28
 800156a:	f000 fc89 	bl	8001e80 <get_led_color>
 800156e:	4603      	mov	r3, r0
 8001570:	2b1e      	cmp	r3, #30
 8001572:	d126      	bne.n	80015c2 <pedestrian_scramble+0x82>
 8001574:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <pedestrian_scramble+0x294>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d022      	beq.n	80015c2 <pedestrian_scramble+0x82>
			pedestrian_active = 1;
 800157c:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <pedestrian_scramble+0x290>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
			/* Calculate number of step for increase frequency and decrease delay time */
			FREQ_STEP = 120 / (SEG7_CLOCK[0] / TIME_UNIT);
 8001582:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <pedestrian_scramble+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a95      	ldr	r2, [pc, #596]	; (80017dc <pedestrian_scramble+0x29c>)
 8001588:	fb82 1203 	smull	r1, r2, r2, r3
 800158c:	1192      	asrs	r2, r2, #6
 800158e:	17db      	asrs	r3, r3, #31
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2278      	movs	r2, #120	; 0x78
 8001594:	fb92 f3f3 	sdiv	r3, r2, r3
 8001598:	4a91      	ldr	r2, [pc, #580]	; (80017e0 <pedestrian_scramble+0x2a0>)
 800159a:	6013      	str	r3, [r2, #0]
			DELAY_STEP = 400 / (SEG7_CLOCK[0] / TIME_UNIT);
 800159c:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <pedestrian_scramble+0x298>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a8e      	ldr	r2, [pc, #568]	; (80017dc <pedestrian_scramble+0x29c>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1192      	asrs	r2, r2, #6
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b4:	4a8b      	ldr	r2, [pc, #556]	; (80017e4 <pedestrian_scramble+0x2a4>)
 80015b6:	6013      	str	r3, [r2, #0]
			time_allow_pedestrian = SEG7_CLOCK[0];
 80015b8:	4b87      	ldr	r3, [pc, #540]	; (80017d8 <pedestrian_scramble+0x298>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a8a      	ldr	r2, [pc, #552]	; (80017e8 <pedestrian_scramble+0x2a8>)
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e006      	b.n	80015d0 <pedestrian_scramble+0x90>
		}
		else {
			pedestrian_active = 0;
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <pedestrian_scramble+0x290>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 80015c8:	211e      	movs	r1, #30
 80015ca:	202a      	movs	r0, #42	; 0x2a
 80015cc:	f000 fbde 	bl	8001d8c <set_led_color>
		}
		if (pedestrian_active) {
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <pedestrian_scramble+0x290>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8142 	beq.w	800185e <pedestrian_scramble+0x31e>
			set_led_color(PEDESTRIAN_LED, GREEN_COLOR);
 80015da:	2120      	movs	r1, #32
 80015dc:	202a      	movs	r0, #42	; 0x2a
 80015de:	f000 fbd5 	bl	8001d8c <set_led_color>
			/* Buzzer frequency */
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <pedestrian_scramble+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(delay);
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fd40 	bl	8002074 <HAL_Delay>

			/* If 2/3 time has passed, need more extra step*/
			if (SEG7_CLOCK[0] >= 2 * time_allow_pedestrian / 3) {
 80015f4:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <pedestrian_scramble+0x298>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <pedestrian_scramble+0x2a8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	497d      	ldr	r1, [pc, #500]	; (80017f4 <pedestrian_scramble+0x2b4>)
 8001600:	fb81 0103 	smull	r0, r1, r1, r3
 8001604:	17db      	asrs	r3, r3, #31
 8001606:	1acb      	subs	r3, r1, r3
 8001608:	429a      	cmp	r2, r3
 800160a:	db62      	blt.n	80016d2 <pedestrian_scramble+0x192>
				extra_step += 0.09;
 800160c:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <pedestrian_scramble+0x2b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffb5 	bl	8000580 <__aeabi_f2d>
 8001616:	a36a      	add	r3, pc, #424	; (adr r3, 80017c0 <pedestrian_scramble+0x280>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fe52 	bl	80002c4 <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff f802 	bl	8000630 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a72      	ldr	r2, [pc, #456]	; (80017f8 <pedestrian_scramble+0x2b8>)
 8001630:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += FREQ_STEP);
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <pedestrian_scramble+0x2bc>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <pedestrian_scramble+0x2a0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a6f      	ldr	r2, [pc, #444]	; (80017fc <pedestrian_scramble+0x2bc>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <pedestrian_scramble+0x2bc>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <pedestrian_scramble+0x2ac>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 800164a:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <pedestrian_scramble+0x2b0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f8f8 	bl	8000844 <__aeabi_i2f>
 8001654:	4604      	mov	r4, r0
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <pedestrian_scramble+0x2a4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f8f2 	bl	8000844 <__aeabi_i2f>
 8001660:	4602      	mov	r2, r0
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <pedestrian_scramble+0x2b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7fe fd71 	bl	8000150 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff f9a6 	bl	80009c4 <__aeabi_fcmpgt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d023      	beq.n	80016c6 <pedestrian_scramble+0x186>
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <pedestrian_scramble+0x2b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f8de 	bl	8000844 <__aeabi_i2f>
 8001688:	4604      	mov	r4, r0
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <pedestrian_scramble+0x2a4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f8d8 	bl	8000844 <__aeabi_i2f>
 8001694:	4602      	mov	r2, r0
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <pedestrian_scramble+0x2b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7fe fd57 	bl	8000150 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff f816 	bl	80006d8 <__aeabi_fsub>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f992 	bl	80009d8 <__aeabi_f2iz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fcd8 	bl	8002074 <HAL_Delay>
			delay = TIME_UNIT;
			FREQ = 10;
			extra_step = 1;
			flag_button = 0;
		}
}
 80016c4:	e0e1      	b.n	800188a <pedestrian_scramble+0x34a>
				else HAL_Delay(delay);
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fcd2 	bl	8002074 <HAL_Delay>
}
 80016d0:	e0db      	b.n	800188a <pedestrian_scramble+0x34a>
				extra_step += 0.3;
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <pedestrian_scramble+0x2b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff52 	bl	8000580 <__aeabi_f2d>
 80016dc:	a33a      	add	r3, pc, #232	; (adr r3, 80017c8 <pedestrian_scramble+0x288>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe fdef 	bl	80002c4 <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7fe ff9f 	bl	8000630 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a40      	ldr	r2, [pc, #256]	; (80017f8 <pedestrian_scramble+0x2b8>)
 80016f6:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += extra_step * FREQ_STEP);
 80016f8:	4b40      	ldr	r3, [pc, #256]	; (80017fc <pedestrian_scramble+0x2bc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f8a1 	bl	8000844 <__aeabi_i2f>
 8001702:	4604      	mov	r4, r0
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <pedestrian_scramble+0x2a0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f89b 	bl	8000844 <__aeabi_i2f>
 800170e:	4602      	mov	r2, r0
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <pedestrian_scramble+0x2b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7fe fd1a 	bl	8000150 <__aeabi_fmul>
 800171c:	4603      	mov	r3, r0
 800171e:	4619      	mov	r1, r3
 8001720:	4620      	mov	r0, r4
 8001722:	f7fe ffdb 	bl	80006dc <__addsf3>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f955 	bl	80009d8 <__aeabi_f2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	4a32      	ldr	r2, [pc, #200]	; (80017fc <pedestrian_scramble+0x2bc>)
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <pedestrian_scramble+0x2bc>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <pedestrian_scramble+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <pedestrian_scramble+0x2b0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f87e 	bl	8000844 <__aeabi_i2f>
 8001748:	4604      	mov	r4, r0
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <pedestrian_scramble+0x2a4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f878 	bl	8000844 <__aeabi_i2f>
 8001754:	4602      	mov	r2, r0
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <pedestrian_scramble+0x2b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	4610      	mov	r0, r2
 800175e:	f7fe fcf7 	bl	8000150 <__aeabi_fmul>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff f92c 	bl	80009c4 <__aeabi_fcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d046      	beq.n	8001800 <pedestrian_scramble+0x2c0>
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <pedestrian_scramble+0x2b0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f864 	bl	8000844 <__aeabi_i2f>
 800177c:	4604      	mov	r4, r0
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <pedestrian_scramble+0x2a4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f85e 	bl	8000844 <__aeabi_i2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <pedestrian_scramble+0x2b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f7fe fcdd 	bl	8000150 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4620      	mov	r0, r4
 800179c:	f7fe ff9c 	bl	80006d8 <__aeabi_fsub>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f918 	bl	80009d8 <__aeabi_f2iz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <pedestrian_scramble+0x2b0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fc5e 	bl	8002074 <HAL_Delay>
}
 80017b8:	e067      	b.n	800188a <pedestrian_scramble+0x34a>
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	70a3d70a 	.word	0x70a3d70a
 80017c4:	3fb70a3d 	.word	0x3fb70a3d
 80017c8:	33333333 	.word	0x33333333
 80017cc:	3fd33333 	.word	0x3fd33333
 80017d0:	2000011c 	.word	0x2000011c
 80017d4:	20000128 	.word	0x20000128
 80017d8:	20000008 	.word	0x20000008
 80017dc:	10624dd3 	.word	0x10624dd3
 80017e0:	20000120 	.word	0x20000120
 80017e4:	2000003c 	.word	0x2000003c
 80017e8:	20000124 	.word	0x20000124
 80017ec:	20000198 	.word	0x20000198
 80017f0:	20000034 	.word	0x20000034
 80017f4:	55555556 	.word	0x55555556
 80017f8:	20000040 	.word	0x20000040
 80017fc:	20000038 	.word	0x20000038
				else if (delay >= extra_step * 10) HAL_Delay(delay = - extra_step * 20);
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <pedestrian_scramble+0x350>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f81d 	bl	8000844 <__aeabi_i2f>
 800180a:	4604      	mov	r4, r0
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <pedestrian_scramble+0x354>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4921      	ldr	r1, [pc, #132]	; (8001898 <pedestrian_scramble+0x358>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fc9c 	bl	8000150 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff f8c7 	bl	80009b0 <__aeabi_fcmpge>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d014      	beq.n	8001852 <pedestrian_scramble+0x312>
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <pedestrian_scramble+0x354>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001830:	491a      	ldr	r1, [pc, #104]	; (800189c <pedestrian_scramble+0x35c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fc8c 	bl	8000150 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f8cc 	bl	80009d8 <__aeabi_f2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <pedestrian_scramble+0x350>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <pedestrian_scramble+0x350>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fc12 	bl	8002074 <HAL_Delay>
}
 8001850:	e01b      	b.n	800188a <pedestrian_scramble+0x34a>
				else HAL_Delay(delay);
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <pedestrian_scramble+0x350>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fc0c 	bl	8002074 <HAL_Delay>
}
 800185c:	e015      	b.n	800188a <pedestrian_scramble+0x34a>
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 800185e:	211e      	movs	r1, #30
 8001860:	202a      	movs	r0, #42	; 0x2a
 8001862:	f000 fa93 	bl	8001d8c <set_led_color>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <pedestrian_scramble+0x360>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
			delay = TIME_UNIT;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <pedestrian_scramble+0x350>)
 8001870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001874:	601a      	str	r2, [r3, #0]
			FREQ = 10;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <pedestrian_scramble+0x364>)
 8001878:	220a      	movs	r2, #10
 800187a:	601a      	str	r2, [r3, #0]
			extra_step = 1;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <pedestrian_scramble+0x354>)
 800187e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001882:	601a      	str	r2, [r3, #0]
			flag_button = 0;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <pedestrian_scramble+0x368>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	bd98      	pop	{r3, r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	20000034 	.word	0x20000034
 8001894:	20000040 	.word	0x20000040
 8001898:	41200000 	.word	0x41200000
 800189c:	41a00000 	.word	0x41a00000
 80018a0:	20000198 	.word	0x20000198
 80018a4:	20000038 	.word	0x20000038
 80018a8:	20000128 	.word	0x20000128

080018ac <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <SCH_Update+0xa4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4927      	ldr	r1, [pc, #156]	; (8001954 <SCH_Update+0xa8>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3304      	adds	r3, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <SCH_Update+0x44>
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <SCH_Update+0xa4>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4921      	ldr	r1, [pc, #132]	; (8001954 <SCH_Update+0xa8>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1e59      	subs	r1, r3, #1
 80018de:	481d      	ldr	r0, [pc, #116]	; (8001954 <SCH_Update+0xa8>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4403      	add	r3, r0
 80018ea:	3304      	adds	r3, #4
 80018ec:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 80018ee:	e02a      	b.n	8001946 <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <SCH_Update+0xa4>)
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <SCH_Update+0xa4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <SCH_Update+0xa8>)
 80018fa:	460b      	mov	r3, r1
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4403      	add	r3, r0
 8001904:	3308      	adds	r3, #8
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	4812      	ldr	r0, [pc, #72]	; (8001954 <SCH_Update+0xa8>)
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	3304      	adds	r3, #4
 8001916:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <SCH_Update+0xa4>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	490d      	ldr	r1, [pc, #52]	; (8001954 <SCH_Update+0xa8>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	330c      	adds	r3, #12
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4a08      	ldr	r2, [pc, #32]	; (8001950 <SCH_Update+0xa4>)
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b2d8      	uxtb	r0, r3
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <SCH_Update+0xa8>)
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	330c      	adds	r3, #12
 8001942:	4602      	mov	r2, r0
 8001944:	701a      	strb	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2000012c 	.word	0x2000012c
 8001954:	2000026c 	.word	0x2000026c

08001958 <setTimer2>:
int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
	timer1_counter = duration / TIMER_CYCLE;
	timer1_flag = 0;
}
void setTimer2(int duration) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <setTimer2+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb92 f3f3 	sdiv	r3, r2, r3
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <setTimer2+0x2c>)
 800196c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <setTimer2+0x30>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000044 	.word	0x20000044
 8001984:	20000148 	.word	0x20000148
 8001988:	20000134 	.word	0x20000134

0800198c <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <timerRun+0xac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dd0b      	ble.n	80019b0 <timerRun+0x24>
		timer1_counter--;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <timerRun+0xac>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3b01      	subs	r3, #1
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <timerRun+0xac>)
 80019a0:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <timerRun+0xac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc02      	bgt.n	80019b0 <timerRun+0x24>
			timer1_flag = 1;
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <timerRun+0xb0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <timerRun+0xb4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dd0b      	ble.n	80019d0 <timerRun+0x44>
		timer2_counter--;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <timerRun+0xb4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <timerRun+0xb4>)
 80019c0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <timerRun+0xb4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dc02      	bgt.n	80019d0 <timerRun+0x44>
			timer2_flag = 1;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <timerRun+0xb8>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <timerRun+0xbc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd0b      	ble.n	80019f0 <timerRun+0x64>
		timer3_counter--;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <timerRun+0xbc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <timerRun+0xbc>)
 80019e0:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <timerRun+0xbc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	dc02      	bgt.n	80019f0 <timerRun+0x64>
			timer3_flag = 1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <timerRun+0xc0>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <timerRun+0xc4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	dd0b      	ble.n	8001a10 <timerRun+0x84>
		timer4_counter--;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <timerRun+0xc4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <timerRun+0xc4>)
 8001a00:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <timerRun+0xc4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dc02      	bgt.n	8001a10 <timerRun+0x84>
			timer4_flag = 1;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <timerRun+0xc8>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <timerRun+0xcc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dd0b      	ble.n	8001a30 <timerRun+0xa4>
		timer5_counter--;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <timerRun+0xcc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <timerRun+0xcc>)
 8001a20:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <timerRun+0xcc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	dc02      	bgt.n	8001a30 <timerRun+0xa4>
			timer5_flag = 1;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <timerRun+0xd0>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000144 	.word	0x20000144
 8001a3c:	20000130 	.word	0x20000130
 8001a40:	20000148 	.word	0x20000148
 8001a44:	20000134 	.word	0x20000134
 8001a48:	2000014c 	.word	0x2000014c
 8001a4c:	20000138 	.word	0x20000138
 8001a50:	20000150 	.word	0x20000150
 8001a54:	2000013c 	.word	0x2000013c
 8001a58:	20000154 	.word	0x20000154
 8001a5c:	20000140 	.word	0x20000140

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_MspInit+0x5c>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_MspInit+0x5c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_MspInit+0x5c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_MspInit+0x5c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <HAL_MspInit+0x5c>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_MspInit+0x5c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_MspInit+0x60>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_MspInit+0x60>)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000

08001ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d114      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201c      	movs	r0, #28
 8001af4:	f000 fbb9 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af8:	201c      	movs	r0, #28
 8001afa:	f000 fbd2 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001afe:	e018      	b.n	8001b32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_TIM_Base_MspInit+0x7c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d113      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	201d      	movs	r0, #29
 8001b28:	f000 fb9f 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b2c:	201d      	movs	r0, #29
 8001b2e:	f000 fbb8 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40000400 	.word	0x40000400

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_TIM_MspPostInit+0x58>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d117      	bne.n	8001b94 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_TIM_MspPostInit+0x5c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_TIM_MspPostInit+0x5c>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_TIM_MspPostInit+0x5c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b7c:	2340      	movs	r3, #64	; 0x40
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_TIM_MspPostInit+0x60>)
 8001b90:	f000 fba2 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x70>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d123      	bne.n	8001c10 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd2:	61d3      	str	r3, [r2, #28]
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_UART_MspInit+0x74>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_UART_MspInit+0x78>)
 8001c0c:	f000 fb64 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40004400 	.word	0x40004400
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010800 	.word	0x40010800

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6a:	f000 f9e7 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f001 faaf 	bl	80031dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001e0 	.word	0x200001e0

08001c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM3_IRQHandler+0x10>)
 8001c8e:	f001 faa5 	bl	80031dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000198 	.word	0x20000198

08001c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ca0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca4:	f000 fccc 	bl	8002640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f002 f9f8 	bl	80040d0 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20005000 	.word	0x20005000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	20000158 	.word	0x20000158
 8001d14:	200005a0 	.word	0x200005a0

08001d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <helper_set_led_color>:
 */


#include "traffic_light.h"

void helper_set_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2, int COLOR) {
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	460b      	mov	r3, r1
 8001d32:	817b      	strh	r3, [r7, #10]
 8001d34:	4613      	mov	r3, r2
 8001d36:	813b      	strh	r3, [r7, #8]
	switch (COLOR) {
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d018      	beq.n	8001d70 <helper_set_led_color+0x4c>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	dc1d      	bgt.n	8001d80 <helper_set_led_color+0x5c>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b1e      	cmp	r3, #30
 8001d48:	d003      	beq.n	8001d52 <helper_set_led_color+0x2e>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b1f      	cmp	r3, #31
 8001d4e:	d008      	beq.n	8001d62 <helper_set_led_color+0x3e>
		case GREEN_COLOR:
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
			GPIOy->BSRR = GPIO_Pin2;
			break;
	}
}
 8001d50:	e016      	b.n	8001d80 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001d52:	897a      	ldrh	r2, [r7, #10]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = (uint32_t)GPIO_Pin2 << 16u;
 8001d58:	893b      	ldrh	r3, [r7, #8]
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
			break;
 8001d60:	e00e      	b.n	8001d80 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001d62:	897a      	ldrh	r2, [r7, #10]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001d68:	893a      	ldrh	r2, [r7, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
			break;
 8001d6e:	e007      	b.n	8001d80 <helper_set_led_color+0x5c>
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001d78:	893a      	ldrh	r2, [r7, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
			break;
 8001d7e:	bf00      	nop
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
	...

08001d8c <set_led_color>:

void set_led_color(int led, int color) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	switch (led) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9a:	d01d      	beq.n	8001dd8 <set_led_color+0x4c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8001da0:	dc25      	bgt.n	8001dee <set_led_color+0x62>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b28      	cmp	r3, #40	; 0x28
 8001da6:	d003      	beq.n	8001db0 <set_led_color+0x24>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b29      	cmp	r3, #41	; 0x29
 8001dac:	d009      	beq.n	8001dc2 <set_led_color+0x36>
		case PEDESTRIAN_LED:
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
					Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin, color);
			break;
	}
}
 8001dae:	e01e      	b.n	8001dee <set_led_color+0x62>
			helper_set_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2310      	movs	r3, #16
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <set_led_color+0x6c>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	4810      	ldr	r0, [pc, #64]	; (8001dfc <set_led_color+0x70>)
 8001dbc:	f7ff ffb2 	bl	8001d24 <helper_set_led_color>
			break;
 8001dc0:	e015      	b.n	8001dee <set_led_color+0x62>
			helper_set_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <set_led_color+0x70>)
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd0:	480a      	ldr	r0, [pc, #40]	; (8001dfc <set_led_color+0x70>)
 8001dd2:	f7ff ffa7 	bl	8001d24 <helper_set_led_color>
			break;
 8001dd6:	e00a      	b.n	8001dee <set_led_color+0x62>
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <set_led_color+0x74>)
 8001de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <set_led_color+0x74>)
 8001de8:	f7ff ff9c 	bl	8001d24 <helper_set_led_color>
			break;
 8001dec:	bf00      	nop
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40011000 	.word	0x40011000

08001e04 <helper_get_led_color>:

int helper_get_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2) {
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
 8001e14:	4613      	mov	r3, r2
 8001e16:	813b      	strh	r3, [r7, #8]
	GPIO_PinState bitstatus1;
	GPIO_PinState bitstatus2;

	if ((GPIOx->IDR & GPIO_Pin1) != (uint32_t)GPIO_PIN_RESET) bitstatus1 = GPIO_PIN_SET;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	897b      	ldrh	r3, [r7, #10]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <helper_get_led_color+0x26>
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
 8001e28:	e001      	b.n	8001e2e <helper_get_led_color+0x2a>
	else bitstatus1 = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

	if ((GPIOy->IDR & GPIO_Pin2) != (uint32_t)GPIO_PIN_RESET) bitstatus2 = GPIO_PIN_SET;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	893b      	ldrh	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <helper_get_led_color+0x3c>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75bb      	strb	r3, [r7, #22]
 8001e3e:	e001      	b.n	8001e44 <helper_get_led_color+0x40>
	else bitstatus2 = GPIO_PIN_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75bb      	strb	r3, [r7, #22]

	if (!bitstatus1 && bitstatus2) return GREEN_COLOR;
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <helper_get_led_color+0x50>
 8001e4a:	7dbb      	ldrb	r3, [r7, #22]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <helper_get_led_color+0x50>
 8001e50:	2320      	movs	r3, #32
 8001e52:	e010      	b.n	8001e76 <helper_get_led_color+0x72>
	else if (bitstatus1 && !bitstatus2) return RED_COLOR;
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <helper_get_led_color+0x60>
 8001e5a:	7dbb      	ldrb	r3, [r7, #22]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <helper_get_led_color+0x60>
 8001e60:	231e      	movs	r3, #30
 8001e62:	e008      	b.n	8001e76 <helper_get_led_color+0x72>
	else if (bitstatus1 && bitstatus2) return AMBER_COLOR;
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <helper_get_led_color+0x70>
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <helper_get_led_color+0x70>
 8001e70:	231f      	movs	r3, #31
 8001e72:	e000      	b.n	8001e76 <helper_get_led_color+0x72>

	return UNDEFINED_COLOR;
 8001e74:	231d      	movs	r3, #29
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <get_led_color>:

int get_led_color(int led) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	switch(led) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e8c:	d01b      	beq.n	8001ec6 <get_led_color+0x46>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b2a      	cmp	r3, #42	; 0x2a
 8001e92:	dc22      	bgt.n	8001eda <get_led_color+0x5a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b28      	cmp	r3, #40	; 0x28
 8001e98:	d003      	beq.n	8001ea2 <get_led_color+0x22>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b29      	cmp	r3, #41	; 0x29
 8001e9e:	d008      	beq.n	8001eb2 <get_led_color+0x32>
 8001ea0:	e01b      	b.n	8001eda <get_led_color+0x5a>
	case TRAFFIC_1_LED:
		return helper_get_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <get_led_color+0x64>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <get_led_color+0x68>)
 8001eaa:	f7ff ffab 	bl	8001e04 <helper_get_led_color>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	e014      	b.n	8001edc <get_led_color+0x5c>
				Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
		break;
	case TRAFFIC_2_LED:
		return helper_get_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8001eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <get_led_color+0x68>)
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <get_led_color+0x68>)
 8001ebe:	f7ff ffa1 	bl	8001e04 <helper_get_led_color>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	e00a      	b.n	8001edc <get_led_color+0x5c>
				Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
		break;
	case PEDESTRIAN_LED:
		return helper_get_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <get_led_color+0x6c>)
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <get_led_color+0x6c>)
 8001ed2:	f7ff ff97 	bl	8001e04 <helper_get_led_color>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	e000      	b.n	8001edc <get_led_color+0x5c>
				Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin);
		break;
	default:
		return UNDEFINED_COLOR;
 8001eda:	231d      	movs	r3, #29
		break;
	}

	return UNDEFINED_COLOR;
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40011000 	.word	0x40011000

08001ef0 <helper_clear_led>:

void helper_clear_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
	...

08001f10 <clear_led>:
void clear_led(int led) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	switch(led) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f1c:	d014      	beq.n	8001f48 <clear_led+0x38>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b2a      	cmp	r3, #42	; 0x2a
 8001f22:	dc17      	bgt.n	8001f54 <clear_led+0x44>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b28      	cmp	r3, #40	; 0x28
 8001f28:	d003      	beq.n	8001f32 <clear_led+0x22>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b29      	cmp	r3, #41	; 0x29
 8001f2e:	d005      	beq.n	8001f3c <clear_led+0x2c>
		break;
	case PEDESTRIAN_LED:
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
		break;
	}
}
 8001f30:	e010      	b.n	8001f54 <clear_led+0x44>
		helper_clear_led(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 8001f32:	2101      	movs	r1, #1
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <clear_led+0x4c>)
 8001f36:	f7ff ffdb 	bl	8001ef0 <helper_clear_led>
		break;
 8001f3a:	e00b      	b.n	8001f54 <clear_led+0x44>
		helper_clear_led(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8001f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <clear_led+0x4c>)
 8001f42:	f7ff ffd5 	bl	8001ef0 <helper_clear_led>
		break;
 8001f46:	e005      	b.n	8001f54 <clear_led+0x44>
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
 8001f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <clear_led+0x50>)
 8001f4e:	f7ff ffcf 	bl	8001ef0 <helper_clear_led>
		break;
 8001f52:	bf00      	nop
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40011000 	.word	0x40011000

08001f64 <Reset_Handler>:
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <LoopFillZerobss+0x12>)
 8001f66:	490d      	ldr	r1, [pc, #52]	; (8001f9c <LoopFillZerobss+0x16>)
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x1a>)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:
 8001f6e:	58d4      	ldr	r4, [r2, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:
 8001f74:	18c4      	adds	r4, r0, r3
 8001f76:	428c      	cmp	r4, r1
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <LoopFillZerobss+0x1e>)
 8001f7c:	4c0a      	ldr	r4, [pc, #40]	; (8001fa8 <LoopFillZerobss+0x22>)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:
 8001f86:	42a2      	cmp	r2, r4
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>
 8001f8a:	f7ff fec5 	bl	8001d18 <SystemInit>
 8001f8e:	f002 f8a5 	bl	80040dc <__libc_init_array>
 8001f92:	f7ff f8ab 	bl	80010ec <main>
 8001f96:	4770      	bx	lr
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	200000b8 	.word	0x200000b8
 8001fa0:	08004a30 	.word	0x08004a30
 8001fa4:	200000b8 	.word	0x200000b8
 8001fa8:	200005a0 	.word	0x200005a0

08001fac <ADC1_2_IRQHandler>:
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_Init+0x28>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_Init+0x28>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 f947 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f808 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fd48 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f95f 	bl	80022be <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f927 	bl	800226a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000048 	.word	0x20000048
 8002034:	20000050 	.word	0x20000050
 8002038:	2000004c 	.word	0x2000004c

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x1c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_IncTick+0x20>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_IncTick+0x20>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000050 	.word	0x20000050
 800205c:	2000058c 	.word	0x2000058c

08002060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	2000058c 	.word	0x2000058c

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fff0 	bl	8002060 <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffe0 	bl	8002060 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000050 	.word	0x20000050

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4906      	ldr	r1, [pc, #24]	; (8002154 <__NVIC_EnableIRQ+0x34>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff90 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff2d 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff42 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff90 	bl	80021ac <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5f 	bl	8002158 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff35 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b08b      	sub	sp, #44	; 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e169      	b.n	80025c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022ec:	2201      	movs	r2, #1
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8158 	bne.w	80025ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a9a      	ldr	r2, [pc, #616]	; (8002578 <HAL_GPIO_Init+0x2a0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d05e      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002314:	4a98      	ldr	r2, [pc, #608]	; (8002578 <HAL_GPIO_Init+0x2a0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d875      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800231a:	4a98      	ldr	r2, [pc, #608]	; (800257c <HAL_GPIO_Init+0x2a4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d058      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002320:	4a96      	ldr	r2, [pc, #600]	; (800257c <HAL_GPIO_Init+0x2a4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d86f      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002326:	4a96      	ldr	r2, [pc, #600]	; (8002580 <HAL_GPIO_Init+0x2a8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d052      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 800232c:	4a94      	ldr	r2, [pc, #592]	; (8002580 <HAL_GPIO_Init+0x2a8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d869      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002332:	4a94      	ldr	r2, [pc, #592]	; (8002584 <HAL_GPIO_Init+0x2ac>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04c      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002338:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_GPIO_Init+0x2ac>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d863      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800233e:	4a92      	ldr	r2, [pc, #584]	; (8002588 <HAL_GPIO_Init+0x2b0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d046      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002344:	4a90      	ldr	r2, [pc, #576]	; (8002588 <HAL_GPIO_Init+0x2b0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d85d      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d82a      	bhi.n	80023a4 <HAL_GPIO_Init+0xcc>
 800234e:	2b12      	cmp	r3, #18
 8002350:	d859      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_GPIO_Init+0x80>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	080023d3 	.word	0x080023d3
 800235c:	080023ad 	.word	0x080023ad
 8002360:	080023bf 	.word	0x080023bf
 8002364:	08002401 	.word	0x08002401
 8002368:	08002407 	.word	0x08002407
 800236c:	08002407 	.word	0x08002407
 8002370:	08002407 	.word	0x08002407
 8002374:	08002407 	.word	0x08002407
 8002378:	08002407 	.word	0x08002407
 800237c:	08002407 	.word	0x08002407
 8002380:	08002407 	.word	0x08002407
 8002384:	08002407 	.word	0x08002407
 8002388:	08002407 	.word	0x08002407
 800238c:	08002407 	.word	0x08002407
 8002390:	08002407 	.word	0x08002407
 8002394:	08002407 	.word	0x08002407
 8002398:	08002407 	.word	0x08002407
 800239c:	080023b5 	.word	0x080023b5
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	4a79      	ldr	r2, [pc, #484]	; (800258c <HAL_GPIO_Init+0x2b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023aa:	e02c      	b.n	8002406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e029      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e024      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	3308      	adds	r3, #8
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e01f      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	330c      	adds	r3, #12
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e01a      	b.n	8002408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023da:	2304      	movs	r3, #4
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e013      	b.n	8002408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e8:	2308      	movs	r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	611a      	str	r2, [r3, #16]
          break;
 80023f2:	e009      	b.n	8002408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	615a      	str	r2, [r3, #20]
          break;
 80023fe:	e003      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x130>
          break;
 8002406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d801      	bhi.n	8002412 <HAL_GPIO_Init+0x13a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_Init+0x13e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d802      	bhi.n	8002424 <HAL_GPIO_Init+0x14c>
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x152>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3b08      	subs	r3, #8
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	210f      	movs	r1, #15
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80b1 	beq.w	80025ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002458:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <HAL_GPIO_Init+0x2bc>)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <HAL_GPIO_Init+0x2c0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x1ec>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_GPIO_Init+0x2c4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1e8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3e      	ldr	r2, [pc, #248]	; (80025a0 <HAL_GPIO_Init+0x2c8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1e4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3d      	ldr	r2, [pc, #244]	; (80025a4 <HAL_GPIO_Init+0x2cc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1e0>
 80024b4:	2303      	movs	r3, #3
 80024b6:	e006      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e004      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024bc:	2302      	movs	r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024c4:	2300      	movs	r3, #0
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	f002 0203 	and.w	r2, r2, #3
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4093      	lsls	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d6:	492f      	ldr	r1, [pc, #188]	; (8002594 <HAL_GPIO_Init+0x2bc>)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	492c      	ldr	r1, [pc, #176]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	4928      	ldr	r1, [pc, #160]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4922      	ldr	r1, [pc, #136]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	491e      	ldr	r1, [pc, #120]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	4918      	ldr	r1, [pc, #96]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	43db      	mvns	r3, r3
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002558:	4013      	ands	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d021      	beq.n	80025ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
 8002574:	e021      	b.n	80025ba <HAL_GPIO_Init+0x2e2>
 8002576:	bf00      	nop
 8002578:	10320000 	.word	0x10320000
 800257c:	10310000 	.word	0x10310000
 8002580:	10220000 	.word	0x10220000
 8002584:	10210000 	.word	0x10210000
 8002588:	10120000 	.word	0x10120000
 800258c:	10110000 	.word	0x10110000
 8002590:	40021000 	.word	0x40021000
 8002594:	40010000 	.word	0x40010000
 8002598:	40010800 	.word	0x40010800
 800259c:	40010c00 	.word	0x40010c00
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40011400 	.word	0x40011400
 80025a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_GPIO_Init+0x304>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4909      	ldr	r1, [pc, #36]	; (80025dc <HAL_GPIO_Init+0x304>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f ae8e 	bne.w	80022ec <HAL_GPIO_Init+0x14>
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	372c      	adds	r7, #44	; 0x2c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e001      	b.n	8002602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	807b      	strh	r3, [r7, #2]
 800261a:	4613      	mov	r3, r2
 800261c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800261e:	787b      	ldrb	r3, [r7, #1]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800262a:	e003      	b.n	8002634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe ff5f 	bl	8001522 <HAL_GPIO_EXTI_Callback>
  }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e26c      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8087 	beq.w	800279e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002690:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800269c:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
 80026a8:	4b8c      	ldr	r3, [pc, #560]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b89      	ldr	r3, [pc, #548]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d06c      	beq.n	800279c <HAL_RCC_OscConfig+0x12c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d168      	bne.n	800279c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e246      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x76>
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a7f      	ldr	r2, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e02e      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7a      	ldr	r2, [pc, #488]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b78      	ldr	r3, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a77      	ldr	r2, [pc, #476]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0xbc>
 8002712:	4b72      	ldr	r3, [pc, #456]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a71      	ldr	r2, [pc, #452]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 800272c:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a67      	ldr	r2, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fc88 	bl	8002060 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff fc84 	bl	8002060 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1fa      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0xe4>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fc74 	bl	8002060 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff fc70 	bl	8002060 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1e6      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x10c>
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d063      	beq.n	8002872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d11c      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e1ba      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4939      	ldr	r1, [pc, #228]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	e03a      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7ff fc29 	bl	8002060 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7ff fc25 	bl	8002060 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e19b      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4927      	ldr	r1, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e015      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fc08 	bl	8002060 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002854:	f7ff fc04 	bl	8002060 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e17a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03a      	beq.n	80028f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d019      	beq.n	80028ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7ff fbe8 	bl	8002060 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7ff fbe4 	bl	8002060 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e15a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 fad8 	bl	8002e68 <RCC_Delay>
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7ff fbce 	bl	8002060 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c6:	e00f      	b.n	80028e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff fbca 	bl	8002060 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d908      	bls.n	80028e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e140      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	42420000 	.word	0x42420000
 80028e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e9      	bne.n	80028c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a6 	beq.w	8002a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002906:	4b97      	ldr	r3, [pc, #604]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a93      	ldr	r2, [pc, #588]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b91      	ldr	r3, [pc, #580]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d118      	bne.n	800296c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293a:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a8a      	ldr	r2, [pc, #552]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7ff fb8b 	bl	8002060 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7ff fb87 	bl	8002060 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0fd      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x312>
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e02d      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x334>
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a72      	ldr	r2, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x356>
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a6c      	ldr	r2, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a66      	ldr	r2, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff fb3b 	bl	8002060 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff fb37 	bl	8002060 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0ab      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b57      	ldr	r3, [pc, #348]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x37e>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff fb25 	bl	8002060 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7ff fb21 	bl	8002060 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e095      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8081 	beq.w	8002b5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d061      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d146      	bne.n	8002afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7ff faf5 	bl	8002060 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff faf1 	bl	8002060 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e067      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a19      	ldr	r1, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7ff fac5 	bl	8002060 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7ff fac1 	bl	8002060 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e037      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x46a>
 8002af8:	e02f      	b.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff faae 	bl	8002060 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7ff faaa 	bl	8002060 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e020      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x498>
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e013      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42420060 	.word	0x42420060

08002b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0d0      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d910      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 0207 	bic.w	r2, r3, #7
 8002b9a:	4965      	ldr	r1, [pc, #404]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b8      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	494d      	ldr	r1, [pc, #308]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d040      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d115      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e073      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4936      	ldr	r1, [pc, #216]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7ff f9fe 	bl	8002060 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7ff f9fa 	bl	8002060 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e053      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d210      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4922      	ldr	r1, [pc, #136]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4916      	ldr	r1, [pc, #88]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	490e      	ldr	r1, [pc, #56]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 f821 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490a      	ldr	r1, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1cc>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f95c 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40021000 	.word	0x40021000
 8002d38:	080049dc 	.word	0x080049dc
 8002d3c:	20000048 	.word	0x20000048
 8002d40:	2000004c 	.word	0x2000004c

08002d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	b490      	push	{r4, r7}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d4c:	1d3c      	adds	r4, r7, #4
 8002d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d54:	f240 2301 	movw	r3, #513	; 0x201
 8002d58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x40>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x46>
 8002d82:	e02d      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d96:	4413      	add	r3, r2
 8002d98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c5b      	lsrs	r3, r3, #17
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db6:	4413      	add	r3, r2
 8002db8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc2:	fb02 f203 	mul.w	r2, r2, r3
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	e004      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	623b      	str	r3, [r7, #32]
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de2:	623b      	str	r3, [r7, #32]
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc90      	pop	{r4, r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	080049cc 	.word	0x080049cc
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	003d0900 	.word	0x003d0900

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000048 	.word	0x20000048

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff2 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	080049ec 	.word	0x080049ec

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	080049ec 	.word	0x080049ec

08002e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCC_Delay+0x34>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <RCC_Delay+0x38>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0a5b      	lsrs	r3, r3, #9
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e84:	bf00      	nop
  }
  while (Delay --);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <RCC_Delay+0x1c>
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000048 	.word	0x20000048
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e041      	b.n	8002f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fdfa 	bl	8001ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 fc28 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e03a      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_TIM_Base_Start_IT+0x98>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x58>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x58>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x58>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d010      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e007      	b.n	8002fd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800

08002fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e041      	b.n	800307e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f839 	bl	8003086 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f000 fb86 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x24>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e022      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x3e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e015      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x58>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e008      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e05e      	b.n	80031c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0x82>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	e013      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0x92>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	e00b      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	e003      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fd74 	bl	8003c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_TIM_PWM_Start+0x138>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d107      	bne.n	800316a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIM_PWM_Start+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d009      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_TIM_PWM_Start+0x13c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_TIM_PWM_Start+0x140>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d010      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	e007      	b.n	80031c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0202 	mvn.w	r2, #2
 8003208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa6f 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa62 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa71 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d122      	bne.n	800328c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d11b      	bne.n	800328c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0204 	mvn.w	r2, #4
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa45 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 8003278:	e005      	b.n	8003286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa38 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa47 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0208 	mvn.w	r2, #8
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2204      	movs	r2, #4
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa1b 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa0e 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fa1d 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0210 	mvn.w	r2, #16
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2208      	movs	r2, #8
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f9f1 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9e4 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f9f3 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0201 	mvn.w	r2, #1
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe f8ce 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	d10e      	bne.n	800338c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d107      	bne.n	800338c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fce1 	bl	8003d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9b7 	bl	8003726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0220 	mvn.w	r2, #32
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fcac 	bl	8003d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003402:	2302      	movs	r3, #2
 8003404:	e0ac      	b.n	8003560 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f200 809f 	bhi.w	8003554 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003451 	.word	0x08003451
 8003420:	08003555 	.word	0x08003555
 8003424:	08003555 	.word	0x08003555
 8003428:	08003555 	.word	0x08003555
 800342c:	08003491 	.word	0x08003491
 8003430:	08003555 	.word	0x08003555
 8003434:	08003555 	.word	0x08003555
 8003438:	08003555 	.word	0x08003555
 800343c:	080034d3 	.word	0x080034d3
 8003440:	08003555 	.word	0x08003555
 8003444:	08003555 	.word	0x08003555
 8003448:	08003555 	.word	0x08003555
 800344c:	08003513 	.word	0x08003513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f9d0 	bl	80037fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6999      	ldr	r1, [r3, #24]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]
      break;
 800348e:	e062      	b.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa16 	bl	80038c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6999      	ldr	r1, [r3, #24]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	619a      	str	r2, [r3, #24]
      break;
 80034d0:	e041      	b.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fa5f 	bl	800399c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0208 	orr.w	r2, r2, #8
 80034ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0204 	bic.w	r2, r2, #4
 80034fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69d9      	ldr	r1, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	61da      	str	r2, [r3, #28]
      break;
 8003510:	e021      	b.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 faa9 	bl	8003a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69d9      	ldr	r1, [r3, #28]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	61da      	str	r2, [r3, #28]
      break;
 8003552:	e000      	b.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIM_ConfigClockSource+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e0b3      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x180>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800359e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b8:	d03e      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0xd0>
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	f200 8087 	bhi.w	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	f000 8085 	beq.w	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	d87f      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035d0:	2b70      	cmp	r3, #112	; 0x70
 80035d2:	d01a      	beq.n	800360a <HAL_TIM_ConfigClockSource+0xa2>
 80035d4:	2b70      	cmp	r3, #112	; 0x70
 80035d6:	d87b      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035d8:	2b60      	cmp	r3, #96	; 0x60
 80035da:	d050      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x116>
 80035dc:	2b60      	cmp	r3, #96	; 0x60
 80035de:	d877      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035e0:	2b50      	cmp	r3, #80	; 0x50
 80035e2:	d03c      	beq.n	800365e <HAL_TIM_ConfigClockSource+0xf6>
 80035e4:	2b50      	cmp	r3, #80	; 0x50
 80035e6:	d873      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d058      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x136>
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d86f      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035f0:	2b30      	cmp	r3, #48	; 0x30
 80035f2:	d064      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x156>
 80035f4:	2b30      	cmp	r3, #48	; 0x30
 80035f6:	d86b      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d060      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x156>
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d867      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05c      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x156>
 8003604:	2b10      	cmp	r3, #16
 8003606:	d05a      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003608:	e062      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f000 faee 	bl	8003bfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800362c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	609a      	str	r2, [r3, #8]
      break;
 8003636:	e04e      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f000 fad7 	bl	8003bfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365a:	609a      	str	r2, [r3, #8]
      break;
 800365c:	e03b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	461a      	mov	r2, r3
 800366c:	f000 fa4e 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2150      	movs	r1, #80	; 0x50
 8003676:	4618      	mov	r0, r3
 8003678:	f000 faa5 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 800367c:	e02b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	461a      	mov	r2, r3
 800368c:	f000 fa6c 	bl	8003b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2160      	movs	r1, #96	; 0x60
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fa95 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 800369c:	e01b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 fa2e 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa85 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 80036bc:	e00b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f000 fa7c 	bl	8003bc6 <TIM_ITRx_SetConfig>
        break;
 80036ce:	e002      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <TIM_Base_SetConfig+0xb8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <TIM_Base_SetConfig+0xbc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <TIM_Base_SetConfig+0xc0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <TIM_Base_SetConfig+0xb8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <TIM_Base_SetConfig+0xbc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <TIM_Base_SetConfig+0xc0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <TIM_Base_SetConfig+0xb8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 0302 	bic.w	r3, r3, #2
 8003844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <TIM_OC1_SetConfig+0xc8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10c      	bne.n	8003872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0308 	bic.w	r3, r3, #8
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <TIM_OC1_SetConfig+0xc8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00

080038c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0210 	bic.w	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0320 	bic.w	r3, r3, #32
 8003912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <TIM_OC2_SetConfig+0xd0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10d      	bne.n	8003944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a14      	ldr	r2, [pc, #80]	; (8003998 <TIM_OC2_SetConfig+0xd0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d113      	bne.n	8003974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00

0800399c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <TIM_OC3_SetConfig+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10d      	bne.n	8003a16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <TIM_OC3_SetConfig+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d113      	bne.n	8003a46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00

08003a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	031b      	lsls	r3, r3, #12
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <TIM_OC4_SetConfig+0x98>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d109      	bne.n	8003ae4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00

08003b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 030a 	bic.w	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0210 	bic.w	r2, r3, #16
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	031b      	lsls	r3, r3, #12
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f043 0307 	orr.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	609a      	str	r2, [r3, #8]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1a      	ldr	r2, [r3, #32]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e046      	b.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10c      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e03f      	b.n	8003df2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd ff0e 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f905 	bl	8003fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08a      	sub	sp, #40	; 0x28
 8003dfe:	af02      	add	r7, sp, #8
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d17c      	bne.n	8003f14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_Transmit+0x2c>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e075      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UART_Transmit+0x3e>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e06e      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2221      	movs	r2, #33	; 0x21
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e4e:	f7fe f907 	bl	8002060 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e8c:	e02a      	b.n	8003ee4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f840 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e036      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1cf      	bne.n	8003e8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2140      	movs	r1, #64	; 0x40
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f810 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	e02c      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d028      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f3e:	f7fe f88f 	bl	8002060 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d21d      	bcs.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e00f      	b.n	8003faa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d0c3      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fee:	f023 030c 	bic.w	r3, r3, #12
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <UART_SetConfig+0x114>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe ff10 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	e002      	b.n	800402a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fef8 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8004028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <UART_SetConfig+0x118>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	0119      	lsls	r1, r3, #4
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <UART_SetConfig+0x118>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2064      	movs	r0, #100	; 0x64
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	4419      	add	r1, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009a      	lsls	r2, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fbb2 f2f3 	udiv	r2, r2, r3
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <UART_SetConfig+0x118>)
 800409a:	fba3 0302 	umull	r0, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2064      	movs	r0, #100	; 0x64
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a07      	ldr	r2, [pc, #28]	; (80040cc <UART_SetConfig+0x118>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	440a      	add	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40013800 	.word	0x40013800
 80040cc:	51eb851f 	.word	0x51eb851f

080040d0 <__errno>:
 80040d0:	4b01      	ldr	r3, [pc, #4]	; (80040d8 <__errno+0x8>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000054 	.word	0x20000054

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	2600      	movs	r6, #0
 80040e0:	4d0c      	ldr	r5, [pc, #48]	; (8004114 <__libc_init_array+0x38>)
 80040e2:	4c0d      	ldr	r4, [pc, #52]	; (8004118 <__libc_init_array+0x3c>)
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	f000 fc5c 	bl	80049a8 <_init>
 80040f0:	2600      	movs	r6, #0
 80040f2:	4d0a      	ldr	r5, [pc, #40]	; (800411c <__libc_init_array+0x40>)
 80040f4:	4c0a      	ldr	r4, [pc, #40]	; (8004120 <__libc_init_array+0x44>)
 80040f6:	1b64      	subs	r4, r4, r5
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004a28 	.word	0x08004a28
 8004118:	08004a28 	.word	0x08004a28
 800411c:	08004a28 	.word	0x08004a28
 8004120:	08004a2c 	.word	0x08004a2c

08004124 <memset>:
 8004124:	4603      	mov	r3, r0
 8004126:	4402      	add	r2, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <siprintf>:
 8004134:	b40e      	push	{r1, r2, r3}
 8004136:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800413a:	b500      	push	{lr}
 800413c:	b09c      	sub	sp, #112	; 0x70
 800413e:	ab1d      	add	r3, sp, #116	; 0x74
 8004140:	9002      	str	r0, [sp, #8]
 8004142:	9006      	str	r0, [sp, #24]
 8004144:	9107      	str	r1, [sp, #28]
 8004146:	9104      	str	r1, [sp, #16]
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <siprintf+0x38>)
 800414a:	4909      	ldr	r1, [pc, #36]	; (8004170 <siprintf+0x3c>)
 800414c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004150:	9105      	str	r1, [sp, #20]
 8004152:	6800      	ldr	r0, [r0, #0]
 8004154:	a902      	add	r1, sp, #8
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	f000 f868 	bl	800422c <_svfiprintf_r>
 800415c:	2200      	movs	r2, #0
 800415e:	9b02      	ldr	r3, [sp, #8]
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	b01c      	add	sp, #112	; 0x70
 8004164:	f85d eb04 	ldr.w	lr, [sp], #4
 8004168:	b003      	add	sp, #12
 800416a:	4770      	bx	lr
 800416c:	20000054 	.word	0x20000054
 8004170:	ffff0208 	.word	0xffff0208

08004174 <__ssputs_r>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	688e      	ldr	r6, [r1, #8]
 800417a:	4682      	mov	sl, r0
 800417c:	429e      	cmp	r6, r3
 800417e:	460c      	mov	r4, r1
 8004180:	4690      	mov	r8, r2
 8004182:	461f      	mov	r7, r3
 8004184:	d838      	bhi.n	80041f8 <__ssputs_r+0x84>
 8004186:	898a      	ldrh	r2, [r1, #12]
 8004188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800418c:	d032      	beq.n	80041f4 <__ssputs_r+0x80>
 800418e:	6825      	ldr	r5, [r4, #0]
 8004190:	6909      	ldr	r1, [r1, #16]
 8004192:	3301      	adds	r3, #1
 8004194:	eba5 0901 	sub.w	r9, r5, r1
 8004198:	6965      	ldr	r5, [r4, #20]
 800419a:	444b      	add	r3, r9
 800419c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041a4:	106d      	asrs	r5, r5, #1
 80041a6:	429d      	cmp	r5, r3
 80041a8:	bf38      	it	cc
 80041aa:	461d      	movcc	r5, r3
 80041ac:	0553      	lsls	r3, r2, #21
 80041ae:	d531      	bpl.n	8004214 <__ssputs_r+0xa0>
 80041b0:	4629      	mov	r1, r5
 80041b2:	f000 fb53 	bl	800485c <_malloc_r>
 80041b6:	4606      	mov	r6, r0
 80041b8:	b950      	cbnz	r0, 80041d0 <__ssputs_r+0x5c>
 80041ba:	230c      	movs	r3, #12
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f8ca 3000 	str.w	r3, [sl]
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d0:	464a      	mov	r2, r9
 80041d2:	6921      	ldr	r1, [r4, #16]
 80041d4:	f000 face 	bl	8004774 <memcpy>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e2:	81a3      	strh	r3, [r4, #12]
 80041e4:	6126      	str	r6, [r4, #16]
 80041e6:	444e      	add	r6, r9
 80041e8:	6026      	str	r6, [r4, #0]
 80041ea:	463e      	mov	r6, r7
 80041ec:	6165      	str	r5, [r4, #20]
 80041ee:	eba5 0509 	sub.w	r5, r5, r9
 80041f2:	60a5      	str	r5, [r4, #8]
 80041f4:	42be      	cmp	r6, r7
 80041f6:	d900      	bls.n	80041fa <__ssputs_r+0x86>
 80041f8:	463e      	mov	r6, r7
 80041fa:	4632      	mov	r2, r6
 80041fc:	4641      	mov	r1, r8
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	f000 fac6 	bl	8004790 <memmove>
 8004204:	68a3      	ldr	r3, [r4, #8]
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	1b9b      	subs	r3, r3, r6
 800420a:	4432      	add	r2, r6
 800420c:	2000      	movs	r0, #0
 800420e:	60a3      	str	r3, [r4, #8]
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	e7db      	b.n	80041cc <__ssputs_r+0x58>
 8004214:	462a      	mov	r2, r5
 8004216:	f000 fb7b 	bl	8004910 <_realloc_r>
 800421a:	4606      	mov	r6, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	d1e1      	bne.n	80041e4 <__ssputs_r+0x70>
 8004220:	4650      	mov	r0, sl
 8004222:	6921      	ldr	r1, [r4, #16]
 8004224:	f000 face 	bl	80047c4 <_free_r>
 8004228:	e7c7      	b.n	80041ba <__ssputs_r+0x46>
	...

0800422c <_svfiprintf_r>:
 800422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004230:	4698      	mov	r8, r3
 8004232:	898b      	ldrh	r3, [r1, #12]
 8004234:	4607      	mov	r7, r0
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	460d      	mov	r5, r1
 800423a:	4614      	mov	r4, r2
 800423c:	b09d      	sub	sp, #116	; 0x74
 800423e:	d50e      	bpl.n	800425e <_svfiprintf_r+0x32>
 8004240:	690b      	ldr	r3, [r1, #16]
 8004242:	b963      	cbnz	r3, 800425e <_svfiprintf_r+0x32>
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	f000 fb09 	bl	800485c <_malloc_r>
 800424a:	6028      	str	r0, [r5, #0]
 800424c:	6128      	str	r0, [r5, #16]
 800424e:	b920      	cbnz	r0, 800425a <_svfiprintf_r+0x2e>
 8004250:	230c      	movs	r3, #12
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e0d1      	b.n	80043fe <_svfiprintf_r+0x1d2>
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	616b      	str	r3, [r5, #20]
 800425e:	2300      	movs	r3, #0
 8004260:	9309      	str	r3, [sp, #36]	; 0x24
 8004262:	2320      	movs	r3, #32
 8004264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004268:	2330      	movs	r3, #48	; 0x30
 800426a:	f04f 0901 	mov.w	r9, #1
 800426e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004418 <_svfiprintf_r+0x1ec>
 8004276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800427a:	4623      	mov	r3, r4
 800427c:	469a      	mov	sl, r3
 800427e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004282:	b10a      	cbz	r2, 8004288 <_svfiprintf_r+0x5c>
 8004284:	2a25      	cmp	r2, #37	; 0x25
 8004286:	d1f9      	bne.n	800427c <_svfiprintf_r+0x50>
 8004288:	ebba 0b04 	subs.w	fp, sl, r4
 800428c:	d00b      	beq.n	80042a6 <_svfiprintf_r+0x7a>
 800428e:	465b      	mov	r3, fp
 8004290:	4622      	mov	r2, r4
 8004292:	4629      	mov	r1, r5
 8004294:	4638      	mov	r0, r7
 8004296:	f7ff ff6d 	bl	8004174 <__ssputs_r>
 800429a:	3001      	adds	r0, #1
 800429c:	f000 80aa 	beq.w	80043f4 <_svfiprintf_r+0x1c8>
 80042a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a2:	445a      	add	r2, fp
 80042a4:	9209      	str	r2, [sp, #36]	; 0x24
 80042a6:	f89a 3000 	ldrb.w	r3, [sl]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a2 	beq.w	80043f4 <_svfiprintf_r+0x1c8>
 80042b0:	2300      	movs	r3, #0
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295
 80042b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ba:	f10a 0a01 	add.w	sl, sl, #1
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	9307      	str	r3, [sp, #28]
 80042c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042c6:	931a      	str	r3, [sp, #104]	; 0x68
 80042c8:	4654      	mov	r4, sl
 80042ca:	2205      	movs	r2, #5
 80042cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d0:	4851      	ldr	r0, [pc, #324]	; (8004418 <_svfiprintf_r+0x1ec>)
 80042d2:	f000 fa41 	bl	8004758 <memchr>
 80042d6:	9a04      	ldr	r2, [sp, #16]
 80042d8:	b9d8      	cbnz	r0, 8004312 <_svfiprintf_r+0xe6>
 80042da:	06d0      	lsls	r0, r2, #27
 80042dc:	bf44      	itt	mi
 80042de:	2320      	movmi	r3, #32
 80042e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e4:	0711      	lsls	r1, r2, #28
 80042e6:	bf44      	itt	mi
 80042e8:	232b      	movmi	r3, #43	; 0x2b
 80042ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ee:	f89a 3000 	ldrb.w	r3, [sl]
 80042f2:	2b2a      	cmp	r3, #42	; 0x2a
 80042f4:	d015      	beq.n	8004322 <_svfiprintf_r+0xf6>
 80042f6:	4654      	mov	r4, sl
 80042f8:	2000      	movs	r0, #0
 80042fa:	f04f 0c0a 	mov.w	ip, #10
 80042fe:	9a07      	ldr	r2, [sp, #28]
 8004300:	4621      	mov	r1, r4
 8004302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004306:	3b30      	subs	r3, #48	; 0x30
 8004308:	2b09      	cmp	r3, #9
 800430a:	d94e      	bls.n	80043aa <_svfiprintf_r+0x17e>
 800430c:	b1b0      	cbz	r0, 800433c <_svfiprintf_r+0x110>
 800430e:	9207      	str	r2, [sp, #28]
 8004310:	e014      	b.n	800433c <_svfiprintf_r+0x110>
 8004312:	eba0 0308 	sub.w	r3, r0, r8
 8004316:	fa09 f303 	lsl.w	r3, r9, r3
 800431a:	4313      	orrs	r3, r2
 800431c:	46a2      	mov	sl, r4
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	e7d2      	b.n	80042c8 <_svfiprintf_r+0x9c>
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	9103      	str	r1, [sp, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfbb      	ittet	lt
 800432e:	425b      	neglt	r3, r3
 8004330:	f042 0202 	orrlt.w	r2, r2, #2
 8004334:	9307      	strge	r3, [sp, #28]
 8004336:	9307      	strlt	r3, [sp, #28]
 8004338:	bfb8      	it	lt
 800433a:	9204      	strlt	r2, [sp, #16]
 800433c:	7823      	ldrb	r3, [r4, #0]
 800433e:	2b2e      	cmp	r3, #46	; 0x2e
 8004340:	d10c      	bne.n	800435c <_svfiprintf_r+0x130>
 8004342:	7863      	ldrb	r3, [r4, #1]
 8004344:	2b2a      	cmp	r3, #42	; 0x2a
 8004346:	d135      	bne.n	80043b4 <_svfiprintf_r+0x188>
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	3402      	adds	r4, #2
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	9203      	str	r2, [sp, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfb8      	it	lt
 8004356:	f04f 33ff 	movlt.w	r3, #4294967295
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004428 <_svfiprintf_r+0x1fc>
 8004360:	2203      	movs	r2, #3
 8004362:	4650      	mov	r0, sl
 8004364:	7821      	ldrb	r1, [r4, #0]
 8004366:	f000 f9f7 	bl	8004758 <memchr>
 800436a:	b140      	cbz	r0, 800437e <_svfiprintf_r+0x152>
 800436c:	2340      	movs	r3, #64	; 0x40
 800436e:	eba0 000a 	sub.w	r0, r0, sl
 8004372:	fa03 f000 	lsl.w	r0, r3, r0
 8004376:	9b04      	ldr	r3, [sp, #16]
 8004378:	3401      	adds	r4, #1
 800437a:	4303      	orrs	r3, r0
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004382:	2206      	movs	r2, #6
 8004384:	4825      	ldr	r0, [pc, #148]	; (800441c <_svfiprintf_r+0x1f0>)
 8004386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800438a:	f000 f9e5 	bl	8004758 <memchr>
 800438e:	2800      	cmp	r0, #0
 8004390:	d038      	beq.n	8004404 <_svfiprintf_r+0x1d8>
 8004392:	4b23      	ldr	r3, [pc, #140]	; (8004420 <_svfiprintf_r+0x1f4>)
 8004394:	bb1b      	cbnz	r3, 80043de <_svfiprintf_r+0x1b2>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	3307      	adds	r3, #7
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	3308      	adds	r3, #8
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a4:	4433      	add	r3, r6
 80043a6:	9309      	str	r3, [sp, #36]	; 0x24
 80043a8:	e767      	b.n	800427a <_svfiprintf_r+0x4e>
 80043aa:	460c      	mov	r4, r1
 80043ac:	2001      	movs	r0, #1
 80043ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b2:	e7a5      	b.n	8004300 <_svfiprintf_r+0xd4>
 80043b4:	2300      	movs	r3, #0
 80043b6:	f04f 0c0a 	mov.w	ip, #10
 80043ba:	4619      	mov	r1, r3
 80043bc:	3401      	adds	r4, #1
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	4620      	mov	r0, r4
 80043c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c6:	3a30      	subs	r2, #48	; 0x30
 80043c8:	2a09      	cmp	r2, #9
 80043ca:	d903      	bls.n	80043d4 <_svfiprintf_r+0x1a8>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0c5      	beq.n	800435c <_svfiprintf_r+0x130>
 80043d0:	9105      	str	r1, [sp, #20]
 80043d2:	e7c3      	b.n	800435c <_svfiprintf_r+0x130>
 80043d4:	4604      	mov	r4, r0
 80043d6:	2301      	movs	r3, #1
 80043d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043dc:	e7f0      	b.n	80043c0 <_svfiprintf_r+0x194>
 80043de:	ab03      	add	r3, sp, #12
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	462a      	mov	r2, r5
 80043e4:	4638      	mov	r0, r7
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <_svfiprintf_r+0x1f8>)
 80043e8:	a904      	add	r1, sp, #16
 80043ea:	f3af 8000 	nop.w
 80043ee:	1c42      	adds	r2, r0, #1
 80043f0:	4606      	mov	r6, r0
 80043f2:	d1d6      	bne.n	80043a2 <_svfiprintf_r+0x176>
 80043f4:	89ab      	ldrh	r3, [r5, #12]
 80043f6:	065b      	lsls	r3, r3, #25
 80043f8:	f53f af2c 	bmi.w	8004254 <_svfiprintf_r+0x28>
 80043fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043fe:	b01d      	add	sp, #116	; 0x74
 8004400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004404:	ab03      	add	r3, sp, #12
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	462a      	mov	r2, r5
 800440a:	4638      	mov	r0, r7
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <_svfiprintf_r+0x1f8>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	f000 f87c 	bl	800450c <_printf_i>
 8004414:	e7eb      	b.n	80043ee <_svfiprintf_r+0x1c2>
 8004416:	bf00      	nop
 8004418:	080049f4 	.word	0x080049f4
 800441c:	080049fe 	.word	0x080049fe
 8004420:	00000000 	.word	0x00000000
 8004424:	08004175 	.word	0x08004175
 8004428:	080049fa 	.word	0x080049fa

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4616      	mov	r6, r2
 8004432:	4699      	mov	r9, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	4607      	mov	r7, r0
 800443a:	4293      	cmp	r3, r2
 800443c:	bfb8      	it	lt
 800443e:	4613      	movlt	r3, r2
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004446:	460c      	mov	r4, r1
 8004448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800444c:	b10a      	cbz	r2, 8004452 <_printf_common+0x26>
 800444e:	3301      	adds	r3, #1
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	0699      	lsls	r1, r3, #26
 8004456:	bf42      	ittt	mi
 8004458:	6833      	ldrmi	r3, [r6, #0]
 800445a:	3302      	addmi	r3, #2
 800445c:	6033      	strmi	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	f015 0506 	ands.w	r5, r5, #6
 8004464:	d106      	bne.n	8004474 <_printf_common+0x48>
 8004466:	f104 0a19 	add.w	sl, r4, #25
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	42ab      	cmp	r3, r5
 8004472:	dc28      	bgt.n	80044c6 <_printf_common+0x9a>
 8004474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004478:	1e13      	subs	r3, r2, #0
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	0692      	lsls	r2, r2, #26
 8004482:	d42d      	bmi.n	80044e0 <_printf_common+0xb4>
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d020      	beq.n	80044d4 <_printf_common+0xa8>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	68e5      	ldr	r5, [r4, #12]
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf18      	it	ne
 800449e:	2500      	movne	r5, #0
 80044a0:	6832      	ldr	r2, [r6, #0]
 80044a2:	f04f 0600 	mov.w	r6, #0
 80044a6:	68a3      	ldr	r3, [r4, #8]
 80044a8:	bf08      	it	eq
 80044aa:	1aad      	subeq	r5, r5, r2
 80044ac:	6922      	ldr	r2, [r4, #16]
 80044ae:	bf08      	it	eq
 80044b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bfc4      	itt	gt
 80044b8:	1a9b      	subgt	r3, r3, r2
 80044ba:	18ed      	addgt	r5, r5, r3
 80044bc:	341a      	adds	r4, #26
 80044be:	42b5      	cmp	r5, r6
 80044c0:	d11a      	bne.n	80044f8 <_printf_common+0xcc>
 80044c2:	2000      	movs	r0, #0
 80044c4:	e008      	b.n	80044d8 <_printf_common+0xac>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4652      	mov	r2, sl
 80044ca:	4649      	mov	r1, r9
 80044cc:	4638      	mov	r0, r7
 80044ce:	47c0      	blx	r8
 80044d0:	3001      	adds	r0, #1
 80044d2:	d103      	bne.n	80044dc <_printf_common+0xb0>
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044dc:	3501      	adds	r5, #1
 80044de:	e7c4      	b.n	800446a <_printf_common+0x3e>
 80044e0:	2030      	movs	r0, #48	; 0x30
 80044e2:	18e1      	adds	r1, r4, r3
 80044e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ee:	4422      	add	r2, r4
 80044f0:	3302      	adds	r3, #2
 80044f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f6:	e7c5      	b.n	8004484 <_printf_common+0x58>
 80044f8:	2301      	movs	r3, #1
 80044fa:	4622      	mov	r2, r4
 80044fc:	4649      	mov	r1, r9
 80044fe:	4638      	mov	r0, r7
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d0e6      	beq.n	80044d4 <_printf_common+0xa8>
 8004506:	3601      	adds	r6, #1
 8004508:	e7d9      	b.n	80044be <_printf_common+0x92>
	...

0800450c <_printf_i>:
 800450c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	460c      	mov	r4, r1
 8004512:	7e27      	ldrb	r7, [r4, #24]
 8004514:	4691      	mov	r9, r2
 8004516:	2f78      	cmp	r7, #120	; 0x78
 8004518:	4680      	mov	r8, r0
 800451a:	469a      	mov	sl, r3
 800451c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800451e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004522:	d807      	bhi.n	8004534 <_printf_i+0x28>
 8004524:	2f62      	cmp	r7, #98	; 0x62
 8004526:	d80a      	bhi.n	800453e <_printf_i+0x32>
 8004528:	2f00      	cmp	r7, #0
 800452a:	f000 80d9 	beq.w	80046e0 <_printf_i+0x1d4>
 800452e:	2f58      	cmp	r7, #88	; 0x58
 8004530:	f000 80a4 	beq.w	800467c <_printf_i+0x170>
 8004534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800453c:	e03a      	b.n	80045b4 <_printf_i+0xa8>
 800453e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004542:	2b15      	cmp	r3, #21
 8004544:	d8f6      	bhi.n	8004534 <_printf_i+0x28>
 8004546:	a001      	add	r0, pc, #4	; (adr r0, 800454c <_printf_i+0x40>)
 8004548:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800454c:	080045a5 	.word	0x080045a5
 8004550:	080045b9 	.word	0x080045b9
 8004554:	08004535 	.word	0x08004535
 8004558:	08004535 	.word	0x08004535
 800455c:	08004535 	.word	0x08004535
 8004560:	08004535 	.word	0x08004535
 8004564:	080045b9 	.word	0x080045b9
 8004568:	08004535 	.word	0x08004535
 800456c:	08004535 	.word	0x08004535
 8004570:	08004535 	.word	0x08004535
 8004574:	08004535 	.word	0x08004535
 8004578:	080046c7 	.word	0x080046c7
 800457c:	080045e9 	.word	0x080045e9
 8004580:	080046a9 	.word	0x080046a9
 8004584:	08004535 	.word	0x08004535
 8004588:	08004535 	.word	0x08004535
 800458c:	080046e9 	.word	0x080046e9
 8004590:	08004535 	.word	0x08004535
 8004594:	080045e9 	.word	0x080045e9
 8004598:	08004535 	.word	0x08004535
 800459c:	08004535 	.word	0x08004535
 80045a0:	080046b1 	.word	0x080046b1
 80045a4:	680b      	ldr	r3, [r1, #0]
 80045a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	600a      	str	r2, [r1, #0]
 80045b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0a4      	b.n	8004702 <_printf_i+0x1f6>
 80045b8:	6825      	ldr	r5, [r4, #0]
 80045ba:	6808      	ldr	r0, [r1, #0]
 80045bc:	062e      	lsls	r6, r5, #24
 80045be:	f100 0304 	add.w	r3, r0, #4
 80045c2:	d50a      	bpl.n	80045da <_printf_i+0xce>
 80045c4:	6805      	ldr	r5, [r0, #0]
 80045c6:	600b      	str	r3, [r1, #0]
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	da03      	bge.n	80045d4 <_printf_i+0xc8>
 80045cc:	232d      	movs	r3, #45	; 0x2d
 80045ce:	426d      	negs	r5, r5
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d4:	230a      	movs	r3, #10
 80045d6:	485e      	ldr	r0, [pc, #376]	; (8004750 <_printf_i+0x244>)
 80045d8:	e019      	b.n	800460e <_printf_i+0x102>
 80045da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045de:	6805      	ldr	r5, [r0, #0]
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	bf18      	it	ne
 80045e4:	b22d      	sxthne	r5, r5
 80045e6:	e7ef      	b.n	80045c8 <_printf_i+0xbc>
 80045e8:	680b      	ldr	r3, [r1, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	1d18      	adds	r0, r3, #4
 80045ee:	6008      	str	r0, [r1, #0]
 80045f0:	0628      	lsls	r0, r5, #24
 80045f2:	d501      	bpl.n	80045f8 <_printf_i+0xec>
 80045f4:	681d      	ldr	r5, [r3, #0]
 80045f6:	e002      	b.n	80045fe <_printf_i+0xf2>
 80045f8:	0669      	lsls	r1, r5, #25
 80045fa:	d5fb      	bpl.n	80045f4 <_printf_i+0xe8>
 80045fc:	881d      	ldrh	r5, [r3, #0]
 80045fe:	2f6f      	cmp	r7, #111	; 0x6f
 8004600:	bf0c      	ite	eq
 8004602:	2308      	moveq	r3, #8
 8004604:	230a      	movne	r3, #10
 8004606:	4852      	ldr	r0, [pc, #328]	; (8004750 <_printf_i+0x244>)
 8004608:	2100      	movs	r1, #0
 800460a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800460e:	6866      	ldr	r6, [r4, #4]
 8004610:	2e00      	cmp	r6, #0
 8004612:	bfa8      	it	ge
 8004614:	6821      	ldrge	r1, [r4, #0]
 8004616:	60a6      	str	r6, [r4, #8]
 8004618:	bfa4      	itt	ge
 800461a:	f021 0104 	bicge.w	r1, r1, #4
 800461e:	6021      	strge	r1, [r4, #0]
 8004620:	b90d      	cbnz	r5, 8004626 <_printf_i+0x11a>
 8004622:	2e00      	cmp	r6, #0
 8004624:	d04d      	beq.n	80046c2 <_printf_i+0x1b6>
 8004626:	4616      	mov	r6, r2
 8004628:	fbb5 f1f3 	udiv	r1, r5, r3
 800462c:	fb03 5711 	mls	r7, r3, r1, r5
 8004630:	5dc7      	ldrb	r7, [r0, r7]
 8004632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004636:	462f      	mov	r7, r5
 8004638:	42bb      	cmp	r3, r7
 800463a:	460d      	mov	r5, r1
 800463c:	d9f4      	bls.n	8004628 <_printf_i+0x11c>
 800463e:	2b08      	cmp	r3, #8
 8004640:	d10b      	bne.n	800465a <_printf_i+0x14e>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	07df      	lsls	r7, r3, #31
 8004646:	d508      	bpl.n	800465a <_printf_i+0x14e>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	6861      	ldr	r1, [r4, #4]
 800464c:	4299      	cmp	r1, r3
 800464e:	bfde      	ittt	le
 8004650:	2330      	movle	r3, #48	; 0x30
 8004652:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004656:	f106 36ff 	addle.w	r6, r6, #4294967295
 800465a:	1b92      	subs	r2, r2, r6
 800465c:	6122      	str	r2, [r4, #16]
 800465e:	464b      	mov	r3, r9
 8004660:	4621      	mov	r1, r4
 8004662:	4640      	mov	r0, r8
 8004664:	f8cd a000 	str.w	sl, [sp]
 8004668:	aa03      	add	r2, sp, #12
 800466a:	f7ff fedf 	bl	800442c <_printf_common>
 800466e:	3001      	adds	r0, #1
 8004670:	d14c      	bne.n	800470c <_printf_i+0x200>
 8004672:	f04f 30ff 	mov.w	r0, #4294967295
 8004676:	b004      	add	sp, #16
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	4834      	ldr	r0, [pc, #208]	; (8004750 <_printf_i+0x244>)
 800467e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004682:	680e      	ldr	r6, [r1, #0]
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f856 5b04 	ldr.w	r5, [r6], #4
 800468a:	061f      	lsls	r7, r3, #24
 800468c:	600e      	str	r6, [r1, #0]
 800468e:	d514      	bpl.n	80046ba <_printf_i+0x1ae>
 8004690:	07d9      	lsls	r1, r3, #31
 8004692:	bf44      	itt	mi
 8004694:	f043 0320 	orrmi.w	r3, r3, #32
 8004698:	6023      	strmi	r3, [r4, #0]
 800469a:	b91d      	cbnz	r5, 80046a4 <_printf_i+0x198>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f023 0320 	bic.w	r3, r3, #32
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	2310      	movs	r3, #16
 80046a6:	e7af      	b.n	8004608 <_printf_i+0xfc>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	f043 0320 	orr.w	r3, r3, #32
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	2378      	movs	r3, #120	; 0x78
 80046b2:	4828      	ldr	r0, [pc, #160]	; (8004754 <_printf_i+0x248>)
 80046b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046b8:	e7e3      	b.n	8004682 <_printf_i+0x176>
 80046ba:	065e      	lsls	r6, r3, #25
 80046bc:	bf48      	it	mi
 80046be:	b2ad      	uxthmi	r5, r5
 80046c0:	e7e6      	b.n	8004690 <_printf_i+0x184>
 80046c2:	4616      	mov	r6, r2
 80046c4:	e7bb      	b.n	800463e <_printf_i+0x132>
 80046c6:	680b      	ldr	r3, [r1, #0]
 80046c8:	6826      	ldr	r6, [r4, #0]
 80046ca:	1d1d      	adds	r5, r3, #4
 80046cc:	6960      	ldr	r0, [r4, #20]
 80046ce:	600d      	str	r5, [r1, #0]
 80046d0:	0635      	lsls	r5, r6, #24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	d501      	bpl.n	80046da <_printf_i+0x1ce>
 80046d6:	6018      	str	r0, [r3, #0]
 80046d8:	e002      	b.n	80046e0 <_printf_i+0x1d4>
 80046da:	0671      	lsls	r1, r6, #25
 80046dc:	d5fb      	bpl.n	80046d6 <_printf_i+0x1ca>
 80046de:	8018      	strh	r0, [r3, #0]
 80046e0:	2300      	movs	r3, #0
 80046e2:	4616      	mov	r6, r2
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	e7ba      	b.n	800465e <_printf_i+0x152>
 80046e8:	680b      	ldr	r3, [r1, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	600a      	str	r2, [r1, #0]
 80046ee:	681e      	ldr	r6, [r3, #0]
 80046f0:	2100      	movs	r1, #0
 80046f2:	4630      	mov	r0, r6
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	f000 f82f 	bl	8004758 <memchr>
 80046fa:	b108      	cbz	r0, 8004700 <_printf_i+0x1f4>
 80046fc:	1b80      	subs	r0, r0, r6
 80046fe:	6060      	str	r0, [r4, #4]
 8004700:	6863      	ldr	r3, [r4, #4]
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	2300      	movs	r3, #0
 8004706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800470a:	e7a8      	b.n	800465e <_printf_i+0x152>
 800470c:	4632      	mov	r2, r6
 800470e:	4649      	mov	r1, r9
 8004710:	4640      	mov	r0, r8
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	47d0      	blx	sl
 8004716:	3001      	adds	r0, #1
 8004718:	d0ab      	beq.n	8004672 <_printf_i+0x166>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	079b      	lsls	r3, r3, #30
 800471e:	d413      	bmi.n	8004748 <_printf_i+0x23c>
 8004720:	68e0      	ldr	r0, [r4, #12]
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	4298      	cmp	r0, r3
 8004726:	bfb8      	it	lt
 8004728:	4618      	movlt	r0, r3
 800472a:	e7a4      	b.n	8004676 <_printf_i+0x16a>
 800472c:	2301      	movs	r3, #1
 800472e:	4632      	mov	r2, r6
 8004730:	4649      	mov	r1, r9
 8004732:	4640      	mov	r0, r8
 8004734:	47d0      	blx	sl
 8004736:	3001      	adds	r0, #1
 8004738:	d09b      	beq.n	8004672 <_printf_i+0x166>
 800473a:	3501      	adds	r5, #1
 800473c:	68e3      	ldr	r3, [r4, #12]
 800473e:	9903      	ldr	r1, [sp, #12]
 8004740:	1a5b      	subs	r3, r3, r1
 8004742:	42ab      	cmp	r3, r5
 8004744:	dcf2      	bgt.n	800472c <_printf_i+0x220>
 8004746:	e7eb      	b.n	8004720 <_printf_i+0x214>
 8004748:	2500      	movs	r5, #0
 800474a:	f104 0619 	add.w	r6, r4, #25
 800474e:	e7f5      	b.n	800473c <_printf_i+0x230>
 8004750:	08004a05 	.word	0x08004a05
 8004754:	08004a16 	.word	0x08004a16

08004758 <memchr>:
 8004758:	4603      	mov	r3, r0
 800475a:	b510      	push	{r4, lr}
 800475c:	b2c9      	uxtb	r1, r1
 800475e:	4402      	add	r2, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	4618      	mov	r0, r3
 8004764:	d101      	bne.n	800476a <memchr+0x12>
 8004766:	2000      	movs	r0, #0
 8004768:	e003      	b.n	8004772 <memchr+0x1a>
 800476a:	7804      	ldrb	r4, [r0, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	428c      	cmp	r4, r1
 8004770:	d1f6      	bne.n	8004760 <memchr+0x8>
 8004772:	bd10      	pop	{r4, pc}

08004774 <memcpy>:
 8004774:	440a      	add	r2, r1
 8004776:	4291      	cmp	r1, r2
 8004778:	f100 33ff 	add.w	r3, r0, #4294967295
 800477c:	d100      	bne.n	8004780 <memcpy+0xc>
 800477e:	4770      	bx	lr
 8004780:	b510      	push	{r4, lr}
 8004782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004786:	4291      	cmp	r1, r2
 8004788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800478c:	d1f9      	bne.n	8004782 <memcpy+0xe>
 800478e:	bd10      	pop	{r4, pc}

08004790 <memmove>:
 8004790:	4288      	cmp	r0, r1
 8004792:	b510      	push	{r4, lr}
 8004794:	eb01 0402 	add.w	r4, r1, r2
 8004798:	d902      	bls.n	80047a0 <memmove+0x10>
 800479a:	4284      	cmp	r4, r0
 800479c:	4623      	mov	r3, r4
 800479e:	d807      	bhi.n	80047b0 <memmove+0x20>
 80047a0:	1e43      	subs	r3, r0, #1
 80047a2:	42a1      	cmp	r1, r4
 80047a4:	d008      	beq.n	80047b8 <memmove+0x28>
 80047a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ae:	e7f8      	b.n	80047a2 <memmove+0x12>
 80047b0:	4601      	mov	r1, r0
 80047b2:	4402      	add	r2, r0
 80047b4:	428a      	cmp	r2, r1
 80047b6:	d100      	bne.n	80047ba <memmove+0x2a>
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047c2:	e7f7      	b.n	80047b4 <memmove+0x24>

080047c4 <_free_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d043      	beq.n	8004854 <_free_r+0x90>
 80047cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d0:	1f0c      	subs	r4, r1, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfb8      	it	lt
 80047d6:	18e4      	addlt	r4, r4, r3
 80047d8:	f000 f8d0 	bl	800497c <__malloc_lock>
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <_free_r+0x94>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	4610      	mov	r0, r2
 80047e2:	b933      	cbnz	r3, 80047f2 <_free_r+0x2e>
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6014      	str	r4, [r2, #0]
 80047e8:	4628      	mov	r0, r5
 80047ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ee:	f000 b8cb 	b.w	8004988 <__malloc_unlock>
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	d90a      	bls.n	800480c <_free_r+0x48>
 80047f6:	6821      	ldr	r1, [r4, #0]
 80047f8:	1862      	adds	r2, r4, r1
 80047fa:	4293      	cmp	r3, r2
 80047fc:	bf01      	itttt	eq
 80047fe:	681a      	ldreq	r2, [r3, #0]
 8004800:	685b      	ldreq	r3, [r3, #4]
 8004802:	1852      	addeq	r2, r2, r1
 8004804:	6022      	streq	r2, [r4, #0]
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6004      	str	r4, [r0, #0]
 800480a:	e7ed      	b.n	80047e8 <_free_r+0x24>
 800480c:	461a      	mov	r2, r3
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	b10b      	cbz	r3, 8004816 <_free_r+0x52>
 8004812:	42a3      	cmp	r3, r4
 8004814:	d9fa      	bls.n	800480c <_free_r+0x48>
 8004816:	6811      	ldr	r1, [r2, #0]
 8004818:	1850      	adds	r0, r2, r1
 800481a:	42a0      	cmp	r0, r4
 800481c:	d10b      	bne.n	8004836 <_free_r+0x72>
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	4401      	add	r1, r0
 8004822:	1850      	adds	r0, r2, r1
 8004824:	4283      	cmp	r3, r0
 8004826:	6011      	str	r1, [r2, #0]
 8004828:	d1de      	bne.n	80047e8 <_free_r+0x24>
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4401      	add	r1, r0
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	6053      	str	r3, [r2, #4]
 8004834:	e7d8      	b.n	80047e8 <_free_r+0x24>
 8004836:	d902      	bls.n	800483e <_free_r+0x7a>
 8004838:	230c      	movs	r3, #12
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	e7d4      	b.n	80047e8 <_free_r+0x24>
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1821      	adds	r1, r4, r0
 8004842:	428b      	cmp	r3, r1
 8004844:	bf01      	itttt	eq
 8004846:	6819      	ldreq	r1, [r3, #0]
 8004848:	685b      	ldreq	r3, [r3, #4]
 800484a:	1809      	addeq	r1, r1, r0
 800484c:	6021      	streq	r1, [r4, #0]
 800484e:	6063      	str	r3, [r4, #4]
 8004850:	6054      	str	r4, [r2, #4]
 8004852:	e7c9      	b.n	80047e8 <_free_r+0x24>
 8004854:	bd38      	pop	{r3, r4, r5, pc}
 8004856:	bf00      	nop
 8004858:	2000015c 	.word	0x2000015c

0800485c <_malloc_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	1ccd      	adds	r5, r1, #3
 8004860:	f025 0503 	bic.w	r5, r5, #3
 8004864:	3508      	adds	r5, #8
 8004866:	2d0c      	cmp	r5, #12
 8004868:	bf38      	it	cc
 800486a:	250c      	movcc	r5, #12
 800486c:	2d00      	cmp	r5, #0
 800486e:	4606      	mov	r6, r0
 8004870:	db01      	blt.n	8004876 <_malloc_r+0x1a>
 8004872:	42a9      	cmp	r1, r5
 8004874:	d903      	bls.n	800487e <_malloc_r+0x22>
 8004876:	230c      	movs	r3, #12
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	2000      	movs	r0, #0
 800487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487e:	f000 f87d 	bl	800497c <__malloc_lock>
 8004882:	4921      	ldr	r1, [pc, #132]	; (8004908 <_malloc_r+0xac>)
 8004884:	680a      	ldr	r2, [r1, #0]
 8004886:	4614      	mov	r4, r2
 8004888:	b99c      	cbnz	r4, 80048b2 <_malloc_r+0x56>
 800488a:	4f20      	ldr	r7, [pc, #128]	; (800490c <_malloc_r+0xb0>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b923      	cbnz	r3, 800489a <_malloc_r+0x3e>
 8004890:	4621      	mov	r1, r4
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f862 	bl	800495c <_sbrk_r>
 8004898:	6038      	str	r0, [r7, #0]
 800489a:	4629      	mov	r1, r5
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f85d 	bl	800495c <_sbrk_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d123      	bne.n	80048ee <_malloc_r+0x92>
 80048a6:	230c      	movs	r3, #12
 80048a8:	4630      	mov	r0, r6
 80048aa:	6033      	str	r3, [r6, #0]
 80048ac:	f000 f86c 	bl	8004988 <__malloc_unlock>
 80048b0:	e7e3      	b.n	800487a <_malloc_r+0x1e>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1b5b      	subs	r3, r3, r5
 80048b6:	d417      	bmi.n	80048e8 <_malloc_r+0x8c>
 80048b8:	2b0b      	cmp	r3, #11
 80048ba:	d903      	bls.n	80048c4 <_malloc_r+0x68>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	441c      	add	r4, r3
 80048c0:	6025      	str	r5, [r4, #0]
 80048c2:	e004      	b.n	80048ce <_malloc_r+0x72>
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	42a2      	cmp	r2, r4
 80048c8:	bf0c      	ite	eq
 80048ca:	600b      	streq	r3, [r1, #0]
 80048cc:	6053      	strne	r3, [r2, #4]
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f85a 	bl	8004988 <__malloc_unlock>
 80048d4:	f104 000b 	add.w	r0, r4, #11
 80048d8:	1d23      	adds	r3, r4, #4
 80048da:	f020 0007 	bic.w	r0, r0, #7
 80048de:	1ac2      	subs	r2, r0, r3
 80048e0:	d0cc      	beq.n	800487c <_malloc_r+0x20>
 80048e2:	1a1b      	subs	r3, r3, r0
 80048e4:	50a3      	str	r3, [r4, r2]
 80048e6:	e7c9      	b.n	800487c <_malloc_r+0x20>
 80048e8:	4622      	mov	r2, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7cc      	b.n	8004888 <_malloc_r+0x2c>
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0e3      	beq.n	80048c0 <_malloc_r+0x64>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4630      	mov	r0, r6
 80048fc:	f000 f82e 	bl	800495c <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1dd      	bne.n	80048c0 <_malloc_r+0x64>
 8004904:	e7cf      	b.n	80048a6 <_malloc_r+0x4a>
 8004906:	bf00      	nop
 8004908:	2000015c 	.word	0x2000015c
 800490c:	20000160 	.word	0x20000160

08004910 <_realloc_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	4607      	mov	r7, r0
 8004914:	4614      	mov	r4, r2
 8004916:	460e      	mov	r6, r1
 8004918:	b921      	cbnz	r1, 8004924 <_realloc_r+0x14>
 800491a:	4611      	mov	r1, r2
 800491c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004920:	f7ff bf9c 	b.w	800485c <_malloc_r>
 8004924:	b922      	cbnz	r2, 8004930 <_realloc_r+0x20>
 8004926:	f7ff ff4d 	bl	80047c4 <_free_r>
 800492a:	4625      	mov	r5, r4
 800492c:	4628      	mov	r0, r5
 800492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004930:	f000 f830 	bl	8004994 <_malloc_usable_size_r>
 8004934:	42a0      	cmp	r0, r4
 8004936:	d20f      	bcs.n	8004958 <_realloc_r+0x48>
 8004938:	4621      	mov	r1, r4
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff ff8e 	bl	800485c <_malloc_r>
 8004940:	4605      	mov	r5, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0f2      	beq.n	800492c <_realloc_r+0x1c>
 8004946:	4631      	mov	r1, r6
 8004948:	4622      	mov	r2, r4
 800494a:	f7ff ff13 	bl	8004774 <memcpy>
 800494e:	4631      	mov	r1, r6
 8004950:	4638      	mov	r0, r7
 8004952:	f7ff ff37 	bl	80047c4 <_free_r>
 8004956:	e7e9      	b.n	800492c <_realloc_r+0x1c>
 8004958:	4635      	mov	r5, r6
 800495a:	e7e7      	b.n	800492c <_realloc_r+0x1c>

0800495c <_sbrk_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	2300      	movs	r3, #0
 8004960:	4d05      	ldr	r5, [pc, #20]	; (8004978 <_sbrk_r+0x1c>)
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	f7fd f9a0 	bl	8001cac <_sbrk>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_sbrk_r+0x1a>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_sbrk_r+0x1a>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	20000590 	.word	0x20000590

0800497c <__malloc_lock>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__malloc_lock+0x8>)
 800497e:	f000 b811 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	20000598 	.word	0x20000598

08004988 <__malloc_unlock>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__malloc_unlock+0x8>)
 800498a:	f000 b80c 	b.w	80049a6 <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	20000598 	.word	0x20000598

08004994 <_malloc_usable_size_r>:
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f18      	subs	r0, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbc      	itt	lt
 800499e:	580b      	ldrlt	r3, [r1, r0]
 80049a0:	18c0      	addlt	r0, r0, r3
 80049a2:	4770      	bx	lr

080049a4 <__retarget_lock_acquire_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_release_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <_init>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	bf00      	nop
 80049ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ae:	bc08      	pop	{r3}
 80049b0:	469e      	mov	lr, r3
 80049b2:	4770      	bx	lr

080049b4 <_fini>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr
