
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08003d90  08003d90  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d90  08003d90  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08003d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200000ac  08003e44  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08003e44  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7da  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d3  00000000  00000000  0002e8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00030d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00031b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ae  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e863  00000000  00000000  0004b046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6c9  00000000  00000000  000598a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  000e4fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d10 	.word	0x08003d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08003d10 	.word	0x08003d10

0800014c <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <updateDisplay+0x34>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <updateDisplay+0x38>)
 8000156:	fb82 1203 	smull	r1, r2, r2, r3
 800015a:	1192      	asrs	r2, r2, #6
 800015c:	17db      	asrs	r3, r3, #31
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	461a      	mov	r2, r3
 8000162:	4909      	ldr	r1, [pc, #36]	; (8000188 <updateDisplay+0x3c>)
 8000164:	4809      	ldr	r0, [pc, #36]	; (800018c <updateDisplay+0x40>)
 8000166:	f003 f999 	bl	800349c <siprintf>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	4906      	ldr	r1, [pc, #24]	; (800018c <updateDisplay+0x40>)
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <updateDisplay+0x44>)
 8000176:	f002 fff4 	bl	8003162 <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	2000000c 	.word	0x2000000c
 8000184:	10624dd3 	.word	0x10624dd3
 8000188:	08003d28 	.word	0x08003d28
 800018c:	20000148 	.word	0x20000148
 8000190:	2000020c 	.word	0x2000020c

08000194 <WhichButtonIsPressed>:
#include "traffic_light.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fb6b 	bl	8000874 <is_button_pressed>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <WhichButtonIsPressed+0x14>
 80001a4:	2301      	movs	r3, #1
 80001a6:	e010      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fb63 	bl	8000874 <is_button_pressed>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <WhichButtonIsPressed+0x24>
 80001b4:	2302      	movs	r3, #2
 80001b6:	e008      	b.n	80001ca <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 80001b8:	2002      	movs	r0, #2
 80001ba:	f000 fb5b 	bl	8000874 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <WhichButtonIsPressed+0x34>
 80001c4:	2303      	movs	r3, #3
 80001c6:	e000      	b.n	80001ca <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 80001c8:	2300      	movs	r3, #0
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	bd80      	pop	{r7, pc}

080001ce <clear_vertical>:

void clear_vertical() {
 80001ce:	b580      	push	{r7, lr}
 80001d0:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_1_LED);
 80001d2:	2028      	movs	r0, #40	; 0x28
 80001d4:	f001 f874 	bl	80012c0 <clear_led>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}

080001dc <clear_horizontal>:

void clear_horizontal() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_2_LED);
 80001e0:	2029      	movs	r0, #41	; 0x29
 80001e2:	f001 f86d 	bl	80012c0 <clear_led>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <vertical_processing>:

void vertical_processing() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	clear_vertical();
 80001f0:	f7ff ffed 	bl	80001ce <clear_vertical>
	switch (CURRENT_STATE[0]) {
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <vertical_processing+0x44>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b02      	cmp	r3, #2
 80001fa:	d010      	beq.n	800021e <vertical_processing+0x32>
 80001fc:	2b02      	cmp	r3, #2
 80001fe:	dc13      	bgt.n	8000228 <vertical_processing+0x3c>
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <vertical_processing+0x1e>
 8000204:	2b01      	cmp	r3, #1
 8000206:	d005      	beq.n	8000214 <vertical_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000208:	e00e      	b.n	8000228 <vertical_processing+0x3c>
		set_led_color(TRAFFIC_1_LED, RED_COLOR);
 800020a:	211e      	movs	r1, #30
 800020c:	2028      	movs	r0, #40	; 0x28
 800020e:	f001 f80b 	bl	8001228 <set_led_color>
		break;
 8000212:	e00a      	b.n	800022a <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, AMBER_COLOR);
 8000214:	211f      	movs	r1, #31
 8000216:	2028      	movs	r0, #40	; 0x28
 8000218:	f001 f806 	bl	8001228 <set_led_color>
		break;
 800021c:	e005      	b.n	800022a <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
 800021e:	2120      	movs	r1, #32
 8000220:	2028      	movs	r0, #40	; 0x28
 8000222:	f001 f801 	bl	8001228 <set_led_color>
		break;
 8000226:	e000      	b.n	800022a <vertical_processing+0x3e>
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000004 	.word	0x20000004

08000234 <horizontal_processing>:

void horizontal_processing() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	clear_horizontal();
 8000238:	f7ff ffd0 	bl	80001dc <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <horizontal_processing+0x44>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d010      	beq.n	8000266 <horizontal_processing+0x32>
 8000244:	2b02      	cmp	r3, #2
 8000246:	dc13      	bgt.n	8000270 <horizontal_processing+0x3c>
 8000248:	2b00      	cmp	r3, #0
 800024a:	d002      	beq.n	8000252 <horizontal_processing+0x1e>
 800024c:	2b01      	cmp	r3, #1
 800024e:	d005      	beq.n	800025c <horizontal_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000250:	e00e      	b.n	8000270 <horizontal_processing+0x3c>
		set_led_color(TRAFFIC_2_LED, RED_COLOR);
 8000252:	211e      	movs	r1, #30
 8000254:	2029      	movs	r0, #41	; 0x29
 8000256:	f000 ffe7 	bl	8001228 <set_led_color>
		break;
 800025a:	e00a      	b.n	8000272 <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, AMBER_COLOR);
 800025c:	211f      	movs	r1, #31
 800025e:	2029      	movs	r0, #41	; 0x29
 8000260:	f000 ffe2 	bl	8001228 <set_led_color>
		break;
 8000264:	e005      	b.n	8000272 <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
 8000266:	2120      	movs	r1, #32
 8000268:	2029      	movs	r0, #41	; 0x29
 800026a:	f000 ffdd 	bl	8001228 <set_led_color>
		break;
 800026e:	e000      	b.n	8000272 <horizontal_processing+0x3e>
		break;
 8000270:	bf00      	nop
	}
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004

0800027c <state_update>:

void state_update(int idx) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d11e      	bne.n	80002c8 <state_update+0x4c>
		switch (CURRENT_STATE[idx]) {
 800028a:	4a21      	ldr	r2, [pc, #132]	; (8000310 <state_update+0x94>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d012      	beq.n	80002bc <state_update+0x40>
 8000296:	2b02      	cmp	r3, #2
 8000298:	dc29      	bgt.n	80002ee <state_update+0x72>
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <state_update+0x28>
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d006      	beq.n	80002b0 <state_update+0x34>
			break;
		case 2:
			CURRENT_STATE[idx] = 1;
			break;
		default:
			break;
 80002a2:	e024      	b.n	80002ee <state_update+0x72>
			CURRENT_STATE[idx] = 2;
 80002a4:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <state_update+0x94>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2102      	movs	r1, #2
 80002aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002ae:	e01f      	b.n	80002f0 <state_update+0x74>
			CURRENT_STATE[idx] = 0;
 80002b0:	4a17      	ldr	r2, [pc, #92]	; (8000310 <state_update+0x94>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2100      	movs	r1, #0
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002ba:	e019      	b.n	80002f0 <state_update+0x74>
			CURRENT_STATE[idx] = 1;
 80002bc:	4a14      	ldr	r2, [pc, #80]	; (8000310 <state_update+0x94>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2101      	movs	r1, #1
 80002c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002c6:	e013      	b.n	80002f0 <state_update+0x74>
		}
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <state_update+0x94>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d0:	1c99      	adds	r1, r3, #2
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <state_update+0x98>)
 80002d4:	fb83 3201 	smull	r3, r2, r3, r1
 80002d8:	17cb      	asrs	r3, r1, #31
 80002da:	1ad2      	subs	r2, r2, r3
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	1aca      	subs	r2, r1, r3
 80002e4:	490a      	ldr	r1, [pc, #40]	; (8000310 <state_update+0x94>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002ec:	e000      	b.n	80002f0 <state_update+0x74>
			break;
 80002ee:	bf00      	nop
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <state_update+0x94>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <state_update+0x9c>)
 80002fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fe:	4907      	ldr	r1, [pc, #28]	; (800031c <state_update+0xa0>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000004 	.word	0x20000004
 8000314:	55555556 	.word	0x55555556
 8000318:	20000014 	.word	0x20000014
 800031c:	2000000c 	.word	0x2000000c

08000320 <check_state>:

void check_state() {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <check_state+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	dc04      	bgt.n	8000336 <check_state+0x16>
		state_update(VER_LED);
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffa5 	bl	800027c <state_update>
		vertical_processing();
 8000332:	f7ff ff5b 	bl	80001ec <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <check_state+0x2c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dc04      	bgt.n	8000348 <check_state+0x28>
		state_update(HOR_LED);
 800033e:	2001      	movs	r0, #1
 8000340:	f7ff ff9c 	bl	800027c <state_update>
		horizontal_processing();
 8000344:	f7ff ff76 	bl	8000234 <horizontal_processing>
	}
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000000c 	.word	0x2000000c

08000350 <update_clock>:

void update_clock() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <update_clock+0x38>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d113      	bne.n	8000384 <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <update_clock+0x3c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000364:	4a09      	ldr	r2, [pc, #36]	; (800038c <update_clock+0x3c>)
 8000366:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <update_clock+0x3c>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <update_clock+0x3c>)
 8000372:	6053      	str	r3, [r2, #4]
		check_state();
 8000374:	f7ff ffd4 	bl	8000320 <check_state>
		updateDisplay();
 8000378:	f7ff fee8 	bl	800014c <updateDisplay>
		setTimer2(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f000 fd38 	bl	8000df4 <setTimer2>
	}
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000118 	.word	0x20000118
 800038c:	2000000c 	.word	0x2000000c

08000390 <reset>:

void reset() {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED * TIME_UNIT;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <reset+0x4c>)
 8000396:	f242 7210 	movw	r2, #10000	; 0x2710
 800039a:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW * TIME_UNIT;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <reset+0x4c>)
 800039e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80003a2:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN * TIME_UNIT;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <reset+0x4c>)
 80003a6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80003aa:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <reset+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <reset+0x50>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <reset+0x50>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a07      	ldr	r2, [pc, #28]	; (80003dc <reset+0x4c>)
 80003be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <reset+0x54>)
 80003c4:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <reset+0x50>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <reset+0x4c>)
 80003cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <reset+0x54>)
 80003d2:	6053      	str	r3, [r2, #4]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000014 	.word	0x20000014
 80003e0:	20000004 	.word	0x20000004
 80003e4:	2000000c 	.word	0x2000000c

080003e8 <restart>:

void restart(){
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	status = 0;
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <restart+0x14>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	200000c8 	.word	0x200000c8

08000400 <confirm_action>:

void confirm_action(int mode) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d82e      	bhi.n	800046c <confirm_action+0x6c>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <confirm_action+0x14>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800046d 	.word	0x0800046d
 8000418:	08000425 	.word	0x08000425
 800041c:	0800043d 	.word	0x0800043d
 8000420:	08000455 	.word	0x08000455
	switch (mode) {
	case 0: //Normal mode -> do nothing
		return;
	case 1: // Inc red time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <confirm_action+0x78>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <confirm_action+0x7c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000430:	fb01 f303 	mul.w	r3, r1, r3
 8000434:	4413      	add	r3, r2
 8000436:	4a10      	ldr	r2, [pc, #64]	; (8000478 <confirm_action+0x78>)
 8000438:	6013      	str	r3, [r2, #0]
		break;
 800043a:	e018      	b.n	800046e <confirm_action+0x6e>
	case 2: // Inc yellow time mode
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (TIMES_INC * TIME_UNIT);
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <confirm_action+0x78>)
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <confirm_action+0x7c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000448:	fb01 f303 	mul.w	r3, r1, r3
 800044c:	4413      	add	r3, r2
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <confirm_action+0x78>)
 8000450:	6053      	str	r3, [r2, #4]
		break;
 8000452:	e00c      	b.n	800046e <confirm_action+0x6e>
	case 3: // Inc green time
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <confirm_action+0x78>)
 8000456:	689a      	ldr	r2, [r3, #8]
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <confirm_action+0x7c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000460:	fb01 f303 	mul.w	r3, r1, r3
 8000464:	4413      	add	r3, r2
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <confirm_action+0x78>)
 8000468:	6093      	str	r3, [r2, #8]
		break;
 800046a:	e000      	b.n	800046e <confirm_action+0x6e>
	default:
		break;
 800046c:	bf00      	nop
	}

}
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000014 	.word	0x20000014
 800047c:	200000d0 	.word	0x200000d0

08000480 <state_handle>:

void state_handle() {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000484:	4b47      	ldr	r3, [pc, #284]	; (80005a4 <state_handle+0x124>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d05c      	beq.n	8000546 <state_handle+0xc6>
 800048c:	2b02      	cmp	r3, #2
 800048e:	f300 8085 	bgt.w	800059c <state_handle+0x11c>
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <state_handle+0x1c>
 8000496:	2b01      	cmp	r3, #1
 8000498:	d02a      	beq.n	80004f0 <state_handle+0x70>
		}
		SEG7_CLOCK[VER_LED] = 2  * TIME_UNIT;
		SEG7_CLOCK[HOR_LED] = 0;
		break;
	default:
		break;
 800049a:	e07f      	b.n	800059c <state_handle+0x11c>
		if (timer1_flag == 1) {
 800049c:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <state_handle+0x128>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d11e      	bne.n	80004e2 <state_handle+0x62>
			if (toggle_flag == 0) {
 80004a4:	4b41      	ldr	r3, [pc, #260]	; (80005ac <state_handle+0x12c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d10f      	bne.n	80004cc <state_handle+0x4c>
				clear_horizontal();
 80004ac:	f7ff fe96 	bl	80001dc <clear_horizontal>
				clear_vertical();
 80004b0:	f7ff fe8d 	bl	80001ce <clear_vertical>
				set_led_color(TRAFFIC_1_LED, RED_COLOR);
 80004b4:	211e      	movs	r1, #30
 80004b6:	2028      	movs	r0, #40	; 0x28
 80004b8:	f000 feb6 	bl	8001228 <set_led_color>
				set_led_color(TRAFFIC_2_LED, RED_COLOR);
 80004bc:	211e      	movs	r1, #30
 80004be:	2029      	movs	r0, #41	; 0x29
 80004c0:	f000 feb2 	bl	8001228 <set_led_color>
				toggle_flag = 1;
 80004c4:	4b39      	ldr	r3, [pc, #228]	; (80005ac <state_handle+0x12c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	e006      	b.n	80004da <state_handle+0x5a>
				clear_horizontal();
 80004cc:	f7ff fe86 	bl	80001dc <clear_horizontal>
				clear_vertical();
 80004d0:	f7ff fe7d 	bl	80001ce <clear_vertical>
				toggle_flag = 0;
 80004d4:	4b35      	ldr	r3, [pc, #212]	; (80005ac <state_handle+0x12c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80004da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004de:	f000 fc6f 	bl	8000dc0 <setTimer1>
		SEG7_CLOCK[VER_LED] = 0;
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <state_handle+0x130>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <state_handle+0x130>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
		break;
 80004ee:	e056      	b.n	800059e <state_handle+0x11e>
		if (timer1_flag == 1) {
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <state_handle+0x128>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d11e      	bne.n	8000536 <state_handle+0xb6>
			if (toggle_flag == 0) {
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <state_handle+0x12c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d10f      	bne.n	8000520 <state_handle+0xa0>
				clear_horizontal();
 8000500:	f7ff fe6c 	bl	80001dc <clear_horizontal>
				clear_vertical();
 8000504:	f7ff fe63 	bl	80001ce <clear_vertical>
				set_led_color(TRAFFIC_1_LED, AMBER_COLOR);
 8000508:	211f      	movs	r1, #31
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f000 fe8c 	bl	8001228 <set_led_color>
				set_led_color(TRAFFIC_2_LED, AMBER_COLOR);
 8000510:	211f      	movs	r1, #31
 8000512:	2029      	movs	r0, #41	; 0x29
 8000514:	f000 fe88 	bl	8001228 <set_led_color>
				toggle_flag = 1;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <state_handle+0x12c>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	e006      	b.n	800052e <state_handle+0xae>
				clear_horizontal();
 8000520:	f7ff fe5c 	bl	80001dc <clear_horizontal>
				clear_vertical();
 8000524:	f7ff fe53 	bl	80001ce <clear_vertical>
				toggle_flag = 0;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <state_handle+0x12c>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 800052e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000532:	f000 fc45 	bl	8000dc0 <setTimer1>
		SEG7_CLOCK[VER_LED] = 1 * TIME_UNIT;
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <state_handle+0x130>)
 8000538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053c:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <state_handle+0x130>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
		break;
 8000544:	e02b      	b.n	800059e <state_handle+0x11e>
		if (timer1_flag == 1) {
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <state_handle+0x128>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d11e      	bne.n	800058c <state_handle+0x10c>
			if (toggle_flag == 0) {
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <state_handle+0x12c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10f      	bne.n	8000576 <state_handle+0xf6>
				clear_horizontal();
 8000556:	f7ff fe41 	bl	80001dc <clear_horizontal>
				clear_vertical();
 800055a:	f7ff fe38 	bl	80001ce <clear_vertical>
				set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
 800055e:	2120      	movs	r1, #32
 8000560:	2028      	movs	r0, #40	; 0x28
 8000562:	f000 fe61 	bl	8001228 <set_led_color>
				set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
 8000566:	2120      	movs	r1, #32
 8000568:	2029      	movs	r0, #41	; 0x29
 800056a:	f000 fe5d 	bl	8001228 <set_led_color>
				toggle_flag = 1;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <state_handle+0x12c>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e006      	b.n	8000584 <state_handle+0x104>
				clear_horizontal();
 8000576:	f7ff fe31 	bl	80001dc <clear_horizontal>
				clear_vertical();
 800057a:	f7ff fe28 	bl	80001ce <clear_vertical>
				toggle_flag = 0;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <state_handle+0x12c>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f000 fc1a 	bl	8000dc0 <setTimer1>
		SEG7_CLOCK[VER_LED] = 2  * TIME_UNIT;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <state_handle+0x130>)
 800058e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000592:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <state_handle+0x130>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
		break;
 800059a:	e000      	b.n	800059e <state_handle+0x11e>
		break;
 800059c:	bf00      	nop
	}
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000114 	.word	0x20000114
 80005ac:	200000d4 	.word	0x200000d4
 80005b0:	2000000c 	.word	0x2000000c

080005b4 <traffic_processing>:

void traffic_processing() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	switch (status) {
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <traffic_processing+0x68>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d027      	beq.n	8000610 <traffic_processing+0x5c>
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	dc28      	bgt.n	8000616 <traffic_processing+0x62>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <traffic_processing+0x1a>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d01e      	beq.n	800060a <traffic_processing+0x56>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 80005cc:	e023      	b.n	8000616 <traffic_processing+0x62>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <traffic_processing+0x6c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <traffic_processing+0x6c>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <traffic_processing+0x6c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <traffic_processing+0x70>)
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <traffic_processing+0x74>)
 80005e6:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <traffic_processing+0x6c>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <traffic_processing+0x70>)
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <traffic_processing+0x74>)
 80005f4:	6053      	str	r3, [r2, #4]
		updateDisplay();
 80005f6:	f7ff fda9 	bl	800014c <updateDisplay>
		vertical_processing();
 80005fa:	f7ff fdf7 	bl	80001ec <vertical_processing>
		horizontal_processing();
 80005fe:	f7ff fe19 	bl	8000234 <horizontal_processing>
		status = 1;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <traffic_processing+0x68>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
		break;
 8000608:	e006      	b.n	8000618 <traffic_processing+0x64>
		update_clock();
 800060a:	f7ff fea1 	bl	8000350 <update_clock>
		break;
 800060e:	e003      	b.n	8000618 <traffic_processing+0x64>
		state_handle();
 8000610:	f7ff ff36 	bl	8000480 <state_handle>
		break;
 8000614:	e000      	b.n	8000618 <traffic_processing+0x64>
		break;
 8000616:	bf00      	nop
	}
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000c8 	.word	0x200000c8
 8000620:	20000004 	.word	0x20000004
 8000624:	20000014 	.word	0x20000014
 8000628:	2000000c 	.word	0x2000000c

0800062c <input_processing>:

void input_processing() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f91f 	bl	8000874 <is_button_pressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d015      	beq.n	8000668 <input_processing+0x3c>
		status = 2;
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <input_processing+0xac>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1);
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <input_processing+0xb0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a24      	ldr	r2, [pc, #144]	; (80006dc <input_processing+0xb0>)
 800064a:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <input_processing+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
		if (index_mode >= 3) {
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <input_processing+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b02      	cmp	r3, #2
 8000658:	dd06      	ble.n	8000668 <input_processing+0x3c>
			status = 0;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <input_processing+0xac>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
			index_mode = -1;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <input_processing+0xb0>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	601a      	str	r2, [r3, #0]
		}
	}

	// Add button
	if (is_button_pressed(1) && index_mode != -1) {
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f903 	bl	8000874 <is_button_pressed>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <input_processing+0x5c>
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <input_processing+0xb0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d004      	beq.n	8000688 <input_processing+0x5c>
		TIMES_INC++;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <input_processing+0xb4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <input_processing+0xb4>)
 8000686:	6013      	str	r3, [r2, #0]
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != -1) {
 8000688:	2002      	movs	r0, #2
 800068a:	f000 f8f3 	bl	8000874 <is_button_pressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d016      	beq.n	80006c2 <input_processing+0x96>
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <input_processing+0xb0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d011      	beq.n	80006c2 <input_processing+0x96>
		if (TIMES_INC != 0) {
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <input_processing+0xb4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <input_processing+0x84>
			confirm_action(index_mode);
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <input_processing+0xb0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fea8 	bl	8000400 <confirm_action>
		}
		TIMES_INC = 0;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <input_processing+0xb4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
		index_mode = -1;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <input_processing+0xb0>)
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	601a      	str	r2, [r3, #0]
		restart();
 80006be:	f7ff fe93 	bl	80003e8 <restart>
	}

	// RESET when start
	if (start == 0) {
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <input_processing+0xb8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d104      	bne.n	80006d4 <input_processing+0xa8>
		reset();
 80006ca:	f7ff fe61 	bl	8000390 <reset>
		start = 1;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <input_processing+0xb8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
	}
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c8 	.word	0x200000c8
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200000d0 	.word	0x200000d0
 80006e4:	200000cc 	.word	0x200000cc

080006e8 <fsm_simple_button_run>:

void fsm_simple_button_run() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	switch (buttonState) {
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <fsm_simple_button_run+0x3c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <fsm_simple_button_run+0x12>
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d00a      	beq.n	800070e <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 80006f8:	e011      	b.n	800071e <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 80006fa:	f7ff fd4b 	bl	8000194 <WhichButtonIsPressed>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <fsm_simple_button_run+0x3c>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			input_processing();
 800070a:	f7ff ff8f 	bl	800062c <input_processing>
		if (!WhichButtonIsPressed()) {
 800070e:	f7ff fd41 	bl	8000194 <WhichButtonIsPressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <fsm_simple_button_run+0x3c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000ec 	.word	0x200000ec

08000728 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e081      	b.n	8000838 <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000734:	4a45      	ldr	r2, [pc, #276]	; (800084c <button_reading+0x124>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	7819      	ldrb	r1, [r3, #0]
 800073c:	4a44      	ldr	r2, [pc, #272]	; (8000850 <button_reading+0x128>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	460a      	mov	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000746:	4a43      	ldr	r2, [pc, #268]	; (8000854 <button_reading+0x12c>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074e:	4942      	ldr	r1, [pc, #264]	; (8000858 <button_reading+0x130>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f001 f8f5 	bl	8001948 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	4619      	mov	r1, r3
 8000762:	4a3a      	ldr	r2, [pc, #232]	; (800084c <button_reading+0x124>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	460a      	mov	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800076c:	4a37      	ldr	r2, [pc, #220]	; (800084c <button_reading+0x124>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	4936      	ldr	r1, [pc, #216]	; (8000850 <button_reading+0x128>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d158      	bne.n	8000832 <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000780:	4a32      	ldr	r2, [pc, #200]	; (800084c <button_reading+0x124>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	7819      	ldrb	r1, [r3, #0]
 8000788:	4a34      	ldr	r2, [pc, #208]	; (800085c <button_reading+0x134>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000792:	4a32      	ldr	r2, [pc, #200]	; (800085c <button_reading+0x134>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d135      	bne.n	800080a <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 800079e:	4a30      	ldr	r2, [pc, #192]	; (8000860 <button_reading+0x138>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a6:	2b18      	cmp	r3, #24
 80007a8:	d80e      	bhi.n	80007c8 <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <button_reading+0x13c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00a      	beq.n	80007c8 <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 80007b2:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <button_reading+0x138>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b299      	uxth	r1, r3
 80007be:	4a28      	ldr	r2, [pc, #160]	; (8000860 <button_reading+0x138>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007c6:	e009      	b.n	80007dc <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <button_reading+0x138>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2100      	movs	r1, #0
 80007ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 80007d2:	4a25      	ldr	r2, [pc, #148]	; (8000868 <button_reading+0x140>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2101      	movs	r1, #1
 80007d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <button_reading+0x144>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e4:	2b63      	cmp	r3, #99	; 0x63
 80007e6:	d80a      	bhi.n	80007fe <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <button_reading+0x144>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b299      	uxth	r1, r3
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <button_reading+0x144>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007fc:	e019      	b.n	8000832 <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <button_reading+0x148>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e013      	b.n	8000832 <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <button_reading+0x144>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2100      	movs	r1, #0
 8000810:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <button_reading+0x138>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2100      	movs	r1, #0
 800081a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <button_reading+0x148>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <button_reading+0x140>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2100      	movs	r1, #0
 800082e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3301      	adds	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	f77f af7a 	ble.w	8000734 <button_reading+0xc>
			}
		}
	}
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000f4 	.word	0x200000f4
 8000850:	200000f8 	.word	0x200000f8
 8000854:	20000020 	.word	0x20000020
 8000858:	20000030 	.word	0x20000030
 800085c:	200000f0 	.word	0x200000f0
 8000860:	20000108 	.word	0x20000108
 8000864:	200000d8 	.word	0x200000d8
 8000868:	200000dc 	.word	0x200000dc
 800086c:	20000100 	.word	0x20000100
 8000870:	200000fc 	.word	0x200000fc

08000874 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d901      	bls.n	8000888 <is_button_pressed+0x14>
 8000884:	2300      	movs	r3, #0
 8000886:	e007      	b.n	8000898 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <is_button_pressed+0x30>)
 800088c:	5cd3      	ldrb	r3, [r2, r3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200000f0 	.word	0x200000f0

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fd58 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f82e 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 f95a 	bl	8000b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008b8:	f000 f92e 	bl	8000b18 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008bc:	f000 f86a 	bl	8000994 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c0:	f000 f8b4 	bl	8000a2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <main+0x5c>)
 80008c8:	f001 fd9a 	bl	8002400 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <main+0x60>)
 80008ce:	f001 fced 	bl	80022ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <main+0x5c>)
 80008d4:	f001 fcea 	bl	80022ac <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(fsm_simple_button_run, 0, 10);
//  SCH_Add_Task(traffic_processing, 0, 1000);
//  SCH_Add_Task(button_reading, 40, 10);
//  SCH_Add_Task(pedestrian_scramble, 30, 10);
//  find_new_min_task();
  setTimer1(500);
 80008d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008dc:	f000 fa70 	bl	8000dc0 <setTimer1>
  setTimer2(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 fa86 	bl	8000df4 <setTimer2>
//	  turn of LED for indicate while MCU is sleeping.
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
	  	  is_button_pressed(0));
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ffc3 	bl	8000874 <is_button_pressed>
 80008ee:	4603      	mov	r3, r0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 80008f0:	461a      	mov	r2, r3
 80008f2:	2120      	movs	r1, #32
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <main+0x64>)
 80008f6:	f001 f83e 	bl	8001976 <HAL_GPIO_WritePin>
	  fsm_simple_button_run();
 80008fa:	f7ff fef5 	bl	80006e8 <fsm_simple_button_run>
	  traffic_processing();
 80008fe:	f7ff fe59 	bl	80005b4 <traffic_processing>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 8000902:	e7f1      	b.n	80008e8 <main+0x40>
 8000904:	2000017c 	.word	0x2000017c
 8000908:	200001c4 	.word	0x200001c4
 800090c:	40010800 	.word	0x40010800

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	; 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fdb4 	bl	800348c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000946:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f841 	bl	80019d8 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800095c:	f000 f9d5 	bl	8000d0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 faac 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000986:	f000 f9c0 	bl	8000d0a <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3740      	adds	r7, #64	; 0x40
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009ba:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80009be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009c8:	2213      	movs	r2, #19
 80009ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009da:	f001 fc17 	bl	800220c <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009e4:	f000 f991 	bl	8000d0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM2_Init+0x94>)
 80009f6:	f001 ff6b 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 f983 	bl	8000d0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_TIM2_Init+0x94>)
 8000a12:	f002 fae9 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f975 	bl	8000d0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001c4 	.word	0x200001c4

08000a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <MX_TIM3_Init+0xe8>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a64:	223f      	movs	r2, #63	; 0x3f
 8000a66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a82:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000a84:	f001 fbc2 	bl	800220c <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a8e:	f000 f93c 	bl	8000d0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000aa0:	f001 ff16 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000aaa:	f000 f92e 	bl	8000d0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000ab0:	f001 fc4e 	bl	8002350 <HAL_TIM_PWM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000aba:	f000 f926 	bl	8000d0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4619      	mov	r1, r3
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000ace:	f002 fa8b 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ad8:	f000 f917 	bl	8000d0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000adc:	2360      	movs	r3, #96	; 0x60
 8000ade:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000af4:	f001 fe2e 	bl	8002754 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000afe:	f000 f904 	bl	8000d0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM3_Init+0xe4>)
 8000b04:	f000 fa6c 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	40000400 	.word	0x40000400

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f002 faba 	bl	80030c8 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f8d6 	bl	8000d0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000020c 	.word	0x2000020c
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a4d      	ldr	r2, [pc, #308]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b98:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000b9e:	f043 0320 	orr.w	r3, r3, #32
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0320 	and.w	r3, r3, #32
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a41      	ldr	r2, [pc, #260]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <MX_GPIO_Init+0x150>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Traffic_1_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2130      	movs	r1, #48	; 0x30
 8000be4:	4836      	ldr	r0, [pc, #216]	; (8000cc0 <MX_GPIO_Init+0x154>)
 8000be6:	f000 fec6 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f240 3101 	movw	r1, #769	; 0x301
 8000bf0:	4834      	ldr	r0, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x158>)
 8000bf2:	f000 fec0 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bfc:	4832      	ldr	r0, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0x15c>)
 8000bfe:	f000 feba 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <MX_GPIO_Init+0x160>)
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0x15c>)
 8000c18:	f000 fd12 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <MX_GPIO_Init+0x154>)
 8000c30:	f000 fd06 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Traffic_1_2_Pin|LD2_Pin;
 8000c34:	2330      	movs	r3, #48	; 0x30
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <MX_GPIO_Init+0x154>)
 8000c4c:	f000 fcf8 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_1_Pin Traffic_2_2_Pin Traffic_2_1_Pin */
  GPIO_InitStruct.Pin = Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin;
 8000c50:	f240 3301 	movw	r3, #769	; 0x301
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_GPIO_Init+0x158>)
 8000c6a:	f000 fce9 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_Pedes_1_Pin Traffic_Pedes_2_Pin */
  GPIO_InitStruct.Pin = Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin;
 8000c6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <MX_GPIO_Init+0x15c>)
 8000c88:	f000 fcda 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_2_Pin B_3_Pin */
  GPIO_InitStruct.Pin = B_2_Pin|B_3_Pin;
 8000c8c:	2318      	movs	r3, #24
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <MX_GPIO_Init+0x158>)
 8000ca0:	f000 fcce 	bl	8001640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2028      	movs	r0, #40	; 0x28
 8000caa:	f000 fc92 	bl	80015d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cae:	2028      	movs	r0, #40	; 0x28
 8000cb0:	f000 fcab 	bl	800160a <HAL_NVIC_EnableIRQ>

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	10110000 	.word	0x10110000

08000cd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d105      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x1e>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 8000ce2:	f000 f8a1 	bl	8000e28 <timerRun>
		SCH_Update();
 8000ce6:	f000 f815 	bl	8000d14 <SCH_Update>
		button_reading();
 8000cea:	f7ff fd1d 	bl	8000728 <button_reading>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	80fb      	strh	r3, [r7, #6]

}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0e:	b672      	cpsid	i
}
 8000d10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <Error_Handler+0x8>

08000d14 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <SCH_Update+0xa4>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4927      	ldr	r1, [pc, #156]	; (8000dbc <SCH_Update+0xa8>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	3304      	adds	r3, #4
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d013      	beq.n	8000d58 <SCH_Update+0x44>
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <SCH_Update+0xa4>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4921      	ldr	r1, [pc, #132]	; (8000dbc <SCH_Update+0xa8>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	3304      	adds	r3, #4
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1e59      	subs	r1, r3, #1
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <SCH_Update+0xa8>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4403      	add	r3, r0
 8000d52:	3304      	adds	r3, #4
 8000d54:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 8000d56:	e02a      	b.n	8000dae <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <SCH_Update+0xa4>)
 8000d5a:	6819      	ldr	r1, [r3, #0]
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <SCH_Update+0xa4>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <SCH_Update+0xa8>)
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	6819      	ldr	r1, [r3, #0]
 8000d70:	4812      	ldr	r0, [pc, #72]	; (8000dbc <SCH_Update+0xa8>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4403      	add	r3, r0
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <SCH_Update+0xa4>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	490d      	ldr	r1, [pc, #52]	; (8000dbc <SCH_Update+0xa8>)
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	440b      	add	r3, r1
 8000d90:	330c      	adds	r3, #12
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <SCH_Update+0xa4>)
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2d8      	uxtb	r0, r3
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <SCH_Update+0xa8>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	330c      	adds	r3, #12
 8000daa:	4602      	mov	r2, r0
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000110 	.word	0x20000110
 8000dbc:	20000250 	.word	0x20000250

08000dc0 <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <setTimer1+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <setTimer1+0x2c>)
 8000dd4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <setTimer1+0x30>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000038 	.word	0x20000038
 8000dec:	20000128 	.word	0x20000128
 8000df0:	20000114 	.word	0x20000114

08000df4 <setTimer2>:
void setTimer2(int duration) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <setTimer2+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e06:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <setTimer2+0x2c>)
 8000e08:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <setTimer2+0x30>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000038 	.word	0x20000038
 8000e20:	2000012c 	.word	0x2000012c
 8000e24:	20000118 	.word	0x20000118

08000e28 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <timerRun+0xac>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dd0b      	ble.n	8000e4c <timerRun+0x24>
		timer1_counter--;
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <timerRun+0xac>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <timerRun+0xac>)
 8000e3c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <timerRun+0xac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dc02      	bgt.n	8000e4c <timerRun+0x24>
			timer1_flag = 1;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <timerRun+0xb0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <timerRun+0xb4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd0b      	ble.n	8000e6c <timerRun+0x44>
		timer2_counter--;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <timerRun+0xb4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <timerRun+0xb4>)
 8000e5c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <timerRun+0xb4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dc02      	bgt.n	8000e6c <timerRun+0x44>
			timer2_flag = 1;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <timerRun+0xb8>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <timerRun+0xbc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd0b      	ble.n	8000e8c <timerRun+0x64>
		timer3_counter--;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <timerRun+0xbc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <timerRun+0xbc>)
 8000e7c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <timerRun+0xbc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dc02      	bgt.n	8000e8c <timerRun+0x64>
			timer3_flag = 1;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <timerRun+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <timerRun+0xc4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd0b      	ble.n	8000eac <timerRun+0x84>
		timer4_counter--;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <timerRun+0xc4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <timerRun+0xc4>)
 8000e9c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <timerRun+0xc4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dc02      	bgt.n	8000eac <timerRun+0x84>
			timer4_flag = 1;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <timerRun+0xc8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <timerRun+0xcc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dd0b      	ble.n	8000ecc <timerRun+0xa4>
		timer5_counter--;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <timerRun+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <timerRun+0xcc>)
 8000ebc:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <timerRun+0xcc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dc02      	bgt.n	8000ecc <timerRun+0xa4>
			timer5_flag = 1;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <timerRun+0xd0>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000128 	.word	0x20000128
 8000ed8:	20000114 	.word	0x20000114
 8000edc:	2000012c 	.word	0x2000012c
 8000ee0:	20000118 	.word	0x20000118
 8000ee4:	20000130 	.word	0x20000130
 8000ee8:	2000011c 	.word	0x2000011c
 8000eec:	20000134 	.word	0x20000134
 8000ef0:	20000120 	.word	0x20000120
 8000ef4:	20000138 	.word	0x20000138
 8000ef8:	20000124 	.word	0x20000124

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_MspInit+0x60>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_MspInit+0x60>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f70:	d114      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f000 fb1f 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f94:	201c      	movs	r0, #28
 8000f96:	f000 fb38 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f9a:	e018      	b.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d113      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f000 fb05 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc8:	201d      	movs	r0, #29
 8000fca:	f000 fb1e 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_TIM_MspPostInit+0x58>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d117      	bne.n	8001030 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_TIM_MspPostInit+0x5c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_TIM_MspPostInit+0x5c>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_TIM_MspPostInit+0x5c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_TIM_MspPostInit+0x60>)
 800102c:	f000 fb08 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40000400 	.word	0x40000400
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x70>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d123      	bne.n	80010ac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0x74>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0x74>)
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	61d3      	str	r3, [r2, #28]
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x74>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_UART_MspInit+0x74>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_UART_MspInit+0x74>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_UART_MspInit+0x74>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001094:	230c      	movs	r3, #12
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_UART_MspInit+0x78>)
 80010a8:	f000 faca 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001106:	f000 f971 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f001 fa15 	bl	8002544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001c4 	.word	0x200001c4

08001124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM3_IRQHandler+0x10>)
 800112a:	f001 fa0b 	bl	8002544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000017c 	.word	0x2000017c

08001138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800113c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001140:	f000 fc32 	bl	80019a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f002 f95e 	bl	8003438 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20005000 	.word	0x20005000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	2000013c 	.word	0x2000013c
 80011b0:	20000588 	.word	0x20000588

080011b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <helper_set_led_color>:
 */


#include "traffic_light.h"

void helper_set_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2, int COLOR) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	4613      	mov	r3, r2
 80011d2:	813b      	strh	r3, [r7, #8]
	switch (COLOR) {
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d018      	beq.n	800120c <helper_set_led_color+0x4c>
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b20      	cmp	r3, #32
 80011de:	dc1d      	bgt.n	800121c <helper_set_led_color+0x5c>
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b1e      	cmp	r3, #30
 80011e4:	d003      	beq.n	80011ee <helper_set_led_color+0x2e>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b1f      	cmp	r3, #31
 80011ea:	d008      	beq.n	80011fe <helper_set_led_color+0x3e>
		case GREEN_COLOR:
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
			GPIOy->BSRR = GPIO_Pin2;
			break;
	}
}
 80011ec:	e016      	b.n	800121c <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 80011ee:	897a      	ldrh	r2, [r7, #10]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = (uint32_t)GPIO_Pin2 << 16u;
 80011f4:	893b      	ldrh	r3, [r7, #8]
 80011f6:	041a      	lsls	r2, r3, #16
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	611a      	str	r2, [r3, #16]
			break;
 80011fc:	e00e      	b.n	800121c <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 80011fe:	897a      	ldrh	r2, [r7, #10]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001204:	893a      	ldrh	r2, [r7, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	611a      	str	r2, [r3, #16]
			break;
 800120a:	e007      	b.n	800121c <helper_set_led_color+0x5c>
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
 800120c:	897b      	ldrh	r3, [r7, #10]
 800120e:	041a      	lsls	r2, r3, #16
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001214:	893a      	ldrh	r2, [r7, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
			break;
 800121a:	bf00      	nop
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <set_led_color>:

void set_led_color(int led, int color) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	switch (led) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b2a      	cmp	r3, #42	; 0x2a
 8001236:	d01d      	beq.n	8001274 <set_led_color+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b2a      	cmp	r3, #42	; 0x2a
 800123c:	dc25      	bgt.n	800128a <set_led_color+0x62>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b28      	cmp	r3, #40	; 0x28
 8001242:	d003      	beq.n	800124c <set_led_color+0x24>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b29      	cmp	r3, #41	; 0x29
 8001248:	d009      	beq.n	800125e <set_led_color+0x36>
		case PEDESTRIAN_LED:
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
					Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin, color);
			break;
	}
}
 800124a:	e01e      	b.n	800128a <set_led_color+0x62>
			helper_set_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2310      	movs	r3, #16
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <set_led_color+0x6c>)
 8001254:	2101      	movs	r1, #1
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <set_led_color+0x70>)
 8001258:	f7ff ffb2 	bl	80011c0 <helper_set_led_color>
			break;
 800125c:	e015      	b.n	800128a <set_led_color+0x62>
			helper_set_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <set_led_color+0x70>)
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <set_led_color+0x70>)
 800126e:	f7ff ffa7 	bl	80011c0 <helper_set_led_color>
			break;
 8001272:	e00a      	b.n	800128a <set_led_color+0x62>
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <set_led_color+0x74>)
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <set_led_color+0x74>)
 8001284:	f7ff ff9c 	bl	80011c0 <helper_set_led_color>
			break;
 8001288:	bf00      	nop
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40011000 	.word	0x40011000

080012a0 <helper_clear_led>:
	}

	return UNDEFINED_COLOR;
}

void helper_clear_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
	...

080012c0 <clear_led>:
void clear_led(int led) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	switch(led) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b2a      	cmp	r3, #42	; 0x2a
 80012cc:	d014      	beq.n	80012f8 <clear_led+0x38>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b2a      	cmp	r3, #42	; 0x2a
 80012d2:	dc17      	bgt.n	8001304 <clear_led+0x44>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b28      	cmp	r3, #40	; 0x28
 80012d8:	d003      	beq.n	80012e2 <clear_led+0x22>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b29      	cmp	r3, #41	; 0x29
 80012de:	d005      	beq.n	80012ec <clear_led+0x2c>
		break;
	case PEDESTRIAN_LED:
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
		break;
	}
}
 80012e0:	e010      	b.n	8001304 <clear_led+0x44>
		helper_clear_led(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 80012e2:	2101      	movs	r1, #1
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <clear_led+0x4c>)
 80012e6:	f7ff ffdb 	bl	80012a0 <helper_clear_led>
		break;
 80012ea:	e00b      	b.n	8001304 <clear_led+0x44>
		helper_clear_led(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <clear_led+0x4c>)
 80012f2:	f7ff ffd5 	bl	80012a0 <helper_clear_led>
		break;
 80012f6:	e005      	b.n	8001304 <clear_led+0x44>
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
 80012f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <clear_led+0x50>)
 80012fe:	f7ff ffcf 	bl	80012a0 <helper_clear_led>
		break;
 8001302:	bf00      	nop
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000

08001314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133a:	f7ff ff3b 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f002 f881 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff fab1 	bl	80008a8 <main>
  bx lr
 8001346:	4770      	bx	lr
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001350:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 8001354:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001358:	20000584 	.word	0x20000584

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f923 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fdbe 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f93b 	bl	8001626 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f903 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000003c 	.word	0x2000003c
 80013e4:	20000044 	.word	0x20000044
 80013e8:	20000040 	.word	0x20000040

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000044 	.word	0x20000044
 800140c:	20000570 	.word	0x20000570

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000570 	.word	0x20000570

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <__NVIC_EnableIRQ+0x34>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff2d 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff42 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff35 	bl	8001488 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b08b      	sub	sp, #44	; 0x2c
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	e169      	b.n	8001928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001654:	2201      	movs	r2, #1
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8158 	bne.w	8001922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a9a      	ldr	r2, [pc, #616]	; (80018e0 <HAL_GPIO_Init+0x2a0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d05e      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 800167c:	4a98      	ldr	r2, [pc, #608]	; (80018e0 <HAL_GPIO_Init+0x2a0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d875      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 8001682:	4a98      	ldr	r2, [pc, #608]	; (80018e4 <HAL_GPIO_Init+0x2a4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d058      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001688:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <HAL_GPIO_Init+0x2a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d86f      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800168e:	4a96      	ldr	r2, [pc, #600]	; (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d052      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001694:	4a94      	ldr	r2, [pc, #592]	; (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d869      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800169a:	4a94      	ldr	r2, [pc, #592]	; (80018ec <HAL_GPIO_Init+0x2ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d04c      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016a0:	4a92      	ldr	r2, [pc, #584]	; (80018ec <HAL_GPIO_Init+0x2ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d863      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016a6:	4a92      	ldr	r2, [pc, #584]	; (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d046      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016ac:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d85d      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d82a      	bhi.n	800170c <HAL_GPIO_Init+0xcc>
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d859      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <HAL_GPIO_Init+0x80>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001727 	.word	0x08001727
 80016cc:	08001769 	.word	0x08001769
 80016d0:	0800176f 	.word	0x0800176f
 80016d4:	0800176f 	.word	0x0800176f
 80016d8:	0800176f 	.word	0x0800176f
 80016dc:	0800176f 	.word	0x0800176f
 80016e0:	0800176f 	.word	0x0800176f
 80016e4:	0800176f 	.word	0x0800176f
 80016e8:	0800176f 	.word	0x0800176f
 80016ec:	0800176f 	.word	0x0800176f
 80016f0:	0800176f 	.word	0x0800176f
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	0800176f 	.word	0x0800176f
 80016fc:	0800176f 	.word	0x0800176f
 8001700:	0800176f 	.word	0x0800176f
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001731 	.word	0x08001731
 800170c:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <HAL_GPIO_Init+0x2b4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001712:	e02c      	b.n	800176e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e029      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e024      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e01f      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	330c      	adds	r3, #12
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e01a      	b.n	8001770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001742:	2304      	movs	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e013      	b.n	8001770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001750:	2308      	movs	r3, #8
 8001752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	611a      	str	r2, [r3, #16]
          break;
 800175a:	e009      	b.n	8001770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	615a      	str	r2, [r3, #20]
          break;
 8001766:	e003      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x130>
          break;
 800176e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d801      	bhi.n	800177a <HAL_GPIO_Init+0x13a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e001      	b.n	800177e <HAL_GPIO_Init+0x13e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	; 0xff
 8001784:	d802      	bhi.n	800178c <HAL_GPIO_Init+0x14c>
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x152>
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	3b08      	subs	r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	210f      	movs	r1, #15
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	6a39      	ldr	r1, [r7, #32]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80b1 	beq.w	8001922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	; (8001900 <HAL_GPIO_Init+0x2c0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_GPIO_Init+0x2c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_GPIO_Init+0x2c8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1e4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3d      	ldr	r2, [pc, #244]	; (800190c <HAL_GPIO_Init+0x2cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1e0>
 800181c:	2303      	movs	r3, #3
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001820:	2304      	movs	r3, #4
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 800182c:	2300      	movs	r3, #0
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183e:	492f      	ldr	r1, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	492c      	ldr	r1, [pc, #176]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4928      	ldr	r1, [pc, #160]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4922      	ldr	r1, [pc, #136]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	491e      	ldr	r1, [pc, #120]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4918      	ldr	r1, [pc, #96]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4914      	ldr	r1, [pc, #80]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d021      	beq.n	8001914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e021      	b.n	8001922 <HAL_GPIO_Init+0x2e2>
 80018de:	bf00      	nop
 80018e0:	10320000 	.word	0x10320000
 80018e4:	10310000 	.word	0x10310000
 80018e8:	10220000 	.word	0x10220000
 80018ec:	10210000 	.word	0x10210000
 80018f0:	10120000 	.word	0x10120000
 80018f4:	10110000 	.word	0x10110000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	4909      	ldr	r1, [pc, #36]	; (8001944 <HAL_GPIO_Init+0x304>)
 800191e:	4013      	ands	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae8e 	bne.w	8001654 <HAL_GPIO_Init+0x14>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	372c      	adds	r7, #44	; 0x2c
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001992:	e003      	b.n	800199c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f995 	bl	8000cf6 <HAL_GPIO_EXTI_Callback>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40010400 	.word	0x40010400

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e26c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f8:	4b92      	ldr	r3, [pc, #584]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d00c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a04:	4b8f      	ldr	r3, [pc, #572]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
 8001a10:	4b8c      	ldr	r3, [pc, #560]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d10b      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d06c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x12c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d168      	bne.n	8001b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e246      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x76>
 8001a40:	4b80      	ldr	r3, [pc, #512]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7f      	ldr	r2, [pc, #508]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e02e      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x98>
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b78      	ldr	r3, [pc, #480]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0xbc>
 8001a7a:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a71      	ldr	r2, [pc, #452]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a94:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a67      	ldr	r2, [pc, #412]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fcac 	bl	8001410 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fca8 	bl	8001410 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1fa      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xe4>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fc98 	bl	8001410 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fc94 	bl	8001410 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1e6      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x10c>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1ba      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4939      	ldr	r1, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fc4d 	bl	8001410 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc49 	bl	8001410 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e19b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4927      	ldr	r1, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fc2c 	bl	8001410 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc28 	bl	8001410 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e17a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fc0c 	bl	8001410 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc08 	bl	8001410 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e15a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fad8 	bl	80021d0 <RCC_Delay>
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fbf2 	bl	8001410 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fbee 	bl	8001410 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e140      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	42420000 	.word	0x42420000
 8001c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b9e      	ldr	r3, [pc, #632]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e9      	bne.n	8001c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a6 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b97      	ldr	r3, [pc, #604]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b94      	ldr	r3, [pc, #592]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a93      	ldr	r2, [pc, #588]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b91      	ldr	r3, [pc, #580]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a8a      	ldr	r2, [pc, #552]	; (8001ed0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fbaf 	bl	8001410 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff fbab 	bl	8001410 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0fd      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x312>
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a7a      	ldr	r2, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x334>
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x356>
 8001d14:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a6c      	ldr	r2, [pc, #432]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb5f 	bl	8001410 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff fb5b 	bl	8001410 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0ab      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x37e>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb49 	bl	8001410 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb45 	bl	8001410 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e095      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8081 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d061      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d146      	bne.n	8001e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x4fc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb19 	bl	8001410 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff fb15 	bl	8001410 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e067      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	492d      	ldr	r1, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a19      	ldr	r1, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	4927      	ldr	r1, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x4fc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fae9 	bl	8001410 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff fae5 	bl	8001410 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e037      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46a>
 8001e60:	e02f      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCC_OscConfig+0x4fc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fad2 	bl	8001410 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff face 	bl	8001410 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e020      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e013      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42420060 	.word	0x42420060

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d0      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4965      	ldr	r1, [pc, #404]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b63      	ldr	r3, [pc, #396]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b8      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a58      	ldr	r2, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	494d      	ldr	r1, [pc, #308]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d040      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d115      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07f      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e073      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff fa22 	bl	8001410 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff fa1e 	bl	8001410 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d210      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4922      	ldr	r1, [pc, #136]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e032      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4916      	ldr	r1, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002066:	f000 f821 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800206a:	4602      	mov	r2, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f980 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003d44 	.word	0x08003d44
 80020a4:	2000003c 	.word	0x2000003c
 80020a8:	20000040 	.word	0x20000040

080020ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b490      	push	{r4, r7}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020b4:	1d3c      	adds	r4, r7, #4
 80020b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020bc:	f240 2301 	movw	r3, #513	; 0x201
 80020c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x40>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x46>
 80020ea:	e02d      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	e02d      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	0c9b      	lsrs	r3, r3, #18
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020fe:	4413      	add	r3, r2
 8002100:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002104:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0c5b      	lsrs	r3, r3, #17
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211e:	4413      	add	r3, r2
 8002120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212a:	fb02 f203 	mul.w	r2, r2, r3
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	e004      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	623b      	str	r3, [r7, #32]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	623b      	str	r3, [r7, #32]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6a3b      	ldr	r3, [r7, #32]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc90      	pop	{r4, r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	08003d34 	.word	0x08003d34
 8002160:	40021000 	.word	0x40021000
 8002164:	007a1200 	.word	0x007a1200
 8002168:	003d0900 	.word	0x003d0900

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	2000003c 	.word	0x2000003c

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff2 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003d54 	.word	0x08003d54

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffde 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08003d54 	.word	0x08003d54

080021d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <RCC_Delay+0x34>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <RCC_Delay+0x38>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ec:	bf00      	nop
  }
  while (Delay --);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	60fa      	str	r2, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <RCC_Delay+0x1c>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	2000003c 	.word	0x2000003c
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fe94 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fc28 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e03a      	b.n	800233a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_TIM_Base_Start_IT+0x98>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00e      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d009      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_TIM_Base_Start_IT+0xa0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d111      	bne.n	8002328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d010      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	e007      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800

08002350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e041      	b.n	80023e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f839 	bl	80023ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f000 fb86 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start+0x24>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e022      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d109      	bne.n	800243e <HAL_TIM_PWM_Start+0x3e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e015      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d109      	bne.n	8002458 <HAL_TIM_PWM_Start+0x58>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e008      	b.n	800246a <HAL_TIM_PWM_Start+0x6a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e05e      	b.n	8002530 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_TIM_PWM_Start+0x82>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	e013      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0x92>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002490:	e00b      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xa2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a0:	e003      	b.n	80024aa <HAL_TIM_PWM_Start+0xaa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fd74 	bl	8002fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_TIM_PWM_Start+0x138>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_TIM_PWM_Start+0x138>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00e      	beq.n	80024fa <HAL_TIM_PWM_Start+0xfa>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d009      	beq.n	80024fa <HAL_TIM_PWM_Start+0xfa>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_TIM_PWM_Start+0x13c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d004      	beq.n	80024fa <HAL_TIM_PWM_Start+0xfa>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_TIM_PWM_Start+0x140>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d111      	bne.n	800251e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b06      	cmp	r3, #6
 800250a:	d010      	beq.n	800252e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	e007      	b.n	800252e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800

08002544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0202 	mvn.w	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa6f 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa62 	bl	8002a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fa71 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0204 	mvn.w	r2, #4
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa45 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa38 	bl	8002a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa47 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d122      	bne.n	8002648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b08      	cmp	r3, #8
 800260e:	d11b      	bne.n	8002648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0208 	mvn.w	r2, #8
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa1b 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa0e 	bl	8002a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fa1d 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b10      	cmp	r3, #16
 8002654:	d122      	bne.n	800269c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d11b      	bne.n	800269c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0210 	mvn.w	r2, #16
 800266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2208      	movs	r2, #8
 8002672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9f1 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9e4 	bl	8002a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f9f3 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0201 	mvn.w	r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fb04 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	d10e      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d107      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fce1 	bl	80030b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9b7 	bl	8002a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b20      	cmp	r3, #32
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b20      	cmp	r3, #32
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0220 	mvn.w	r2, #32
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fcac 	bl	80030a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800276a:	2302      	movs	r3, #2
 800276c:	e0ac      	b.n	80028c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	f200 809f 	bhi.w	80028bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027b9 	.word	0x080027b9
 8002788:	080028bd 	.word	0x080028bd
 800278c:	080028bd 	.word	0x080028bd
 8002790:	080028bd 	.word	0x080028bd
 8002794:	080027f9 	.word	0x080027f9
 8002798:	080028bd 	.word	0x080028bd
 800279c:	080028bd 	.word	0x080028bd
 80027a0:	080028bd 	.word	0x080028bd
 80027a4:	0800283b 	.word	0x0800283b
 80027a8:	080028bd 	.word	0x080028bd
 80027ac:	080028bd 	.word	0x080028bd
 80027b0:	080028bd 	.word	0x080028bd
 80027b4:	0800287b 	.word	0x0800287b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f9d0 	bl	8002b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0208 	orr.w	r2, r2, #8
 80027d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0204 	bic.w	r2, r2, #4
 80027e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6999      	ldr	r1, [r3, #24]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	619a      	str	r2, [r3, #24]
      break;
 80027f6:	e062      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fa16 	bl	8002c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]
      break;
 8002838:	e041      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fa5f 	bl	8002d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0208 	orr.w	r2, r2, #8
 8002854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0204 	bic.w	r2, r2, #4
 8002864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	61da      	str	r2, [r3, #28]
      break;
 8002878:	e021      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 faa9 	bl	8002dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	021a      	lsls	r2, r3, #8
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	61da      	str	r2, [r3, #28]
      break;
 80028ba:	e000      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80028bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x18>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0b3      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x180>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d03e      	beq.n	80029a0 <HAL_TIM_ConfigClockSource+0xd0>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002926:	f200 8087 	bhi.w	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	f000 8085 	beq.w	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d87f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002938:	2b70      	cmp	r3, #112	; 0x70
 800293a:	d01a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xa2>
 800293c:	2b70      	cmp	r3, #112	; 0x70
 800293e:	d87b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002940:	2b60      	cmp	r3, #96	; 0x60
 8002942:	d050      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x116>
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d877      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d03c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xf6>
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d873      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d058      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x136>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d86f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002958:	2b30      	cmp	r3, #48	; 0x30
 800295a:	d064      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x156>
 800295c:	2b30      	cmp	r3, #48	; 0x30
 800295e:	d86b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002960:	2b20      	cmp	r3, #32
 8002962:	d060      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x156>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d867      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05c      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x156>
 800296c:	2b10      	cmp	r3, #16
 800296e:	d05a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002970:	e062      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f000 faee 	bl	8002f62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002994:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	609a      	str	r2, [r3, #8]
      break;
 800299e:	e04e      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f000 fad7 	bl	8002f62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c2:	609a      	str	r2, [r3, #8]
      break;
 80029c4:	e03b      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 fa4e 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2150      	movs	r1, #80	; 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 faa5 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 80029e4:	e02b      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 fa6c 	bl	8002ed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2160      	movs	r1, #96	; 0x60
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fa95 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002a04:	e01b      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 fa2e 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa85 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002a24:	e00b      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 fa7c 	bl	8002f2e <TIM_ITRx_SetConfig>
        break;
 8002a36:	e002      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <TIM_Base_SetConfig+0xb8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0x30>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x30>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <TIM_Base_SetConfig+0xbc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x30>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <TIM_Base_SetConfig+0xc0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <TIM_Base_SetConfig+0xb8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <TIM_Base_SetConfig+0x62>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d007      	beq.n	8002b02 <TIM_Base_SetConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <TIM_Base_SetConfig+0xbc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0x62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <TIM_Base_SetConfig+0xc0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <TIM_Base_SetConfig+0xb8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d103      	bne.n	8002b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f023 0201 	bic.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 0302 	bic.w	r3, r3, #2
 8002bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <TIM_OC1_SetConfig+0xc8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10c      	bne.n	8002bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0308 	bic.w	r3, r3, #8
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <TIM_OC1_SetConfig+0xc8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00

08002c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0210 	bic.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f023 0320 	bic.w	r3, r3, #32
 8002c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <TIM_OC2_SetConfig+0xd0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10d      	bne.n	8002cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <TIM_OC2_SetConfig+0xd0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d113      	bne.n	8002cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40012c00 	.word	0x40012c00

08002d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <TIM_OC3_SetConfig+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10d      	bne.n	8002d7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <TIM_OC3_SetConfig+0xd0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00

08002dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <TIM_OC4_SetConfig+0x98>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d109      	bne.n	8002e4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00

08002e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 030a 	bic.w	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f023 0210 	bic.w	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	031b      	lsls	r3, r3, #12
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f043 0307 	orr.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e046      	b.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d009      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10c      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800

080030a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e03f      	b.n	800315a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd ffa8 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f905 	bl	800331c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b08a      	sub	sp, #40	; 0x28
 8003166:	af02      	add	r7, sp, #8
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	d17c      	bne.n	800327c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_UART_Transmit+0x2c>
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e075      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Transmit+0x3e>
 800319c:	2302      	movs	r3, #2
 800319e:	e06e      	b.n	800327e <HAL_UART_Transmit+0x11c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	; 0x21
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b6:	f7fe f92b 	bl	8001410 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031f4:	e02a      	b.n	800324c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f840 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e036      	b.n	800327e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e007      	b.n	800323e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cf      	bne.n	80031f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f810 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003296:	e02c      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d028      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a6:	f7fe f8b3 	bl	8001410 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d21d      	bcs.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d0c3      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003356:	f023 030c 	bic.w	r3, r3, #12
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	430b      	orrs	r3, r1
 8003362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <UART_SetConfig+0x114>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d103      	bne.n	800338c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003384:	f7fe ff10 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	e002      	b.n	8003392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7fe fef8 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <UART_SetConfig+0x118>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	0119      	lsls	r1, r3, #4
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009a      	lsls	r2, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <UART_SetConfig+0x118>)
 80033ca:	fba3 0302 	umull	r0, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2064      	movs	r0, #100	; 0x64
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	3332      	adds	r3, #50	; 0x32
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <UART_SetConfig+0x118>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e8:	4419      	add	r1, r3
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <UART_SetConfig+0x118>)
 8003402:	fba3 0302 	umull	r0, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2064      	movs	r0, #100	; 0x64
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	3332      	adds	r3, #50	; 0x32
 8003414:	4a07      	ldr	r2, [pc, #28]	; (8003434 <UART_SetConfig+0x118>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	440a      	add	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40013800 	.word	0x40013800
 8003434:	51eb851f 	.word	0x51eb851f

08003438 <__errno>:
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <__errno+0x8>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000048 	.word	0x20000048

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	2600      	movs	r6, #0
 8003448:	4d0c      	ldr	r5, [pc, #48]	; (800347c <__libc_init_array+0x38>)
 800344a:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <__libc_init_array+0x3c>)
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	f000 fc5c 	bl	8003d10 <_init>
 8003458:	2600      	movs	r6, #0
 800345a:	4d0a      	ldr	r5, [pc, #40]	; (8003484 <__libc_init_array+0x40>)
 800345c:	4c0a      	ldr	r4, [pc, #40]	; (8003488 <__libc_init_array+0x44>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	08003d90 	.word	0x08003d90
 8003480:	08003d90 	.word	0x08003d90
 8003484:	08003d90 	.word	0x08003d90
 8003488:	08003d94 	.word	0x08003d94

0800348c <memset>:
 800348c:	4603      	mov	r3, r0
 800348e:	4402      	add	r2, r0
 8003490:	4293      	cmp	r3, r2
 8003492:	d100      	bne.n	8003496 <memset+0xa>
 8003494:	4770      	bx	lr
 8003496:	f803 1b01 	strb.w	r1, [r3], #1
 800349a:	e7f9      	b.n	8003490 <memset+0x4>

0800349c <siprintf>:
 800349c:	b40e      	push	{r1, r2, r3}
 800349e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034a2:	b500      	push	{lr}
 80034a4:	b09c      	sub	sp, #112	; 0x70
 80034a6:	ab1d      	add	r3, sp, #116	; 0x74
 80034a8:	9002      	str	r0, [sp, #8]
 80034aa:	9006      	str	r0, [sp, #24]
 80034ac:	9107      	str	r1, [sp, #28]
 80034ae:	9104      	str	r1, [sp, #16]
 80034b0:	4808      	ldr	r0, [pc, #32]	; (80034d4 <siprintf+0x38>)
 80034b2:	4909      	ldr	r1, [pc, #36]	; (80034d8 <siprintf+0x3c>)
 80034b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034b8:	9105      	str	r1, [sp, #20]
 80034ba:	6800      	ldr	r0, [r0, #0]
 80034bc:	a902      	add	r1, sp, #8
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	f000 f868 	bl	8003594 <_svfiprintf_r>
 80034c4:	2200      	movs	r2, #0
 80034c6:	9b02      	ldr	r3, [sp, #8]
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	b01c      	add	sp, #112	; 0x70
 80034cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d0:	b003      	add	sp, #12
 80034d2:	4770      	bx	lr
 80034d4:	20000048 	.word	0x20000048
 80034d8:	ffff0208 	.word	0xffff0208

080034dc <__ssputs_r>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	688e      	ldr	r6, [r1, #8]
 80034e2:	4682      	mov	sl, r0
 80034e4:	429e      	cmp	r6, r3
 80034e6:	460c      	mov	r4, r1
 80034e8:	4690      	mov	r8, r2
 80034ea:	461f      	mov	r7, r3
 80034ec:	d838      	bhi.n	8003560 <__ssputs_r+0x84>
 80034ee:	898a      	ldrh	r2, [r1, #12]
 80034f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034f4:	d032      	beq.n	800355c <__ssputs_r+0x80>
 80034f6:	6825      	ldr	r5, [r4, #0]
 80034f8:	6909      	ldr	r1, [r1, #16]
 80034fa:	3301      	adds	r3, #1
 80034fc:	eba5 0901 	sub.w	r9, r5, r1
 8003500:	6965      	ldr	r5, [r4, #20]
 8003502:	444b      	add	r3, r9
 8003504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800350c:	106d      	asrs	r5, r5, #1
 800350e:	429d      	cmp	r5, r3
 8003510:	bf38      	it	cc
 8003512:	461d      	movcc	r5, r3
 8003514:	0553      	lsls	r3, r2, #21
 8003516:	d531      	bpl.n	800357c <__ssputs_r+0xa0>
 8003518:	4629      	mov	r1, r5
 800351a:	f000 fb53 	bl	8003bc4 <_malloc_r>
 800351e:	4606      	mov	r6, r0
 8003520:	b950      	cbnz	r0, 8003538 <__ssputs_r+0x5c>
 8003522:	230c      	movs	r3, #12
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f8ca 3000 	str.w	r3, [sl]
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003538:	464a      	mov	r2, r9
 800353a:	6921      	ldr	r1, [r4, #16]
 800353c:	f000 face 	bl	8003adc <memcpy>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	6126      	str	r6, [r4, #16]
 800354e:	444e      	add	r6, r9
 8003550:	6026      	str	r6, [r4, #0]
 8003552:	463e      	mov	r6, r7
 8003554:	6165      	str	r5, [r4, #20]
 8003556:	eba5 0509 	sub.w	r5, r5, r9
 800355a:	60a5      	str	r5, [r4, #8]
 800355c:	42be      	cmp	r6, r7
 800355e:	d900      	bls.n	8003562 <__ssputs_r+0x86>
 8003560:	463e      	mov	r6, r7
 8003562:	4632      	mov	r2, r6
 8003564:	4641      	mov	r1, r8
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	f000 fac6 	bl	8003af8 <memmove>
 800356c:	68a3      	ldr	r3, [r4, #8]
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	1b9b      	subs	r3, r3, r6
 8003572:	4432      	add	r2, r6
 8003574:	2000      	movs	r0, #0
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	6022      	str	r2, [r4, #0]
 800357a:	e7db      	b.n	8003534 <__ssputs_r+0x58>
 800357c:	462a      	mov	r2, r5
 800357e:	f000 fb7b 	bl	8003c78 <_realloc_r>
 8003582:	4606      	mov	r6, r0
 8003584:	2800      	cmp	r0, #0
 8003586:	d1e1      	bne.n	800354c <__ssputs_r+0x70>
 8003588:	4650      	mov	r0, sl
 800358a:	6921      	ldr	r1, [r4, #16]
 800358c:	f000 face 	bl	8003b2c <_free_r>
 8003590:	e7c7      	b.n	8003522 <__ssputs_r+0x46>
	...

08003594 <_svfiprintf_r>:
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	4698      	mov	r8, r3
 800359a:	898b      	ldrh	r3, [r1, #12]
 800359c:	4607      	mov	r7, r0
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	460d      	mov	r5, r1
 80035a2:	4614      	mov	r4, r2
 80035a4:	b09d      	sub	sp, #116	; 0x74
 80035a6:	d50e      	bpl.n	80035c6 <_svfiprintf_r+0x32>
 80035a8:	690b      	ldr	r3, [r1, #16]
 80035aa:	b963      	cbnz	r3, 80035c6 <_svfiprintf_r+0x32>
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	f000 fb09 	bl	8003bc4 <_malloc_r>
 80035b2:	6028      	str	r0, [r5, #0]
 80035b4:	6128      	str	r0, [r5, #16]
 80035b6:	b920      	cbnz	r0, 80035c2 <_svfiprintf_r+0x2e>
 80035b8:	230c      	movs	r3, #12
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	e0d1      	b.n	8003766 <_svfiprintf_r+0x1d2>
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	616b      	str	r3, [r5, #20]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	2320      	movs	r3, #32
 80035cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d0:	2330      	movs	r3, #48	; 0x30
 80035d2:	f04f 0901 	mov.w	r9, #1
 80035d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003780 <_svfiprintf_r+0x1ec>
 80035de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e2:	4623      	mov	r3, r4
 80035e4:	469a      	mov	sl, r3
 80035e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ea:	b10a      	cbz	r2, 80035f0 <_svfiprintf_r+0x5c>
 80035ec:	2a25      	cmp	r2, #37	; 0x25
 80035ee:	d1f9      	bne.n	80035e4 <_svfiprintf_r+0x50>
 80035f0:	ebba 0b04 	subs.w	fp, sl, r4
 80035f4:	d00b      	beq.n	800360e <_svfiprintf_r+0x7a>
 80035f6:	465b      	mov	r3, fp
 80035f8:	4622      	mov	r2, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7ff ff6d 	bl	80034dc <__ssputs_r>
 8003602:	3001      	adds	r0, #1
 8003604:	f000 80aa 	beq.w	800375c <_svfiprintf_r+0x1c8>
 8003608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360a:	445a      	add	r2, fp
 800360c:	9209      	str	r2, [sp, #36]	; 0x24
 800360e:	f89a 3000 	ldrb.w	r3, [sl]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a2 	beq.w	800375c <_svfiprintf_r+0x1c8>
 8003618:	2300      	movs	r3, #0
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003622:	f10a 0a01 	add.w	sl, sl, #1
 8003626:	9304      	str	r3, [sp, #16]
 8003628:	9307      	str	r3, [sp, #28]
 800362a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800362e:	931a      	str	r3, [sp, #104]	; 0x68
 8003630:	4654      	mov	r4, sl
 8003632:	2205      	movs	r2, #5
 8003634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003638:	4851      	ldr	r0, [pc, #324]	; (8003780 <_svfiprintf_r+0x1ec>)
 800363a:	f000 fa41 	bl	8003ac0 <memchr>
 800363e:	9a04      	ldr	r2, [sp, #16]
 8003640:	b9d8      	cbnz	r0, 800367a <_svfiprintf_r+0xe6>
 8003642:	06d0      	lsls	r0, r2, #27
 8003644:	bf44      	itt	mi
 8003646:	2320      	movmi	r3, #32
 8003648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800364c:	0711      	lsls	r1, r2, #28
 800364e:	bf44      	itt	mi
 8003650:	232b      	movmi	r3, #43	; 0x2b
 8003652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003656:	f89a 3000 	ldrb.w	r3, [sl]
 800365a:	2b2a      	cmp	r3, #42	; 0x2a
 800365c:	d015      	beq.n	800368a <_svfiprintf_r+0xf6>
 800365e:	4654      	mov	r4, sl
 8003660:	2000      	movs	r0, #0
 8003662:	f04f 0c0a 	mov.w	ip, #10
 8003666:	9a07      	ldr	r2, [sp, #28]
 8003668:	4621      	mov	r1, r4
 800366a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800366e:	3b30      	subs	r3, #48	; 0x30
 8003670:	2b09      	cmp	r3, #9
 8003672:	d94e      	bls.n	8003712 <_svfiprintf_r+0x17e>
 8003674:	b1b0      	cbz	r0, 80036a4 <_svfiprintf_r+0x110>
 8003676:	9207      	str	r2, [sp, #28]
 8003678:	e014      	b.n	80036a4 <_svfiprintf_r+0x110>
 800367a:	eba0 0308 	sub.w	r3, r0, r8
 800367e:	fa09 f303 	lsl.w	r3, r9, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	46a2      	mov	sl, r4
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	e7d2      	b.n	8003630 <_svfiprintf_r+0x9c>
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	1d19      	adds	r1, r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	9103      	str	r1, [sp, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfbb      	ittet	lt
 8003696:	425b      	neglt	r3, r3
 8003698:	f042 0202 	orrlt.w	r2, r2, #2
 800369c:	9307      	strge	r3, [sp, #28]
 800369e:	9307      	strlt	r3, [sp, #28]
 80036a0:	bfb8      	it	lt
 80036a2:	9204      	strlt	r2, [sp, #16]
 80036a4:	7823      	ldrb	r3, [r4, #0]
 80036a6:	2b2e      	cmp	r3, #46	; 0x2e
 80036a8:	d10c      	bne.n	80036c4 <_svfiprintf_r+0x130>
 80036aa:	7863      	ldrb	r3, [r4, #1]
 80036ac:	2b2a      	cmp	r3, #42	; 0x2a
 80036ae:	d135      	bne.n	800371c <_svfiprintf_r+0x188>
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	3402      	adds	r4, #2
 80036b4:	1d1a      	adds	r2, r3, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	9203      	str	r2, [sp, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfb8      	it	lt
 80036be:	f04f 33ff 	movlt.w	r3, #4294967295
 80036c2:	9305      	str	r3, [sp, #20]
 80036c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003790 <_svfiprintf_r+0x1fc>
 80036c8:	2203      	movs	r2, #3
 80036ca:	4650      	mov	r0, sl
 80036cc:	7821      	ldrb	r1, [r4, #0]
 80036ce:	f000 f9f7 	bl	8003ac0 <memchr>
 80036d2:	b140      	cbz	r0, 80036e6 <_svfiprintf_r+0x152>
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	eba0 000a 	sub.w	r0, r0, sl
 80036da:	fa03 f000 	lsl.w	r0, r3, r0
 80036de:	9b04      	ldr	r3, [sp, #16]
 80036e0:	3401      	adds	r4, #1
 80036e2:	4303      	orrs	r3, r0
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ea:	2206      	movs	r2, #6
 80036ec:	4825      	ldr	r0, [pc, #148]	; (8003784 <_svfiprintf_r+0x1f0>)
 80036ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f2:	f000 f9e5 	bl	8003ac0 <memchr>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d038      	beq.n	800376c <_svfiprintf_r+0x1d8>
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <_svfiprintf_r+0x1f4>)
 80036fc:	bb1b      	cbnz	r3, 8003746 <_svfiprintf_r+0x1b2>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	3307      	adds	r3, #7
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	3308      	adds	r3, #8
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370c:	4433      	add	r3, r6
 800370e:	9309      	str	r3, [sp, #36]	; 0x24
 8003710:	e767      	b.n	80035e2 <_svfiprintf_r+0x4e>
 8003712:	460c      	mov	r4, r1
 8003714:	2001      	movs	r0, #1
 8003716:	fb0c 3202 	mla	r2, ip, r2, r3
 800371a:	e7a5      	b.n	8003668 <_svfiprintf_r+0xd4>
 800371c:	2300      	movs	r3, #0
 800371e:	f04f 0c0a 	mov.w	ip, #10
 8003722:	4619      	mov	r1, r3
 8003724:	3401      	adds	r4, #1
 8003726:	9305      	str	r3, [sp, #20]
 8003728:	4620      	mov	r0, r4
 800372a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800372e:	3a30      	subs	r2, #48	; 0x30
 8003730:	2a09      	cmp	r2, #9
 8003732:	d903      	bls.n	800373c <_svfiprintf_r+0x1a8>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0c5      	beq.n	80036c4 <_svfiprintf_r+0x130>
 8003738:	9105      	str	r1, [sp, #20]
 800373a:	e7c3      	b.n	80036c4 <_svfiprintf_r+0x130>
 800373c:	4604      	mov	r4, r0
 800373e:	2301      	movs	r3, #1
 8003740:	fb0c 2101 	mla	r1, ip, r1, r2
 8003744:	e7f0      	b.n	8003728 <_svfiprintf_r+0x194>
 8003746:	ab03      	add	r3, sp, #12
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	462a      	mov	r2, r5
 800374c:	4638      	mov	r0, r7
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <_svfiprintf_r+0x1f8>)
 8003750:	a904      	add	r1, sp, #16
 8003752:	f3af 8000 	nop.w
 8003756:	1c42      	adds	r2, r0, #1
 8003758:	4606      	mov	r6, r0
 800375a:	d1d6      	bne.n	800370a <_svfiprintf_r+0x176>
 800375c:	89ab      	ldrh	r3, [r5, #12]
 800375e:	065b      	lsls	r3, r3, #25
 8003760:	f53f af2c 	bmi.w	80035bc <_svfiprintf_r+0x28>
 8003764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003766:	b01d      	add	sp, #116	; 0x74
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	ab03      	add	r3, sp, #12
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	462a      	mov	r2, r5
 8003772:	4638      	mov	r0, r7
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <_svfiprintf_r+0x1f8>)
 8003776:	a904      	add	r1, sp, #16
 8003778:	f000 f87c 	bl	8003874 <_printf_i>
 800377c:	e7eb      	b.n	8003756 <_svfiprintf_r+0x1c2>
 800377e:	bf00      	nop
 8003780:	08003d5c 	.word	0x08003d5c
 8003784:	08003d66 	.word	0x08003d66
 8003788:	00000000 	.word	0x00000000
 800378c:	080034dd 	.word	0x080034dd
 8003790:	08003d62 	.word	0x08003d62

08003794 <_printf_common>:
 8003794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	4616      	mov	r6, r2
 800379a:	4699      	mov	r9, r3
 800379c:	688a      	ldr	r2, [r1, #8]
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	4607      	mov	r7, r0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bfb8      	it	lt
 80037a6:	4613      	movlt	r3, r2
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037ae:	460c      	mov	r4, r1
 80037b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037b4:	b10a      	cbz	r2, 80037ba <_printf_common+0x26>
 80037b6:	3301      	adds	r3, #1
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	0699      	lsls	r1, r3, #26
 80037be:	bf42      	ittt	mi
 80037c0:	6833      	ldrmi	r3, [r6, #0]
 80037c2:	3302      	addmi	r3, #2
 80037c4:	6033      	strmi	r3, [r6, #0]
 80037c6:	6825      	ldr	r5, [r4, #0]
 80037c8:	f015 0506 	ands.w	r5, r5, #6
 80037cc:	d106      	bne.n	80037dc <_printf_common+0x48>
 80037ce:	f104 0a19 	add.w	sl, r4, #25
 80037d2:	68e3      	ldr	r3, [r4, #12]
 80037d4:	6832      	ldr	r2, [r6, #0]
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	42ab      	cmp	r3, r5
 80037da:	dc28      	bgt.n	800382e <_printf_common+0x9a>
 80037dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e0:	1e13      	subs	r3, r2, #0
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	bf18      	it	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	0692      	lsls	r2, r2, #26
 80037ea:	d42d      	bmi.n	8003848 <_printf_common+0xb4>
 80037ec:	4649      	mov	r1, r9
 80037ee:	4638      	mov	r0, r7
 80037f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f4:	47c0      	blx	r8
 80037f6:	3001      	adds	r0, #1
 80037f8:	d020      	beq.n	800383c <_printf_common+0xa8>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	68e5      	ldr	r5, [r4, #12]
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf18      	it	ne
 8003806:	2500      	movne	r5, #0
 8003808:	6832      	ldr	r2, [r6, #0]
 800380a:	f04f 0600 	mov.w	r6, #0
 800380e:	68a3      	ldr	r3, [r4, #8]
 8003810:	bf08      	it	eq
 8003812:	1aad      	subeq	r5, r5, r2
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	bf08      	it	eq
 8003818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800381c:	4293      	cmp	r3, r2
 800381e:	bfc4      	itt	gt
 8003820:	1a9b      	subgt	r3, r3, r2
 8003822:	18ed      	addgt	r5, r5, r3
 8003824:	341a      	adds	r4, #26
 8003826:	42b5      	cmp	r5, r6
 8003828:	d11a      	bne.n	8003860 <_printf_common+0xcc>
 800382a:	2000      	movs	r0, #0
 800382c:	e008      	b.n	8003840 <_printf_common+0xac>
 800382e:	2301      	movs	r3, #1
 8003830:	4652      	mov	r2, sl
 8003832:	4649      	mov	r1, r9
 8003834:	4638      	mov	r0, r7
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d103      	bne.n	8003844 <_printf_common+0xb0>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	3501      	adds	r5, #1
 8003846:	e7c4      	b.n	80037d2 <_printf_common+0x3e>
 8003848:	2030      	movs	r0, #48	; 0x30
 800384a:	18e1      	adds	r1, r4, r3
 800384c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003856:	4422      	add	r2, r4
 8003858:	3302      	adds	r3, #2
 800385a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800385e:	e7c5      	b.n	80037ec <_printf_common+0x58>
 8003860:	2301      	movs	r3, #1
 8003862:	4622      	mov	r2, r4
 8003864:	4649      	mov	r1, r9
 8003866:	4638      	mov	r0, r7
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d0e6      	beq.n	800383c <_printf_common+0xa8>
 800386e:	3601      	adds	r6, #1
 8003870:	e7d9      	b.n	8003826 <_printf_common+0x92>
	...

08003874 <_printf_i>:
 8003874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	460c      	mov	r4, r1
 800387a:	7e27      	ldrb	r7, [r4, #24]
 800387c:	4691      	mov	r9, r2
 800387e:	2f78      	cmp	r7, #120	; 0x78
 8003880:	4680      	mov	r8, r0
 8003882:	469a      	mov	sl, r3
 8003884:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388a:	d807      	bhi.n	800389c <_printf_i+0x28>
 800388c:	2f62      	cmp	r7, #98	; 0x62
 800388e:	d80a      	bhi.n	80038a6 <_printf_i+0x32>
 8003890:	2f00      	cmp	r7, #0
 8003892:	f000 80d9 	beq.w	8003a48 <_printf_i+0x1d4>
 8003896:	2f58      	cmp	r7, #88	; 0x58
 8003898:	f000 80a4 	beq.w	80039e4 <_printf_i+0x170>
 800389c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a4:	e03a      	b.n	800391c <_printf_i+0xa8>
 80038a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038aa:	2b15      	cmp	r3, #21
 80038ac:	d8f6      	bhi.n	800389c <_printf_i+0x28>
 80038ae:	a001      	add	r0, pc, #4	; (adr r0, 80038b4 <_printf_i+0x40>)
 80038b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038b4:	0800390d 	.word	0x0800390d
 80038b8:	08003921 	.word	0x08003921
 80038bc:	0800389d 	.word	0x0800389d
 80038c0:	0800389d 	.word	0x0800389d
 80038c4:	0800389d 	.word	0x0800389d
 80038c8:	0800389d 	.word	0x0800389d
 80038cc:	08003921 	.word	0x08003921
 80038d0:	0800389d 	.word	0x0800389d
 80038d4:	0800389d 	.word	0x0800389d
 80038d8:	0800389d 	.word	0x0800389d
 80038dc:	0800389d 	.word	0x0800389d
 80038e0:	08003a2f 	.word	0x08003a2f
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003a11 	.word	0x08003a11
 80038ec:	0800389d 	.word	0x0800389d
 80038f0:	0800389d 	.word	0x0800389d
 80038f4:	08003a51 	.word	0x08003a51
 80038f8:	0800389d 	.word	0x0800389d
 80038fc:	08003951 	.word	0x08003951
 8003900:	0800389d 	.word	0x0800389d
 8003904:	0800389d 	.word	0x0800389d
 8003908:	08003a19 	.word	0x08003a19
 800390c:	680b      	ldr	r3, [r1, #0]
 800390e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	600a      	str	r2, [r1, #0]
 8003918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800391c:	2301      	movs	r3, #1
 800391e:	e0a4      	b.n	8003a6a <_printf_i+0x1f6>
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	6808      	ldr	r0, [r1, #0]
 8003924:	062e      	lsls	r6, r5, #24
 8003926:	f100 0304 	add.w	r3, r0, #4
 800392a:	d50a      	bpl.n	8003942 <_printf_i+0xce>
 800392c:	6805      	ldr	r5, [r0, #0]
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	2d00      	cmp	r5, #0
 8003932:	da03      	bge.n	800393c <_printf_i+0xc8>
 8003934:	232d      	movs	r3, #45	; 0x2d
 8003936:	426d      	negs	r5, r5
 8003938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800393c:	230a      	movs	r3, #10
 800393e:	485e      	ldr	r0, [pc, #376]	; (8003ab8 <_printf_i+0x244>)
 8003940:	e019      	b.n	8003976 <_printf_i+0x102>
 8003942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003946:	6805      	ldr	r5, [r0, #0]
 8003948:	600b      	str	r3, [r1, #0]
 800394a:	bf18      	it	ne
 800394c:	b22d      	sxthne	r5, r5
 800394e:	e7ef      	b.n	8003930 <_printf_i+0xbc>
 8003950:	680b      	ldr	r3, [r1, #0]
 8003952:	6825      	ldr	r5, [r4, #0]
 8003954:	1d18      	adds	r0, r3, #4
 8003956:	6008      	str	r0, [r1, #0]
 8003958:	0628      	lsls	r0, r5, #24
 800395a:	d501      	bpl.n	8003960 <_printf_i+0xec>
 800395c:	681d      	ldr	r5, [r3, #0]
 800395e:	e002      	b.n	8003966 <_printf_i+0xf2>
 8003960:	0669      	lsls	r1, r5, #25
 8003962:	d5fb      	bpl.n	800395c <_printf_i+0xe8>
 8003964:	881d      	ldrh	r5, [r3, #0]
 8003966:	2f6f      	cmp	r7, #111	; 0x6f
 8003968:	bf0c      	ite	eq
 800396a:	2308      	moveq	r3, #8
 800396c:	230a      	movne	r3, #10
 800396e:	4852      	ldr	r0, [pc, #328]	; (8003ab8 <_printf_i+0x244>)
 8003970:	2100      	movs	r1, #0
 8003972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003976:	6866      	ldr	r6, [r4, #4]
 8003978:	2e00      	cmp	r6, #0
 800397a:	bfa8      	it	ge
 800397c:	6821      	ldrge	r1, [r4, #0]
 800397e:	60a6      	str	r6, [r4, #8]
 8003980:	bfa4      	itt	ge
 8003982:	f021 0104 	bicge.w	r1, r1, #4
 8003986:	6021      	strge	r1, [r4, #0]
 8003988:	b90d      	cbnz	r5, 800398e <_printf_i+0x11a>
 800398a:	2e00      	cmp	r6, #0
 800398c:	d04d      	beq.n	8003a2a <_printf_i+0x1b6>
 800398e:	4616      	mov	r6, r2
 8003990:	fbb5 f1f3 	udiv	r1, r5, r3
 8003994:	fb03 5711 	mls	r7, r3, r1, r5
 8003998:	5dc7      	ldrb	r7, [r0, r7]
 800399a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800399e:	462f      	mov	r7, r5
 80039a0:	42bb      	cmp	r3, r7
 80039a2:	460d      	mov	r5, r1
 80039a4:	d9f4      	bls.n	8003990 <_printf_i+0x11c>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d10b      	bne.n	80039c2 <_printf_i+0x14e>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	07df      	lsls	r7, r3, #31
 80039ae:	d508      	bpl.n	80039c2 <_printf_i+0x14e>
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	6861      	ldr	r1, [r4, #4]
 80039b4:	4299      	cmp	r1, r3
 80039b6:	bfde      	ittt	le
 80039b8:	2330      	movle	r3, #48	; 0x30
 80039ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039c2:	1b92      	subs	r2, r2, r6
 80039c4:	6122      	str	r2, [r4, #16]
 80039c6:	464b      	mov	r3, r9
 80039c8:	4621      	mov	r1, r4
 80039ca:	4640      	mov	r0, r8
 80039cc:	f8cd a000 	str.w	sl, [sp]
 80039d0:	aa03      	add	r2, sp, #12
 80039d2:	f7ff fedf 	bl	8003794 <_printf_common>
 80039d6:	3001      	adds	r0, #1
 80039d8:	d14c      	bne.n	8003a74 <_printf_i+0x200>
 80039da:	f04f 30ff 	mov.w	r0, #4294967295
 80039de:	b004      	add	sp, #16
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	4834      	ldr	r0, [pc, #208]	; (8003ab8 <_printf_i+0x244>)
 80039e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ea:	680e      	ldr	r6, [r1, #0]
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80039f2:	061f      	lsls	r7, r3, #24
 80039f4:	600e      	str	r6, [r1, #0]
 80039f6:	d514      	bpl.n	8003a22 <_printf_i+0x1ae>
 80039f8:	07d9      	lsls	r1, r3, #31
 80039fa:	bf44      	itt	mi
 80039fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003a00:	6023      	strmi	r3, [r4, #0]
 8003a02:	b91d      	cbnz	r5, 8003a0c <_printf_i+0x198>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f023 0320 	bic.w	r3, r3, #32
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	e7af      	b.n	8003970 <_printf_i+0xfc>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f043 0320 	orr.w	r3, r3, #32
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	2378      	movs	r3, #120	; 0x78
 8003a1a:	4828      	ldr	r0, [pc, #160]	; (8003abc <_printf_i+0x248>)
 8003a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a20:	e7e3      	b.n	80039ea <_printf_i+0x176>
 8003a22:	065e      	lsls	r6, r3, #25
 8003a24:	bf48      	it	mi
 8003a26:	b2ad      	uxthmi	r5, r5
 8003a28:	e7e6      	b.n	80039f8 <_printf_i+0x184>
 8003a2a:	4616      	mov	r6, r2
 8003a2c:	e7bb      	b.n	80039a6 <_printf_i+0x132>
 8003a2e:	680b      	ldr	r3, [r1, #0]
 8003a30:	6826      	ldr	r6, [r4, #0]
 8003a32:	1d1d      	adds	r5, r3, #4
 8003a34:	6960      	ldr	r0, [r4, #20]
 8003a36:	600d      	str	r5, [r1, #0]
 8003a38:	0635      	lsls	r5, r6, #24
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	d501      	bpl.n	8003a42 <_printf_i+0x1ce>
 8003a3e:	6018      	str	r0, [r3, #0]
 8003a40:	e002      	b.n	8003a48 <_printf_i+0x1d4>
 8003a42:	0671      	lsls	r1, r6, #25
 8003a44:	d5fb      	bpl.n	8003a3e <_printf_i+0x1ca>
 8003a46:	8018      	strh	r0, [r3, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4616      	mov	r6, r2
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	e7ba      	b.n	80039c6 <_printf_i+0x152>
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	600a      	str	r2, [r1, #0]
 8003a56:	681e      	ldr	r6, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	6862      	ldr	r2, [r4, #4]
 8003a5e:	f000 f82f 	bl	8003ac0 <memchr>
 8003a62:	b108      	cbz	r0, 8003a68 <_printf_i+0x1f4>
 8003a64:	1b80      	subs	r0, r0, r6
 8003a66:	6060      	str	r0, [r4, #4]
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	6123      	str	r3, [r4, #16]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a72:	e7a8      	b.n	80039c6 <_printf_i+0x152>
 8003a74:	4632      	mov	r2, r6
 8003a76:	4649      	mov	r1, r9
 8003a78:	4640      	mov	r0, r8
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	47d0      	blx	sl
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d0ab      	beq.n	80039da <_printf_i+0x166>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	079b      	lsls	r3, r3, #30
 8003a86:	d413      	bmi.n	8003ab0 <_printf_i+0x23c>
 8003a88:	68e0      	ldr	r0, [r4, #12]
 8003a8a:	9b03      	ldr	r3, [sp, #12]
 8003a8c:	4298      	cmp	r0, r3
 8003a8e:	bfb8      	it	lt
 8003a90:	4618      	movlt	r0, r3
 8003a92:	e7a4      	b.n	80039de <_printf_i+0x16a>
 8003a94:	2301      	movs	r3, #1
 8003a96:	4632      	mov	r2, r6
 8003a98:	4649      	mov	r1, r9
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	47d0      	blx	sl
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d09b      	beq.n	80039da <_printf_i+0x166>
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	68e3      	ldr	r3, [r4, #12]
 8003aa6:	9903      	ldr	r1, [sp, #12]
 8003aa8:	1a5b      	subs	r3, r3, r1
 8003aaa:	42ab      	cmp	r3, r5
 8003aac:	dcf2      	bgt.n	8003a94 <_printf_i+0x220>
 8003aae:	e7eb      	b.n	8003a88 <_printf_i+0x214>
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	f104 0619 	add.w	r6, r4, #25
 8003ab6:	e7f5      	b.n	8003aa4 <_printf_i+0x230>
 8003ab8:	08003d6d 	.word	0x08003d6d
 8003abc:	08003d7e 	.word	0x08003d7e

08003ac0 <memchr>:
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	b2c9      	uxtb	r1, r1
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	d101      	bne.n	8003ad2 <memchr+0x12>
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e003      	b.n	8003ada <memchr+0x1a>
 8003ad2:	7804      	ldrb	r4, [r0, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	428c      	cmp	r4, r1
 8003ad8:	d1f6      	bne.n	8003ac8 <memchr+0x8>
 8003ada:	bd10      	pop	{r4, pc}

08003adc <memcpy>:
 8003adc:	440a      	add	r2, r1
 8003ade:	4291      	cmp	r1, r2
 8003ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ae4:	d100      	bne.n	8003ae8 <memcpy+0xc>
 8003ae6:	4770      	bx	lr
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aee:	4291      	cmp	r1, r2
 8003af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af4:	d1f9      	bne.n	8003aea <memcpy+0xe>
 8003af6:	bd10      	pop	{r4, pc}

08003af8 <memmove>:
 8003af8:	4288      	cmp	r0, r1
 8003afa:	b510      	push	{r4, lr}
 8003afc:	eb01 0402 	add.w	r4, r1, r2
 8003b00:	d902      	bls.n	8003b08 <memmove+0x10>
 8003b02:	4284      	cmp	r4, r0
 8003b04:	4623      	mov	r3, r4
 8003b06:	d807      	bhi.n	8003b18 <memmove+0x20>
 8003b08:	1e43      	subs	r3, r0, #1
 8003b0a:	42a1      	cmp	r1, r4
 8003b0c:	d008      	beq.n	8003b20 <memmove+0x28>
 8003b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b16:	e7f8      	b.n	8003b0a <memmove+0x12>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4402      	add	r2, r0
 8003b1c:	428a      	cmp	r2, r1
 8003b1e:	d100      	bne.n	8003b22 <memmove+0x2a>
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b2a:	e7f7      	b.n	8003b1c <memmove+0x24>

08003b2c <_free_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4605      	mov	r5, r0
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d043      	beq.n	8003bbc <_free_r+0x90>
 8003b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b38:	1f0c      	subs	r4, r1, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bfb8      	it	lt
 8003b3e:	18e4      	addlt	r4, r4, r3
 8003b40:	f000 f8d0 	bl	8003ce4 <__malloc_lock>
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <_free_r+0x94>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	4610      	mov	r0, r2
 8003b4a:	b933      	cbnz	r3, 8003b5a <_free_r+0x2e>
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	6014      	str	r4, [r2, #0]
 8003b50:	4628      	mov	r0, r5
 8003b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b56:	f000 b8cb 	b.w	8003cf0 <__malloc_unlock>
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	d90a      	bls.n	8003b74 <_free_r+0x48>
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	1862      	adds	r2, r4, r1
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bf01      	itttt	eq
 8003b66:	681a      	ldreq	r2, [r3, #0]
 8003b68:	685b      	ldreq	r3, [r3, #4]
 8003b6a:	1852      	addeq	r2, r2, r1
 8003b6c:	6022      	streq	r2, [r4, #0]
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	6004      	str	r4, [r0, #0]
 8003b72:	e7ed      	b.n	8003b50 <_free_r+0x24>
 8003b74:	461a      	mov	r2, r3
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	b10b      	cbz	r3, 8003b7e <_free_r+0x52>
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	d9fa      	bls.n	8003b74 <_free_r+0x48>
 8003b7e:	6811      	ldr	r1, [r2, #0]
 8003b80:	1850      	adds	r0, r2, r1
 8003b82:	42a0      	cmp	r0, r4
 8003b84:	d10b      	bne.n	8003b9e <_free_r+0x72>
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	4401      	add	r1, r0
 8003b8a:	1850      	adds	r0, r2, r1
 8003b8c:	4283      	cmp	r3, r0
 8003b8e:	6011      	str	r1, [r2, #0]
 8003b90:	d1de      	bne.n	8003b50 <_free_r+0x24>
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4401      	add	r1, r0
 8003b98:	6011      	str	r1, [r2, #0]
 8003b9a:	6053      	str	r3, [r2, #4]
 8003b9c:	e7d8      	b.n	8003b50 <_free_r+0x24>
 8003b9e:	d902      	bls.n	8003ba6 <_free_r+0x7a>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	e7d4      	b.n	8003b50 <_free_r+0x24>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	1821      	adds	r1, r4, r0
 8003baa:	428b      	cmp	r3, r1
 8003bac:	bf01      	itttt	eq
 8003bae:	6819      	ldreq	r1, [r3, #0]
 8003bb0:	685b      	ldreq	r3, [r3, #4]
 8003bb2:	1809      	addeq	r1, r1, r0
 8003bb4:	6021      	streq	r1, [r4, #0]
 8003bb6:	6063      	str	r3, [r4, #4]
 8003bb8:	6054      	str	r4, [r2, #4]
 8003bba:	e7c9      	b.n	8003b50 <_free_r+0x24>
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000140 	.word	0x20000140

08003bc4 <_malloc_r>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	1ccd      	adds	r5, r1, #3
 8003bc8:	f025 0503 	bic.w	r5, r5, #3
 8003bcc:	3508      	adds	r5, #8
 8003bce:	2d0c      	cmp	r5, #12
 8003bd0:	bf38      	it	cc
 8003bd2:	250c      	movcc	r5, #12
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	db01      	blt.n	8003bde <_malloc_r+0x1a>
 8003bda:	42a9      	cmp	r1, r5
 8003bdc:	d903      	bls.n	8003be6 <_malloc_r+0x22>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	2000      	movs	r0, #0
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be6:	f000 f87d 	bl	8003ce4 <__malloc_lock>
 8003bea:	4921      	ldr	r1, [pc, #132]	; (8003c70 <_malloc_r+0xac>)
 8003bec:	680a      	ldr	r2, [r1, #0]
 8003bee:	4614      	mov	r4, r2
 8003bf0:	b99c      	cbnz	r4, 8003c1a <_malloc_r+0x56>
 8003bf2:	4f20      	ldr	r7, [pc, #128]	; (8003c74 <_malloc_r+0xb0>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	b923      	cbnz	r3, 8003c02 <_malloc_r+0x3e>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f000 f862 	bl	8003cc4 <_sbrk_r>
 8003c00:	6038      	str	r0, [r7, #0]
 8003c02:	4629      	mov	r1, r5
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f85d 	bl	8003cc4 <_sbrk_r>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d123      	bne.n	8003c56 <_malloc_r+0x92>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	4630      	mov	r0, r6
 8003c12:	6033      	str	r3, [r6, #0]
 8003c14:	f000 f86c 	bl	8003cf0 <__malloc_unlock>
 8003c18:	e7e3      	b.n	8003be2 <_malloc_r+0x1e>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	1b5b      	subs	r3, r3, r5
 8003c1e:	d417      	bmi.n	8003c50 <_malloc_r+0x8c>
 8003c20:	2b0b      	cmp	r3, #11
 8003c22:	d903      	bls.n	8003c2c <_malloc_r+0x68>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	441c      	add	r4, r3
 8003c28:	6025      	str	r5, [r4, #0]
 8003c2a:	e004      	b.n	8003c36 <_malloc_r+0x72>
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	42a2      	cmp	r2, r4
 8003c30:	bf0c      	ite	eq
 8003c32:	600b      	streq	r3, [r1, #0]
 8003c34:	6053      	strne	r3, [r2, #4]
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 f85a 	bl	8003cf0 <__malloc_unlock>
 8003c3c:	f104 000b 	add.w	r0, r4, #11
 8003c40:	1d23      	adds	r3, r4, #4
 8003c42:	f020 0007 	bic.w	r0, r0, #7
 8003c46:	1ac2      	subs	r2, r0, r3
 8003c48:	d0cc      	beq.n	8003be4 <_malloc_r+0x20>
 8003c4a:	1a1b      	subs	r3, r3, r0
 8003c4c:	50a3      	str	r3, [r4, r2]
 8003c4e:	e7c9      	b.n	8003be4 <_malloc_r+0x20>
 8003c50:	4622      	mov	r2, r4
 8003c52:	6864      	ldr	r4, [r4, #4]
 8003c54:	e7cc      	b.n	8003bf0 <_malloc_r+0x2c>
 8003c56:	1cc4      	adds	r4, r0, #3
 8003c58:	f024 0403 	bic.w	r4, r4, #3
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d0e3      	beq.n	8003c28 <_malloc_r+0x64>
 8003c60:	1a21      	subs	r1, r4, r0
 8003c62:	4630      	mov	r0, r6
 8003c64:	f000 f82e 	bl	8003cc4 <_sbrk_r>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d1dd      	bne.n	8003c28 <_malloc_r+0x64>
 8003c6c:	e7cf      	b.n	8003c0e <_malloc_r+0x4a>
 8003c6e:	bf00      	nop
 8003c70:	20000140 	.word	0x20000140
 8003c74:	20000144 	.word	0x20000144

08003c78 <_realloc_r>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	4607      	mov	r7, r0
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	460e      	mov	r6, r1
 8003c80:	b921      	cbnz	r1, 8003c8c <_realloc_r+0x14>
 8003c82:	4611      	mov	r1, r2
 8003c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c88:	f7ff bf9c 	b.w	8003bc4 <_malloc_r>
 8003c8c:	b922      	cbnz	r2, 8003c98 <_realloc_r+0x20>
 8003c8e:	f7ff ff4d 	bl	8003b2c <_free_r>
 8003c92:	4625      	mov	r5, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c98:	f000 f830 	bl	8003cfc <_malloc_usable_size_r>
 8003c9c:	42a0      	cmp	r0, r4
 8003c9e:	d20f      	bcs.n	8003cc0 <_realloc_r+0x48>
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f7ff ff8e 	bl	8003bc4 <_malloc_r>
 8003ca8:	4605      	mov	r5, r0
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d0f2      	beq.n	8003c94 <_realloc_r+0x1c>
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	f7ff ff13 	bl	8003adc <memcpy>
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f7ff ff37 	bl	8003b2c <_free_r>
 8003cbe:	e7e9      	b.n	8003c94 <_realloc_r+0x1c>
 8003cc0:	4635      	mov	r5, r6
 8003cc2:	e7e7      	b.n	8003c94 <_realloc_r+0x1c>

08003cc4 <_sbrk_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_sbrk_r+0x1c>)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fd fa3a 	bl	8001148 <_sbrk>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_sbrk_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_sbrk_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000574 	.word	0x20000574

08003ce4 <__malloc_lock>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	; (8003cec <__malloc_lock+0x8>)
 8003ce6:	f000 b811 	b.w	8003d0c <__retarget_lock_acquire_recursive>
 8003cea:	bf00      	nop
 8003cec:	2000057c 	.word	0x2000057c

08003cf0 <__malloc_unlock>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__malloc_unlock+0x8>)
 8003cf2:	f000 b80c 	b.w	8003d0e <__retarget_lock_release_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000057c 	.word	0x2000057c

08003cfc <_malloc_usable_size_r>:
 8003cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d00:	1f18      	subs	r0, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfbc      	itt	lt
 8003d06:	580b      	ldrlt	r3, [r1, r0]
 8003d08:	18c0      	addlt	r0, r0, r3
 8003d0a:	4770      	bx	lr

08003d0c <__retarget_lock_acquire_recursive>:
 8003d0c:	4770      	bx	lr

08003d0e <__retarget_lock_release_recursive>:
 8003d0e:	4770      	bx	lr

08003d10 <_init>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr

08003d1c <_fini>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr
