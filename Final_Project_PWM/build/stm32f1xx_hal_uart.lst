ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_UART_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_UART_Init
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_UART_Init:
  25              	.LFB65:
  26              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 2


  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 3


  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     respectively @ref HAL_UART_RegisterRxEventCallback() , @ref HAL_UART_UnRegisterRxEventCallback(
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 4


 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     where number of data to be received is unknown).
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         as triggers for updating reception status to caller :
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                for 1 frame time, after last received byte.
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two mode of transfer:
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            are returned by function after finishing transfer.
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            These API's return the HAL status.
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API:
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 5


 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.</center></h2>
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 6


 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 7


 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  27              		.loc 1 353 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
  40              		.loc 1 355 6
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 002B     		cmp	r3, #0
  43 000c 01D1     		bne	.L2
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 8


  44              		.loc 1 357 12
  45 000e 0123     		movs	r3, #1
  46 0010 3FE0     		b	.L3
  47              	.L2:
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  48              		.loc 1 376 12
  49 0012 7B68     		ldr	r3, [r7, #4]
  50 0014 93F83D30 		ldrb	r3, [r3, #61]
  51 0018 DBB2     		uxtb	r3, r3
  52              		.loc 1 376 6
  53 001a 002B     		cmp	r3, #0
  54 001c 06D1     		bne	.L4
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  55              		.loc 1 379 17
  56 001e 7B68     		ldr	r3, [r7, #4]
  57 0020 0022     		movs	r2, #0
  58 0022 83F83C20 		strb	r2, [r3, #60]
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  59              		.loc 1 393 5
  60 0026 7868     		ldr	r0, [r7, #4]
  61 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  62              	.L4:
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 9


 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  63              		.loc 1 397 17
  64 002c 7B68     		ldr	r3, [r7, #4]
  65 002e 2422     		movs	r2, #36
  66 0030 83F83D20 		strb	r2, [r3, #61]
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  67              		.loc 1 400 3
  68 0034 7B68     		ldr	r3, [r7, #4]
  69 0036 1B68     		ldr	r3, [r3]
  70 0038 DA68     		ldr	r2, [r3, #12]
  71 003a 7B68     		ldr	r3, [r7, #4]
  72 003c 1B68     		ldr	r3, [r3]
  73 003e 22F40052 		bic	r2, r2, #8192
  74 0042 DA60     		str	r2, [r3, #12]
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  75              		.loc 1 403 3
  76 0044 7868     		ldr	r0, [r7, #4]
  77 0046 FFF7FEFF 		bl	UART_SetConfig
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  78              		.loc 1 408 3
  79 004a 7B68     		ldr	r3, [r7, #4]
  80 004c 1B68     		ldr	r3, [r3]
  81 004e 1A69     		ldr	r2, [r3, #16]
  82 0050 7B68     		ldr	r3, [r7, #4]
  83 0052 1B68     		ldr	r3, [r3]
  84 0054 22F49042 		bic	r2, r2, #18432
  85 0058 1A61     		str	r2, [r3, #16]
 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  86              		.loc 1 409 3
  87 005a 7B68     		ldr	r3, [r7, #4]
  88 005c 1B68     		ldr	r3, [r3]
  89 005e 5A69     		ldr	r2, [r3, #20]
  90 0060 7B68     		ldr	r3, [r7, #4]
  91 0062 1B68     		ldr	r3, [r3]
  92 0064 22F02A02 		bic	r2, r2, #42
  93 0068 5A61     		str	r2, [r3, #20]
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  94              		.loc 1 412 3
  95 006a 7B68     		ldr	r3, [r7, #4]
  96 006c 1B68     		ldr	r3, [r3]
  97 006e DA68     		ldr	r2, [r3, #12]
  98 0070 7B68     		ldr	r3, [r7, #4]
  99 0072 1B68     		ldr	r3, [r3]
 100 0074 42F40052 		orr	r2, r2, #8192
 101 0078 DA60     		str	r2, [r3, #12]
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 10


 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 102              		.loc 1 415 20
 103 007a 7B68     		ldr	r3, [r7, #4]
 104 007c 0022     		movs	r2, #0
 105 007e 1A64     		str	r2, [r3, #64]
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 106              		.loc 1 416 17
 107 0080 7B68     		ldr	r3, [r7, #4]
 108 0082 2022     		movs	r2, #32
 109 0084 83F83D20 		strb	r2, [r3, #61]
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 110              		.loc 1 417 18
 111 0088 7B68     		ldr	r3, [r7, #4]
 112 008a 2022     		movs	r2, #32
 113 008c 83F83E20 		strb	r2, [r3, #62]
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 114              		.loc 1 419 10
 115 0090 0023     		movs	r3, #0
 116              	.L3:
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 117              		.loc 1 420 1
 118 0092 1846     		mov	r0, r3
 119 0094 0837     		adds	r7, r7, #8
 120              		.cfi_def_cfa_offset 8
 121 0096 BD46     		mov	sp, r7
 122              		.cfi_def_cfa_register 13
 123              		@ sp needed
 124 0098 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE65:
 128              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 129              		.align	1
 130              		.global	HAL_HalfDuplex_Init
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	HAL_HalfDuplex_Init:
 137              	.LFB66:
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 138              		.loc 1 430 1
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 11


 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 82B0     		sub	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 150 0006 7860     		str	r0, [r7, #4]
 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 151              		.loc 1 432 6
 152 0008 7B68     		ldr	r3, [r7, #4]
 153 000a 002B     		cmp	r3, #0
 154 000c 01D1     		bne	.L6
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 155              		.loc 1 434 12
 156 000e 0123     		movs	r3, #1
 157 0010 47E0     		b	.L7
 158              	.L6:
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 159              		.loc 1 444 12
 160 0012 7B68     		ldr	r3, [r7, #4]
 161 0014 93F83D30 		ldrb	r3, [r3, #61]
 162 0018 DBB2     		uxtb	r3, r3
 163              		.loc 1 444 6
 164 001a 002B     		cmp	r3, #0
 165 001c 06D1     		bne	.L8
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 166              		.loc 1 447 17
 167 001e 7B68     		ldr	r3, [r7, #4]
 168 0020 0022     		movs	r2, #0
 169 0022 83F83C20 		strb	r2, [r3, #60]
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 12


 170              		.loc 1 461 5
 171 0026 7868     		ldr	r0, [r7, #4]
 172 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 173              	.L8:
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 174              		.loc 1 465 17
 175 002c 7B68     		ldr	r3, [r7, #4]
 176 002e 2422     		movs	r2, #36
 177 0030 83F83D20 		strb	r2, [r3, #61]
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 178              		.loc 1 468 3
 179 0034 7B68     		ldr	r3, [r7, #4]
 180 0036 1B68     		ldr	r3, [r3]
 181 0038 DA68     		ldr	r2, [r3, #12]
 182 003a 7B68     		ldr	r3, [r7, #4]
 183 003c 1B68     		ldr	r3, [r3]
 184 003e 22F40052 		bic	r2, r2, #8192
 185 0042 DA60     		str	r2, [r3, #12]
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 186              		.loc 1 471 3
 187 0044 7868     		ldr	r0, [r7, #4]
 188 0046 FFF7FEFF 		bl	UART_SetConfig
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 189              		.loc 1 476 3
 190 004a 7B68     		ldr	r3, [r7, #4]
 191 004c 1B68     		ldr	r3, [r3]
 192 004e 1A69     		ldr	r2, [r3, #16]
 193 0050 7B68     		ldr	r3, [r7, #4]
 194 0052 1B68     		ldr	r3, [r3]
 195 0054 22F49042 		bic	r2, r2, #18432
 196 0058 1A61     		str	r2, [r3, #16]
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 197              		.loc 1 477 3
 198 005a 7B68     		ldr	r3, [r7, #4]
 199 005c 1B68     		ldr	r3, [r3]
 200 005e 5A69     		ldr	r2, [r3, #20]
 201 0060 7B68     		ldr	r3, [r7, #4]
 202 0062 1B68     		ldr	r3, [r3]
 203 0064 22F02202 		bic	r2, r2, #34
 204 0068 5A61     		str	r2, [r3, #20]
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 205              		.loc 1 480 3
 206 006a 7B68     		ldr	r3, [r7, #4]
 207 006c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 13


 208 006e 5A69     		ldr	r2, [r3, #20]
 209 0070 7B68     		ldr	r3, [r7, #4]
 210 0072 1B68     		ldr	r3, [r3]
 211 0074 42F00802 		orr	r2, r2, #8
 212 0078 5A61     		str	r2, [r3, #20]
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 213              		.loc 1 483 3
 214 007a 7B68     		ldr	r3, [r7, #4]
 215 007c 1B68     		ldr	r3, [r3]
 216 007e DA68     		ldr	r2, [r3, #12]
 217 0080 7B68     		ldr	r3, [r7, #4]
 218 0082 1B68     		ldr	r3, [r3]
 219 0084 42F40052 		orr	r2, r2, #8192
 220 0088 DA60     		str	r2, [r3, #12]
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 221              		.loc 1 486 20
 222 008a 7B68     		ldr	r3, [r7, #4]
 223 008c 0022     		movs	r2, #0
 224 008e 1A64     		str	r2, [r3, #64]
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 225              		.loc 1 487 17
 226 0090 7B68     		ldr	r3, [r7, #4]
 227 0092 2022     		movs	r2, #32
 228 0094 83F83D20 		strb	r2, [r3, #61]
 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 229              		.loc 1 488 18
 230 0098 7B68     		ldr	r3, [r7, #4]
 231 009a 2022     		movs	r2, #32
 232 009c 83F83E20 		strb	r2, [r3, #62]
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 233              		.loc 1 490 10
 234 00a0 0023     		movs	r3, #0
 235              	.L7:
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 236              		.loc 1 491 1
 237 00a2 1846     		mov	r0, r3
 238 00a4 0837     		adds	r7, r7, #8
 239              		.cfi_def_cfa_offset 8
 240 00a6 BD46     		mov	sp, r7
 241              		.cfi_def_cfa_register 13
 242              		@ sp needed
 243 00a8 80BD     		pop	{r7, pc}
 244              		.cfi_endproc
 245              	.LFE66:
 247              		.section	.text.HAL_LIN_Init,"ax",%progbits
 248              		.align	1
 249              		.global	HAL_LIN_Init
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu softvfp
 255              	HAL_LIN_Init:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 14


 256              	.LFB67:
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 257              		.loc 1 505 1
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261 0000 80B5     		push	{r7, lr}
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 7, -8
 264              		.cfi_offset 14, -4
 265 0002 82B0     		sub	sp, sp, #8
 266              		.cfi_def_cfa_offset 16
 267 0004 00AF     		add	r7, sp, #0
 268              		.cfi_def_cfa_register 7
 269 0006 7860     		str	r0, [r7, #4]
 270 0008 3960     		str	r1, [r7]
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 271              		.loc 1 507 6
 272 000a 7B68     		ldr	r3, [r7, #4]
 273 000c 002B     		cmp	r3, #0
 274 000e 01D1     		bne	.L10
 508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 275              		.loc 1 509 12
 276 0010 0123     		movs	r3, #1
 277 0012 57E0     		b	.L11
 278              	.L10:
 510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 279              		.loc 1 522 12
 280 0014 7B68     		ldr	r3, [r7, #4]
 281 0016 93F83D30 		ldrb	r3, [r3, #61]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 15


 282 001a DBB2     		uxtb	r3, r3
 283              		.loc 1 522 6
 284 001c 002B     		cmp	r3, #0
 285 001e 06D1     		bne	.L12
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 286              		.loc 1 525 17
 287 0020 7B68     		ldr	r3, [r7, #4]
 288 0022 0022     		movs	r2, #0
 289 0024 83F83C20 		strb	r2, [r3, #60]
 526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 290              		.loc 1 539 5
 291 0028 7868     		ldr	r0, [r7, #4]
 292 002a FFF7FEFF 		bl	HAL_UART_MspInit
 293              	.L12:
 540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 294              		.loc 1 543 17
 295 002e 7B68     		ldr	r3, [r7, #4]
 296 0030 2422     		movs	r2, #36
 297 0032 83F83D20 		strb	r2, [r3, #61]
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 298              		.loc 1 546 3
 299 0036 7B68     		ldr	r3, [r7, #4]
 300 0038 1B68     		ldr	r3, [r3]
 301 003a DA68     		ldr	r2, [r3, #12]
 302 003c 7B68     		ldr	r3, [r7, #4]
 303 003e 1B68     		ldr	r3, [r3]
 304 0040 22F40052 		bic	r2, r2, #8192
 305 0044 DA60     		str	r2, [r3, #12]
 547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 306              		.loc 1 549 3
 307 0046 7868     		ldr	r0, [r7, #4]
 308 0048 FFF7FEFF 		bl	UART_SetConfig
 550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 16


 553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 309              		.loc 1 554 3
 310 004c 7B68     		ldr	r3, [r7, #4]
 311 004e 1B68     		ldr	r3, [r3]
 312 0050 1A69     		ldr	r2, [r3, #16]
 313 0052 7B68     		ldr	r3, [r7, #4]
 314 0054 1B68     		ldr	r3, [r3]
 315 0056 22F40062 		bic	r2, r2, #2048
 316 005a 1A61     		str	r2, [r3, #16]
 555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 317              		.loc 1 555 3
 318 005c 7B68     		ldr	r3, [r7, #4]
 319 005e 1B68     		ldr	r3, [r3]
 320 0060 5A69     		ldr	r2, [r3, #20]
 321 0062 7B68     		ldr	r3, [r7, #4]
 322 0064 1B68     		ldr	r3, [r3]
 323 0066 22F02A02 		bic	r2, r2, #42
 324 006a 5A61     		str	r2, [r3, #20]
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 325              		.loc 1 558 3
 326 006c 7B68     		ldr	r3, [r7, #4]
 327 006e 1B68     		ldr	r3, [r3]
 328 0070 1A69     		ldr	r2, [r3, #16]
 329 0072 7B68     		ldr	r3, [r7, #4]
 330 0074 1B68     		ldr	r3, [r3]
 331 0076 42F48042 		orr	r2, r2, #16384
 332 007a 1A61     		str	r2, [r3, #16]
 559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 333              		.loc 1 561 3
 334 007c 7B68     		ldr	r3, [r7, #4]
 335 007e 1B68     		ldr	r3, [r3]
 336 0080 1A69     		ldr	r2, [r3, #16]
 337 0082 7B68     		ldr	r3, [r7, #4]
 338 0084 1B68     		ldr	r3, [r3]
 339 0086 22F02002 		bic	r2, r2, #32
 340 008a 1A61     		str	r2, [r3, #16]
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 341              		.loc 1 562 3
 342 008c 7B68     		ldr	r3, [r7, #4]
 343 008e 1B68     		ldr	r3, [r3]
 344 0090 1969     		ldr	r1, [r3, #16]
 345 0092 7B68     		ldr	r3, [r7, #4]
 346 0094 1B68     		ldr	r3, [r3]
 347 0096 3A68     		ldr	r2, [r7]
 348 0098 0A43     		orrs	r2, r2, r1
 349 009a 1A61     		str	r2, [r3, #16]
 563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 350              		.loc 1 565 3
 351 009c 7B68     		ldr	r3, [r7, #4]
 352 009e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 17


 353 00a0 DA68     		ldr	r2, [r3, #12]
 354 00a2 7B68     		ldr	r3, [r7, #4]
 355 00a4 1B68     		ldr	r3, [r3]
 356 00a6 42F40052 		orr	r2, r2, #8192
 357 00aa DA60     		str	r2, [r3, #12]
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 358              		.loc 1 568 20
 359 00ac 7B68     		ldr	r3, [r7, #4]
 360 00ae 0022     		movs	r2, #0
 361 00b0 1A64     		str	r2, [r3, #64]
 569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 362              		.loc 1 569 17
 363 00b2 7B68     		ldr	r3, [r7, #4]
 364 00b4 2022     		movs	r2, #32
 365 00b6 83F83D20 		strb	r2, [r3, #61]
 570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 366              		.loc 1 570 18
 367 00ba 7B68     		ldr	r3, [r7, #4]
 368 00bc 2022     		movs	r2, #32
 369 00be 83F83E20 		strb	r2, [r3, #62]
 571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 370              		.loc 1 572 10
 371 00c2 0023     		movs	r3, #0
 372              	.L11:
 573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 373              		.loc 1 573 1
 374 00c4 1846     		mov	r0, r3
 375 00c6 0837     		adds	r7, r7, #8
 376              		.cfi_def_cfa_offset 8
 377 00c8 BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 00ca 80BD     		pop	{r7, pc}
 381              		.cfi_endproc
 382              	.LFE67:
 384              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_MultiProcessor_Init
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu softvfp
 392              	HAL_MultiProcessor_Init:
 393              	.LFB68:
 574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 18


 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 394              		.loc 1 588 1
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 16
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0000 80B5     		push	{r7, lr}
 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 7, -8
 401              		.cfi_offset 14, -4
 402 0002 84B0     		sub	sp, sp, #16
 403              		.cfi_def_cfa_offset 24
 404 0004 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 406 0006 F860     		str	r0, [r7, #12]
 407 0008 0B46     		mov	r3, r1
 408 000a 7A60     		str	r2, [r7, #4]
 409 000c FB72     		strb	r3, [r7, #11]
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 410              		.loc 1 590 6
 411 000e FB68     		ldr	r3, [r7, #12]
 412 0010 002B     		cmp	r3, #0
 413 0012 01D1     		bne	.L14
 591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 414              		.loc 1 592 12
 415 0014 0123     		movs	r3, #1
 416 0016 5FE0     		b	.L15
 417              	.L14:
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 418              		.loc 1 606 12
 419 0018 FB68     		ldr	r3, [r7, #12]
 420 001a 93F83D30 		ldrb	r3, [r3, #61]
 421 001e DBB2     		uxtb	r3, r3
 422              		.loc 1 606 6
 423 0020 002B     		cmp	r3, #0
 424 0022 06D1     		bne	.L16
 607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 19


 425              		.loc 1 609 17
 426 0024 FB68     		ldr	r3, [r7, #12]
 427 0026 0022     		movs	r2, #0
 428 0028 83F83C20 		strb	r2, [r3, #60]
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 429              		.loc 1 623 5
 430 002c F868     		ldr	r0, [r7, #12]
 431 002e FFF7FEFF 		bl	HAL_UART_MspInit
 432              	.L16:
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 433              		.loc 1 627 17
 434 0032 FB68     		ldr	r3, [r7, #12]
 435 0034 2422     		movs	r2, #36
 436 0036 83F83D20 		strb	r2, [r3, #61]
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 437              		.loc 1 630 3
 438 003a FB68     		ldr	r3, [r7, #12]
 439 003c 1B68     		ldr	r3, [r3]
 440 003e DA68     		ldr	r2, [r3, #12]
 441 0040 FB68     		ldr	r3, [r7, #12]
 442 0042 1B68     		ldr	r3, [r3]
 443 0044 22F40052 		bic	r2, r2, #8192
 444 0048 DA60     		str	r2, [r3, #12]
 631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 445              		.loc 1 633 3
 446 004a F868     		ldr	r0, [r7, #12]
 447 004c FFF7FEFF 		bl	UART_SetConfig
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 448              		.loc 1 638 3
 449 0050 FB68     		ldr	r3, [r7, #12]
 450 0052 1B68     		ldr	r3, [r3]
 451 0054 1A69     		ldr	r2, [r3, #16]
 452 0056 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 20


 453 0058 1B68     		ldr	r3, [r3]
 454 005a 22F49042 		bic	r2, r2, #18432
 455 005e 1A61     		str	r2, [r3, #16]
 639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 456              		.loc 1 639 3
 457 0060 FB68     		ldr	r3, [r7, #12]
 458 0062 1B68     		ldr	r3, [r3]
 459 0064 5A69     		ldr	r2, [r3, #20]
 460 0066 FB68     		ldr	r3, [r7, #12]
 461 0068 1B68     		ldr	r3, [r3]
 462 006a 22F02A02 		bic	r2, r2, #42
 463 006e 5A61     		str	r2, [r3, #20]
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 464              		.loc 1 642 3
 465 0070 FB68     		ldr	r3, [r7, #12]
 466 0072 1B68     		ldr	r3, [r3]
 467 0074 1A69     		ldr	r2, [r3, #16]
 468 0076 FB68     		ldr	r3, [r7, #12]
 469 0078 1B68     		ldr	r3, [r3]
 470 007a 22F00F02 		bic	r2, r2, #15
 471 007e 1A61     		str	r2, [r3, #16]
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 472              		.loc 1 643 3
 473 0080 FB68     		ldr	r3, [r7, #12]
 474 0082 1B68     		ldr	r3, [r3]
 475 0084 1969     		ldr	r1, [r3, #16]
 476 0086 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 477 0088 FB68     		ldr	r3, [r7, #12]
 478 008a 1B68     		ldr	r3, [r3]
 479 008c 0A43     		orrs	r2, r2, r1
 480 008e 1A61     		str	r2, [r3, #16]
 644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 481              		.loc 1 646 3
 482 0090 FB68     		ldr	r3, [r7, #12]
 483 0092 1B68     		ldr	r3, [r3]
 484 0094 DA68     		ldr	r2, [r3, #12]
 485 0096 FB68     		ldr	r3, [r7, #12]
 486 0098 1B68     		ldr	r3, [r3]
 487 009a 22F40062 		bic	r2, r2, #2048
 488 009e DA60     		str	r2, [r3, #12]
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 489              		.loc 1 647 3
 490 00a0 FB68     		ldr	r3, [r7, #12]
 491 00a2 1B68     		ldr	r3, [r3]
 492 00a4 D968     		ldr	r1, [r3, #12]
 493 00a6 FB68     		ldr	r3, [r7, #12]
 494 00a8 1B68     		ldr	r3, [r3]
 495 00aa 7A68     		ldr	r2, [r7, #4]
 496 00ac 0A43     		orrs	r2, r2, r1
 497 00ae DA60     		str	r2, [r3, #12]
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 21


 498              		.loc 1 650 3
 499 00b0 FB68     		ldr	r3, [r7, #12]
 500 00b2 1B68     		ldr	r3, [r3]
 501 00b4 DA68     		ldr	r2, [r3, #12]
 502 00b6 FB68     		ldr	r3, [r7, #12]
 503 00b8 1B68     		ldr	r3, [r3]
 504 00ba 42F40052 		orr	r2, r2, #8192
 505 00be DA60     		str	r2, [r3, #12]
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 506              		.loc 1 653 20
 507 00c0 FB68     		ldr	r3, [r7, #12]
 508 00c2 0022     		movs	r2, #0
 509 00c4 1A64     		str	r2, [r3, #64]
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 510              		.loc 1 654 17
 511 00c6 FB68     		ldr	r3, [r7, #12]
 512 00c8 2022     		movs	r2, #32
 513 00ca 83F83D20 		strb	r2, [r3, #61]
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 514              		.loc 1 655 18
 515 00ce FB68     		ldr	r3, [r7, #12]
 516 00d0 2022     		movs	r2, #32
 517 00d2 83F83E20 		strb	r2, [r3, #62]
 656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 518              		.loc 1 657 10
 519 00d6 0023     		movs	r3, #0
 520              	.L15:
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 521              		.loc 1 658 1
 522 00d8 1846     		mov	r0, r3
 523 00da 1037     		adds	r7, r7, #16
 524              		.cfi_def_cfa_offset 8
 525 00dc BD46     		mov	sp, r7
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 00de 80BD     		pop	{r7, pc}
 529              		.cfi_endproc
 530              	.LFE68:
 532              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 533              		.align	1
 534              		.global	HAL_UART_DeInit
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu softvfp
 540              	HAL_UART_DeInit:
 541              	.LFB69:
 659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 22


 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 542              		.loc 1 667 1
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 80B5     		push	{r7, lr}
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 14, -4
 550 0002 82B0     		sub	sp, sp, #8
 551              		.cfi_def_cfa_offset 16
 552 0004 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 554 0006 7860     		str	r0, [r7, #4]
 668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 555              		.loc 1 669 6
 556 0008 7B68     		ldr	r3, [r7, #4]
 557 000a 002B     		cmp	r3, #0
 558 000c 01D1     		bne	.L18
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 559              		.loc 1 671 12
 560 000e 0123     		movs	r3, #1
 561 0010 21E0     		b	.L19
 562              	.L18:
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 563              		.loc 1 677 17
 564 0012 7B68     		ldr	r3, [r7, #4]
 565 0014 2422     		movs	r2, #36
 566 0016 83F83D20 		strb	r2, [r3, #61]
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 567              		.loc 1 680 3
 568 001a 7B68     		ldr	r3, [r7, #4]
 569 001c 1B68     		ldr	r3, [r3]
 570 001e DA68     		ldr	r2, [r3, #12]
 571 0020 7B68     		ldr	r3, [r7, #4]
 572 0022 1B68     		ldr	r3, [r3]
 573 0024 22F40052 		bic	r2, r2, #8192
 574 0028 DA60     		str	r2, [r3, #12]
 681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 23


 690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 575              		.loc 1 691 3
 576 002a 7868     		ldr	r0, [r7, #4]
 577 002c FFF7FEFF 		bl	HAL_UART_MspDeInit
 692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 578              		.loc 1 694 20
 579 0030 7B68     		ldr	r3, [r7, #4]
 580 0032 0022     		movs	r2, #0
 581 0034 1A64     		str	r2, [r3, #64]
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 582              		.loc 1 695 17
 583 0036 7B68     		ldr	r3, [r7, #4]
 584 0038 0022     		movs	r2, #0
 585 003a 83F83D20 		strb	r2, [r3, #61]
 696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 586              		.loc 1 696 18
 587 003e 7B68     		ldr	r3, [r7, #4]
 588 0040 0022     		movs	r2, #0
 589 0042 83F83E20 		strb	r2, [r3, #62]
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 590              		.loc 1 697 24
 591 0046 7B68     		ldr	r3, [r7, #4]
 592 0048 0022     		movs	r2, #0
 593 004a 1A63     		str	r2, [r3, #48]
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 594              		.loc 1 700 3
 595 004c 7B68     		ldr	r3, [r7, #4]
 596 004e 0022     		movs	r2, #0
 597 0050 83F83C20 		strb	r2, [r3, #60]
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 598              		.loc 1 702 10
 599 0054 0023     		movs	r3, #0
 600              	.L19:
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 601              		.loc 1 703 1
 602 0056 1846     		mov	r0, r3
 603 0058 0837     		adds	r7, r7, #8
 604              		.cfi_def_cfa_offset 8
 605 005a BD46     		mov	sp, r7
 606              		.cfi_def_cfa_register 13
 607              		@ sp needed
 608 005c 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
 610              	.LFE69:
 612              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 613              		.align	1
 614              		.weak	HAL_UART_MspInit
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu softvfp
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 24


 620              	HAL_UART_MspInit:
 621              	.LFB70:
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 622              		.loc 1 712 1
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 8
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627 0000 80B4     		push	{r7}
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 7, -4
 630 0002 83B0     		sub	sp, sp, #12
 631              		.cfi_def_cfa_offset 16
 632 0004 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 634 0006 7860     		str	r0, [r7, #4]
 713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 635              		.loc 1 718 1
 636 0008 00BF     		nop
 637 000a 0C37     		adds	r7, r7, #12
 638              		.cfi_def_cfa_offset 4
 639 000c BD46     		mov	sp, r7
 640              		.cfi_def_cfa_register 13
 641              		@ sp needed
 642 000e 80BC     		pop	{r7}
 643              		.cfi_restore 7
 644              		.cfi_def_cfa_offset 0
 645 0010 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE70:
 649              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 650              		.align	1
 651              		.weak	HAL_UART_MspDeInit
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu softvfp
 657              	HAL_UART_MspDeInit:
 658              	.LFB71:
 719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 25


 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 659              		.loc 1 727 1
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 0000 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 0002 83B0     		sub	sp, sp, #12
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 672              		.loc 1 733 1
 673 0008 00BF     		nop
 674 000a 0C37     		adds	r7, r7, #12
 675              		.cfi_def_cfa_offset 4
 676 000c BD46     		mov	sp, r7
 677              		.cfi_def_cfa_register 13
 678              		@ sp needed
 679 000e 80BC     		pop	{r7}
 680              		.cfi_restore 7
 681              		.cfi_def_cfa_offset 0
 682 0010 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE71:
 686              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 687              		.align	1
 688              		.global	HAL_UART_Transmit
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu softvfp
 694              	HAL_UART_Transmit:
 695              	.LFB72:
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 26


 746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 27


 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 28


 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 29


 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 30


 974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
 976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
1014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
1021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 31


1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
1048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
1050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
1053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
1061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
1070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 32


1088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
1092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
1108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 696              		.loc 1 1137 1
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 32
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700 0000 80B5     		push	{r7, lr}
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 33


 703              		.cfi_offset 14, -4
 704 0002 8AB0     		sub	sp, sp, #40
 705              		.cfi_def_cfa_offset 48
 706 0004 02AF     		add	r7, sp, #8
 707              		.cfi_def_cfa 7, 40
 708 0006 F860     		str	r0, [r7, #12]
 709 0008 B960     		str	r1, [r7, #8]
 710 000a 3B60     		str	r3, [r7]
 711 000c 1346     		mov	r3, r2	@ movhi
 712 000e FB80     		strh	r3, [r7, #6]	@ movhi
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 713              		.loc 1 1140 12
 714 0010 0023     		movs	r3, #0
 715 0012 7B61     		str	r3, [r7, #20]
1141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 716              		.loc 1 1143 12
 717 0014 FB68     		ldr	r3, [r7, #12]
 718 0016 93F83D30 		ldrb	r3, [r3, #61]
 719 001a DBB2     		uxtb	r3, r3
 720              		.loc 1 1143 6
 721 001c 202B     		cmp	r3, #32
 722 001e 7CD1     		bne	.L23
1144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 723              		.loc 1 1145 8
 724 0020 BB68     		ldr	r3, [r7, #8]
 725 0022 002B     		cmp	r3, #0
 726 0024 02D0     		beq	.L24
 727              		.loc 1 1145 25 discriminator 1
 728 0026 FB88     		ldrh	r3, [r7, #6]
 729 0028 002B     		cmp	r3, #0
 730 002a 01D1     		bne	.L25
 731              	.L24:
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 732              		.loc 1 1147 15
 733 002c 0123     		movs	r3, #1
 734 002e 75E0     		b	.L26
 735              	.L25:
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 736              		.loc 1 1151 5
 737 0030 FB68     		ldr	r3, [r7, #12]
 738 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 739 0036 012B     		cmp	r3, #1
 740 0038 01D1     		bne	.L27
 741              		.loc 1 1151 5 is_stmt 0 discriminator 1
 742 003a 0223     		movs	r3, #2
 743 003c 6EE0     		b	.L26
 744              	.L27:
 745              		.loc 1 1151 5 discriminator 2
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 34


 746 003e FB68     		ldr	r3, [r7, #12]
 747 0040 0122     		movs	r2, #1
 748 0042 83F83C20 		strb	r2, [r3, #60]
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 749              		.loc 1 1153 22 is_stmt 1 discriminator 2
 750 0046 FB68     		ldr	r3, [r7, #12]
 751 0048 0022     		movs	r2, #0
 752 004a 1A64     		str	r2, [r3, #64]
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 753              		.loc 1 1154 19 discriminator 2
 754 004c FB68     		ldr	r3, [r7, #12]
 755 004e 2122     		movs	r2, #33
 756 0050 83F83D20 		strb	r2, [r3, #61]
1155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 757              		.loc 1 1157 17 discriminator 2
 758 0054 FFF7FEFF 		bl	HAL_GetTick
 759 0058 7861     		str	r0, [r7, #20]
1158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 760              		.loc 1 1159 23 discriminator 2
 761 005a FB68     		ldr	r3, [r7, #12]
 762 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 763 005e 9A84     		strh	r2, [r3, #36]	@ movhi
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 764              		.loc 1 1160 24 discriminator 2
 765 0060 FB68     		ldr	r3, [r7, #12]
 766 0062 FA88     		ldrh	r2, [r7, #6]	@ movhi
 767 0064 DA84     		strh	r2, [r3, #38]	@ movhi
1161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 768              		.loc 1 1163 21 discriminator 2
 769 0066 FB68     		ldr	r3, [r7, #12]
 770 0068 9B68     		ldr	r3, [r3, #8]
 771              		.loc 1 1163 8 discriminator 2
 772 006a B3F5805F 		cmp	r3, #4096
 773 006e 08D1     		bne	.L28
 774              		.loc 1 1163 71 discriminator 1
 775 0070 FB68     		ldr	r3, [r7, #12]
 776 0072 1B69     		ldr	r3, [r3, #16]
 777              		.loc 1 1163 56 discriminator 1
 778 0074 002B     		cmp	r3, #0
 779 0076 04D1     		bne	.L28
1164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 780              		.loc 1 1165 19
 781 0078 0023     		movs	r3, #0
 782 007a FB61     		str	r3, [r7, #28]
1166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 783              		.loc 1 1166 19
 784 007c BB68     		ldr	r3, [r7, #8]
 785 007e BB61     		str	r3, [r7, #24]
 786 0080 03E0     		b	.L29
 787              	.L28:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 35


1167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 788              		.loc 1 1170 19
 789 0082 BB68     		ldr	r3, [r7, #8]
 790 0084 FB61     		str	r3, [r7, #28]
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 791              		.loc 1 1171 19
 792 0086 0023     		movs	r3, #0
 793 0088 BB61     		str	r3, [r7, #24]
 794              	.L29:
1172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 795              		.loc 1 1175 5
 796 008a FB68     		ldr	r3, [r7, #12]
 797 008c 0022     		movs	r2, #0
 798 008e 83F83C20 		strb	r2, [r3, #60]
1176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 799              		.loc 1 1177 11
 800 0092 2AE0     		b	.L30
 801              	.L34:
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802              		.loc 1 1179 11
 803 0094 3B68     		ldr	r3, [r7]
 804 0096 0093     		str	r3, [sp]
 805 0098 7B69     		ldr	r3, [r7, #20]
 806 009a 0022     		movs	r2, #0
 807 009c 8021     		movs	r1, #128
 808 009e F868     		ldr	r0, [r7, #12]
 809 00a0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 810 00a4 0346     		mov	r3, r0
 811              		.loc 1 1179 10
 812 00a6 002B     		cmp	r3, #0
 813 00a8 01D0     		beq	.L31
1180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 814              		.loc 1 1181 16
 815 00aa 0323     		movs	r3, #3
 816 00ac 36E0     		b	.L26
 817              	.L31:
1182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 818              		.loc 1 1183 10
 819 00ae FB69     		ldr	r3, [r7, #28]
 820 00b0 002B     		cmp	r3, #0
 821 00b2 0BD1     		bne	.L32
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 822              		.loc 1 1185 42
 823 00b4 BB69     		ldr	r3, [r7, #24]
 824 00b6 1B88     		ldrh	r3, [r3]
 825              		.loc 1 1185 31
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 36


 826 00b8 1A46     		mov	r2, r3
 827              		.loc 1 1185 14
 828 00ba FB68     		ldr	r3, [r7, #12]
 829 00bc 1B68     		ldr	r3, [r3]
 830              		.loc 1 1185 31
 831 00be C2F30802 		ubfx	r2, r2, #0, #9
 832              		.loc 1 1185 29
 833 00c2 5A60     		str	r2, [r3, #4]
1186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 834              		.loc 1 1186 20
 835 00c4 BB69     		ldr	r3, [r7, #24]
 836 00c6 0233     		adds	r3, r3, #2
 837 00c8 BB61     		str	r3, [r7, #24]
 838 00ca 07E0     		b	.L33
 839              	.L32:
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 840              		.loc 1 1190 41
 841 00cc FB69     		ldr	r3, [r7, #28]
 842 00ce 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 843              		.loc 1 1190 14
 844 00d0 FB68     		ldr	r3, [r7, #12]
 845 00d2 1B68     		ldr	r3, [r3]
 846              		.loc 1 1190 29
 847 00d4 5A60     		str	r2, [r3, #4]
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 848              		.loc 1 1191 19
 849 00d6 FB69     		ldr	r3, [r7, #28]
 850 00d8 0133     		adds	r3, r3, #1
 851 00da FB61     		str	r3, [r7, #28]
 852              	.L33:
1192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 853              		.loc 1 1193 12
 854 00dc FB68     		ldr	r3, [r7, #12]
 855 00de DB8C     		ldrh	r3, [r3, #38]	@ movhi
 856 00e0 9BB2     		uxth	r3, r3
 857              		.loc 1 1193 25
 858 00e2 013B     		subs	r3, r3, #1
 859 00e4 9AB2     		uxth	r2, r3
 860 00e6 FB68     		ldr	r3, [r7, #12]
 861 00e8 DA84     		strh	r2, [r3, #38]	@ movhi
 862              	.L30:
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 863              		.loc 1 1177 17
 864 00ea FB68     		ldr	r3, [r7, #12]
 865 00ec DB8C     		ldrh	r3, [r3, #38]	@ movhi
 866 00ee 9BB2     		uxth	r3, r3
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 867              		.loc 1 1177 11
 868 00f0 002B     		cmp	r3, #0
 869 00f2 CFD1     		bne	.L34
1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 37


 870              		.loc 1 1196 9
 871 00f4 3B68     		ldr	r3, [r7]
 872 00f6 0093     		str	r3, [sp]
 873 00f8 7B69     		ldr	r3, [r7, #20]
 874 00fa 0022     		movs	r2, #0
 875 00fc 4021     		movs	r1, #64
 876 00fe F868     		ldr	r0, [r7, #12]
 877 0100 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 878 0104 0346     		mov	r3, r0
 879              		.loc 1 1196 8
 880 0106 002B     		cmp	r3, #0
 881 0108 01D0     		beq	.L35
1197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 882              		.loc 1 1198 14
 883 010a 0323     		movs	r3, #3
 884 010c 06E0     		b	.L26
 885              	.L35:
1199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 886              		.loc 1 1202 19
 887 010e FB68     		ldr	r3, [r7, #12]
 888 0110 2022     		movs	r2, #32
 889 0112 83F83D20 		strb	r2, [r3, #61]
1203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 890              		.loc 1 1204 12
 891 0116 0023     		movs	r3, #0
 892 0118 00E0     		b	.L26
 893              	.L23:
1205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 894              		.loc 1 1208 12
 895 011a 0223     		movs	r3, #2
 896              	.L26:
1209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 897              		.loc 1 1210 1
 898 011c 1846     		mov	r0, r3
 899 011e 2037     		adds	r7, r7, #32
 900              		.cfi_def_cfa_offset 8
 901 0120 BD46     		mov	sp, r7
 902              		.cfi_def_cfa_register 13
 903              		@ sp needed
 904 0122 80BD     		pop	{r7, pc}
 905              		.cfi_endproc
 906              	.LFE72:
 908              		.section	.text.HAL_UART_Receive,"ax",%progbits
 909              		.align	1
 910              		.global	HAL_UART_Receive
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 38


 914              		.fpu softvfp
 916              	HAL_UART_Receive:
 917              	.LFB73:
1211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 918              		.loc 1 1225 1
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 32
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 8AB0     		sub	sp, sp, #40
 927              		.cfi_def_cfa_offset 48
 928 0004 02AF     		add	r7, sp, #8
 929              		.cfi_def_cfa 7, 40
 930 0006 F860     		str	r0, [r7, #12]
 931 0008 B960     		str	r1, [r7, #8]
 932 000a 3B60     		str	r3, [r7]
 933 000c 1346     		mov	r3, r2	@ movhi
 934 000e FB80     		strh	r3, [r7, #6]	@ movhi
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 935              		.loc 1 1228 12
 936 0010 0023     		movs	r3, #0
 937 0012 7B61     		str	r3, [r7, #20]
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 938              		.loc 1 1231 12
 939 0014 FB68     		ldr	r3, [r7, #12]
 940 0016 93F83E30 		ldrb	r3, [r3, #62]
 941 001a DBB2     		uxtb	r3, r3
 942              		.loc 1 1231 6
 943 001c 202B     		cmp	r3, #32
 944 001e 40F08C80 		bne	.L37
1232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 945              		.loc 1 1233 8
 946 0022 BB68     		ldr	r3, [r7, #8]
 947 0024 002B     		cmp	r3, #0
 948 0026 02D0     		beq	.L38
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 39


 949              		.loc 1 1233 25 discriminator 1
 950 0028 FB88     		ldrh	r3, [r7, #6]
 951 002a 002B     		cmp	r3, #0
 952 002c 01D1     		bne	.L39
 953              	.L38:
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 954              		.loc 1 1235 15
 955 002e 0123     		movs	r3, #1
 956 0030 84E0     		b	.L40
 957              	.L39:
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 958              		.loc 1 1239 5
 959 0032 FB68     		ldr	r3, [r7, #12]
 960 0034 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 961 0038 012B     		cmp	r3, #1
 962 003a 01D1     		bne	.L41
 963              		.loc 1 1239 5 is_stmt 0 discriminator 1
 964 003c 0223     		movs	r3, #2
 965 003e 7DE0     		b	.L40
 966              	.L41:
 967              		.loc 1 1239 5 discriminator 2
 968 0040 FB68     		ldr	r3, [r7, #12]
 969 0042 0122     		movs	r2, #1
 970 0044 83F83C20 		strb	r2, [r3, #60]
1240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 971              		.loc 1 1241 22 is_stmt 1 discriminator 2
 972 0048 FB68     		ldr	r3, [r7, #12]
 973 004a 0022     		movs	r2, #0
 974 004c 1A64     		str	r2, [r3, #64]
1242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 975              		.loc 1 1242 20 discriminator 2
 976 004e FB68     		ldr	r3, [r7, #12]
 977 0050 2222     		movs	r2, #34
 978 0052 83F83E20 		strb	r2, [r3, #62]
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 979              		.loc 1 1243 26 discriminator 2
 980 0056 FB68     		ldr	r3, [r7, #12]
 981 0058 0022     		movs	r2, #0
 982 005a 1A63     		str	r2, [r3, #48]
1244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 983              		.loc 1 1246 17 discriminator 2
 984 005c FFF7FEFF 		bl	HAL_GetTick
 985 0060 7861     		str	r0, [r7, #20]
1247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 986              		.loc 1 1248 23 discriminator 2
 987 0062 FB68     		ldr	r3, [r7, #12]
 988 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 989 0066 9A85     		strh	r2, [r3, #44]	@ movhi
1249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 40


 990              		.loc 1 1249 24 discriminator 2
 991 0068 FB68     		ldr	r3, [r7, #12]
 992 006a FA88     		ldrh	r2, [r7, #6]	@ movhi
 993 006c DA85     		strh	r2, [r3, #46]	@ movhi
1250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 994              		.loc 1 1252 21 discriminator 2
 995 006e FB68     		ldr	r3, [r7, #12]
 996 0070 9B68     		ldr	r3, [r3, #8]
 997              		.loc 1 1252 8 discriminator 2
 998 0072 B3F5805F 		cmp	r3, #4096
 999 0076 08D1     		bne	.L42
 1000              		.loc 1 1252 71 discriminator 1
 1001 0078 FB68     		ldr	r3, [r7, #12]
 1002 007a 1B69     		ldr	r3, [r3, #16]
 1003              		.loc 1 1252 56 discriminator 1
 1004 007c 002B     		cmp	r3, #0
 1005 007e 04D1     		bne	.L42
1253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 1006              		.loc 1 1254 19
 1007 0080 0023     		movs	r3, #0
 1008 0082 FB61     		str	r3, [r7, #28]
1255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1009              		.loc 1 1255 19
 1010 0084 BB68     		ldr	r3, [r7, #8]
 1011 0086 BB61     		str	r3, [r7, #24]
 1012 0088 03E0     		b	.L43
 1013              	.L42:
1256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 1014              		.loc 1 1259 19
 1015 008a BB68     		ldr	r3, [r7, #8]
 1016 008c FB61     		str	r3, [r7, #28]
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 1017              		.loc 1 1260 19
 1018 008e 0023     		movs	r3, #0
 1019 0090 BB61     		str	r3, [r7, #24]
 1020              	.L43:
1261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1021              		.loc 1 1264 5
 1022 0092 FB68     		ldr	r3, [r7, #12]
 1023 0094 0022     		movs	r2, #0
 1024 0096 83F83C20 		strb	r2, [r3, #60]
1265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1025              		.loc 1 1267 11
 1026 009a 43E0     		b	.L44
 1027              	.L51:
1268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 41


1269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1028              		.loc 1 1269 11
 1029 009c 3B68     		ldr	r3, [r7]
 1030 009e 0093     		str	r3, [sp]
 1031 00a0 7B69     		ldr	r3, [r7, #20]
 1032 00a2 0022     		movs	r2, #0
 1033 00a4 2021     		movs	r1, #32
 1034 00a6 F868     		ldr	r0, [r7, #12]
 1035 00a8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1036 00ac 0346     		mov	r3, r0
 1037              		.loc 1 1269 10
 1038 00ae 002B     		cmp	r3, #0
 1039 00b0 01D0     		beq	.L45
1270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 1040              		.loc 1 1271 16
 1041 00b2 0323     		movs	r3, #3
 1042 00b4 42E0     		b	.L40
 1043              	.L45:
1272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 1044              		.loc 1 1273 10
 1045 00b6 FB69     		ldr	r3, [r7, #28]
 1046 00b8 002B     		cmp	r3, #0
 1047 00ba 0CD1     		bne	.L46
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1048              		.loc 1 1275 40
 1049 00bc FB68     		ldr	r3, [r7, #12]
 1050 00be 1B68     		ldr	r3, [r3]
 1051              		.loc 1 1275 50
 1052 00c0 5B68     		ldr	r3, [r3, #4]
 1053              		.loc 1 1275 24
 1054 00c2 9BB2     		uxth	r3, r3
 1055 00c4 C3F30803 		ubfx	r3, r3, #0, #9
 1056 00c8 9AB2     		uxth	r2, r3
 1057              		.loc 1 1275 22
 1058 00ca BB69     		ldr	r3, [r7, #24]
 1059 00cc 1A80     		strh	r2, [r3]	@ movhi
1276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 1060              		.loc 1 1276 20
 1061 00ce BB69     		ldr	r3, [r7, #24]
 1062 00d0 0233     		adds	r3, r3, #2
 1063 00d2 BB61     		str	r3, [r7, #24]
 1064 00d4 1FE0     		b	.L47
 1065              	.L46:
1277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
 1066              		.loc 1 1280 25
 1067 00d6 FB68     		ldr	r3, [r7, #12]
 1068 00d8 9B68     		ldr	r3, [r3, #8]
 1069              		.loc 1 1280 12
 1070 00da B3F5805F 		cmp	r3, #4096
 1071 00de 07D0     		beq	.L48
 1072              		.loc 1 1280 76 discriminator 1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 42


 1073 00e0 FB68     		ldr	r3, [r7, #12]
 1074 00e2 9B68     		ldr	r3, [r3, #8]
 1075              		.loc 1 1280 60 discriminator 1
 1076 00e4 002B     		cmp	r3, #0
 1077 00e6 0AD1     		bne	.L49
 1078              		.loc 1 1280 126 discriminator 2
 1079 00e8 FB68     		ldr	r3, [r7, #12]
 1080 00ea 1B69     		ldr	r3, [r3, #16]
 1081              		.loc 1 1280 111 discriminator 2
 1082 00ec 002B     		cmp	r3, #0
 1083 00ee 06D1     		bne	.L49
 1084              	.L48:
1281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1085              		.loc 1 1282 40
 1086 00f0 FB68     		ldr	r3, [r7, #12]
 1087 00f2 1B68     		ldr	r3, [r3]
 1088              		.loc 1 1282 50
 1089 00f4 5B68     		ldr	r3, [r3, #4]
 1090              		.loc 1 1282 25
 1091 00f6 DAB2     		uxtb	r2, r3
 1092              		.loc 1 1282 23
 1093 00f8 FB69     		ldr	r3, [r7, #28]
 1094 00fa 1A70     		strb	r2, [r3]
 1095 00fc 08E0     		b	.L50
 1096              	.L49:
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1097              		.loc 1 1286 40
 1098 00fe FB68     		ldr	r3, [r7, #12]
 1099 0100 1B68     		ldr	r3, [r3]
 1100              		.loc 1 1286 50
 1101 0102 5B68     		ldr	r3, [r3, #4]
 1102              		.loc 1 1286 25
 1103 0104 DBB2     		uxtb	r3, r3
 1104 0106 03F07F03 		and	r3, r3, #127
 1105 010a DAB2     		uxtb	r2, r3
 1106              		.loc 1 1286 23
 1107 010c FB69     		ldr	r3, [r7, #28]
 1108 010e 1A70     		strb	r2, [r3]
 1109              	.L50:
1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 1110              		.loc 1 1288 19
 1111 0110 FB69     		ldr	r3, [r7, #28]
 1112 0112 0133     		adds	r3, r3, #1
 1113 0114 FB61     		str	r3, [r7, #28]
 1114              	.L47:
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 1115              		.loc 1 1290 12
 1116 0116 FB68     		ldr	r3, [r7, #12]
 1117 0118 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1118 011a 9BB2     		uxth	r3, r3
 1119              		.loc 1 1290 25
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 43


 1120 011c 013B     		subs	r3, r3, #1
 1121 011e 9AB2     		uxth	r2, r3
 1122 0120 FB68     		ldr	r3, [r7, #12]
 1123 0122 DA85     		strh	r2, [r3, #46]	@ movhi
 1124              	.L44:
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1125              		.loc 1 1267 17
 1126 0124 FB68     		ldr	r3, [r7, #12]
 1127 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1128 0128 9BB2     		uxth	r3, r3
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1129              		.loc 1 1267 11
 1130 012a 002B     		cmp	r3, #0
 1131 012c B6D1     		bne	.L51
1291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1132              		.loc 1 1294 20
 1133 012e FB68     		ldr	r3, [r7, #12]
 1134 0130 2022     		movs	r2, #32
 1135 0132 83F83E20 		strb	r2, [r3, #62]
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1136              		.loc 1 1296 12
 1137 0136 0023     		movs	r3, #0
 1138 0138 00E0     		b	.L40
 1139              	.L37:
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1140              		.loc 1 1300 12
 1141 013a 0223     		movs	r3, #2
 1142              	.L40:
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1143              		.loc 1 1302 1
 1144 013c 1846     		mov	r0, r3
 1145 013e 2037     		adds	r7, r7, #32
 1146              		.cfi_def_cfa_offset 8
 1147 0140 BD46     		mov	sp, r7
 1148              		.cfi_def_cfa_register 13
 1149              		@ sp needed
 1150 0142 80BD     		pop	{r7, pc}
 1151              		.cfi_endproc
 1152              	.LFE73:
 1154              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1155              		.align	1
 1156              		.global	HAL_UART_Transmit_IT
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu softvfp
 1162              	HAL_UART_Transmit_IT:
 1163              	.LFB74:
1303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 44


1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1164              		.loc 1 1316 1
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 16
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169 0000 80B4     		push	{r7}
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 0002 85B0     		sub	sp, sp, #20
 1173              		.cfi_def_cfa_offset 24
 1174 0004 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 0006 F860     		str	r0, [r7, #12]
 1177 0008 B960     		str	r1, [r7, #8]
 1178 000a 1346     		mov	r3, r2
 1179 000c FB80     		strh	r3, [r7, #6]	@ movhi
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1180              		.loc 1 1318 12
 1181 000e FB68     		ldr	r3, [r7, #12]
 1182 0010 93F83D30 		ldrb	r3, [r3, #61]
 1183 0014 DBB2     		uxtb	r3, r3
 1184              		.loc 1 1318 6
 1185 0016 202B     		cmp	r3, #32
 1186 0018 30D1     		bne	.L53
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1187              		.loc 1 1320 8
 1188 001a BB68     		ldr	r3, [r7, #8]
 1189 001c 002B     		cmp	r3, #0
 1190 001e 02D0     		beq	.L54
 1191              		.loc 1 1320 25 discriminator 1
 1192 0020 FB88     		ldrh	r3, [r7, #6]
 1193 0022 002B     		cmp	r3, #0
 1194 0024 01D1     		bne	.L55
 1195              	.L54:
1321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1196              		.loc 1 1322 14
 1197 0026 0123     		movs	r3, #1
 1198 0028 29E0     		b	.L56
 1199              	.L55:
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 45


1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1200              		.loc 1 1326 5
 1201 002a FB68     		ldr	r3, [r7, #12]
 1202 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1203 0030 012B     		cmp	r3, #1
 1204 0032 01D1     		bne	.L57
 1205              		.loc 1 1326 5 is_stmt 0 discriminator 1
 1206 0034 0223     		movs	r3, #2
 1207 0036 22E0     		b	.L56
 1208              	.L57:
 1209              		.loc 1 1326 5 discriminator 2
 1210 0038 FB68     		ldr	r3, [r7, #12]
 1211 003a 0122     		movs	r2, #1
 1212 003c 83F83C20 		strb	r2, [r3, #60]
1327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1213              		.loc 1 1328 23 is_stmt 1 discriminator 2
 1214 0040 FB68     		ldr	r3, [r7, #12]
 1215 0042 BA68     		ldr	r2, [r7, #8]
 1216 0044 1A62     		str	r2, [r3, #32]
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1217              		.loc 1 1329 23 discriminator 2
 1218 0046 FB68     		ldr	r3, [r7, #12]
 1219 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1220 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1221              		.loc 1 1330 24 discriminator 2
 1222 004c FB68     		ldr	r3, [r7, #12]
 1223 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1224 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1225              		.loc 1 1332 22 discriminator 2
 1226 0052 FB68     		ldr	r3, [r7, #12]
 1227 0054 0022     		movs	r2, #0
 1228 0056 1A64     		str	r2, [r3, #64]
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1229              		.loc 1 1333 19 discriminator 2
 1230 0058 FB68     		ldr	r3, [r7, #12]
 1231 005a 2122     		movs	r2, #33
 1232 005c 83F83D20 		strb	r2, [r3, #61]
1334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1233              		.loc 1 1336 5 discriminator 2
 1234 0060 FB68     		ldr	r3, [r7, #12]
 1235 0062 0022     		movs	r2, #0
 1236 0064 83F83C20 		strb	r2, [r3, #60]
1337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1237              		.loc 1 1339 5 discriminator 2
 1238 0068 FB68     		ldr	r3, [r7, #12]
 1239 006a 1B68     		ldr	r3, [r3]
 1240 006c DA68     		ldr	r2, [r3, #12]
 1241 006e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 46


 1242 0070 1B68     		ldr	r3, [r3]
 1243 0072 42F08002 		orr	r2, r2, #128
 1244 0076 DA60     		str	r2, [r3, #12]
1340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1245              		.loc 1 1341 12 discriminator 2
 1246 0078 0023     		movs	r3, #0
 1247 007a 00E0     		b	.L56
 1248              	.L53:
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1249              		.loc 1 1345 12
 1250 007c 0223     		movs	r3, #2
 1251              	.L56:
1346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1252              		.loc 1 1347 1
 1253 007e 1846     		mov	r0, r3
 1254 0080 1437     		adds	r7, r7, #20
 1255              		.cfi_def_cfa_offset 4
 1256 0082 BD46     		mov	sp, r7
 1257              		.cfi_def_cfa_register 13
 1258              		@ sp needed
 1259 0084 80BC     		pop	{r7}
 1260              		.cfi_restore 7
 1261              		.cfi_def_cfa_offset 0
 1262 0086 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE74:
 1266              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1267              		.align	1
 1268              		.global	HAL_UART_Receive_IT
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1272              		.fpu softvfp
 1274              	HAL_UART_Receive_IT:
 1275              	.LFB75:
1348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1276              		.loc 1 1361 1
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 47


 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 0000 80B5     		push	{r7, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 84B0     		sub	sp, sp, #16
 1285              		.cfi_def_cfa_offset 24
 1286 0004 00AF     		add	r7, sp, #0
 1287              		.cfi_def_cfa_register 7
 1288 0006 F860     		str	r0, [r7, #12]
 1289 0008 B960     		str	r1, [r7, #8]
 1290 000a 1346     		mov	r3, r2
 1291 000c FB80     		strh	r3, [r7, #6]	@ movhi
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1292              		.loc 1 1363 12
 1293 000e FB68     		ldr	r3, [r7, #12]
 1294 0010 93F83E30 		ldrb	r3, [r3, #62]
 1295 0014 DBB2     		uxtb	r3, r3
 1296              		.loc 1 1363 6
 1297 0016 202B     		cmp	r3, #32
 1298 0018 1DD1     		bne	.L59
1364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1299              		.loc 1 1365 8
 1300 001a BB68     		ldr	r3, [r7, #8]
 1301 001c 002B     		cmp	r3, #0
 1302 001e 02D0     		beq	.L60
 1303              		.loc 1 1365 25 discriminator 1
 1304 0020 FB88     		ldrh	r3, [r7, #6]
 1305 0022 002B     		cmp	r3, #0
 1306 0024 01D1     		bne	.L61
 1307              	.L60:
1366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1308              		.loc 1 1367 14
 1309 0026 0123     		movs	r3, #1
 1310 0028 16E0     		b	.L62
 1311              	.L61:
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1312              		.loc 1 1371 5
 1313 002a FB68     		ldr	r3, [r7, #12]
 1314 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1315 0030 012B     		cmp	r3, #1
 1316 0032 01D1     		bne	.L63
 1317              		.loc 1 1371 5 is_stmt 0 discriminator 1
 1318 0034 0223     		movs	r3, #2
 1319 0036 0FE0     		b	.L62
 1320              	.L63:
 1321              		.loc 1 1371 5 discriminator 2
 1322 0038 FB68     		ldr	r3, [r7, #12]
 1323 003a 0122     		movs	r2, #1
 1324 003c 83F83C20 		strb	r2, [r3, #60]
1372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 48


1373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1325              		.loc 1 1374 26 is_stmt 1 discriminator 2
 1326 0040 FB68     		ldr	r3, [r7, #12]
 1327 0042 0022     		movs	r2, #0
 1328 0044 1A63     		str	r2, [r3, #48]
1375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_IT(huart, pData, Size));
 1329              		.loc 1 1376 12 discriminator 2
 1330 0046 FB88     		ldrh	r3, [r7, #6]
 1331 0048 1A46     		mov	r2, r3
 1332 004a B968     		ldr	r1, [r7, #8]
 1333 004c F868     		ldr	r0, [r7, #12]
 1334 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 1335 0052 0346     		mov	r3, r0
 1336 0054 00E0     		b	.L62
 1337              	.L59:
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1338              		.loc 1 1380 12
 1339 0056 0223     		movs	r3, #2
 1340              	.L62:
1381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1341              		.loc 1 1382 1
 1342 0058 1846     		mov	r0, r3
 1343 005a 1037     		adds	r7, r7, #16
 1344              		.cfi_def_cfa_offset 8
 1345 005c BD46     		mov	sp, r7
 1346              		.cfi_def_cfa_register 13
 1347              		@ sp needed
 1348 005e 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE75:
 1352              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1353              		.align	1
 1354              		.global	HAL_UART_Transmit_DMA
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu softvfp
 1360              	HAL_UART_Transmit_DMA:
 1361              	.LFB76:
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 49


1395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1362              		.loc 1 1396 1
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 24
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0000 80B5     		push	{r7, lr}
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 7, -8
 1369              		.cfi_offset 14, -4
 1370 0002 86B0     		sub	sp, sp, #24
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              		.cfi_def_cfa_register 7
 1374 0006 F860     		str	r0, [r7, #12]
 1375 0008 B960     		str	r1, [r7, #8]
 1376 000a 1346     		mov	r3, r2
 1377 000c FB80     		strh	r3, [r7, #6]	@ movhi
1397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1378              		.loc 1 1400 12
 1379 000e FB68     		ldr	r3, [r7, #12]
 1380 0010 93F83D30 		ldrb	r3, [r3, #61]
 1381 0014 DBB2     		uxtb	r3, r3
 1382              		.loc 1 1400 6
 1383 0016 202B     		cmp	r3, #32
 1384 0018 53D1     		bne	.L65
1401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1385              		.loc 1 1402 16
 1386 001a BB68     		ldr	r3, [r7, #8]
 1387              		.loc 1 1402 8
 1388 001c 002B     		cmp	r3, #0
 1389 001e 02D0     		beq	.L66
 1390              		.loc 1 1402 25 discriminator 1
 1391 0020 FB88     		ldrh	r3, [r7, #6]
 1392 0022 002B     		cmp	r3, #0
 1393 0024 01D1     		bne	.L67
 1394              	.L66:
1403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1395              		.loc 1 1404 14
 1396 0026 0123     		movs	r3, #1
 1397 0028 4CE0     		b	.L68
 1398              	.L67:
1405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1399              		.loc 1 1408 5
 1400 002a FB68     		ldr	r3, [r7, #12]
 1401 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1402 0030 012B     		cmp	r3, #1
 1403 0032 01D1     		bne	.L69
 1404              		.loc 1 1408 5 is_stmt 0 discriminator 1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 50


 1405 0034 0223     		movs	r3, #2
 1406 0036 45E0     		b	.L68
 1407              	.L69:
 1408              		.loc 1 1408 5 discriminator 2
 1409 0038 FB68     		ldr	r3, [r7, #12]
 1410 003a 0122     		movs	r2, #1
 1411 003c 83F83C20 		strb	r2, [r3, #60]
1409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1412              		.loc 1 1410 23 is_stmt 1 discriminator 2
 1413 0040 BA68     		ldr	r2, [r7, #8]
 1414 0042 FB68     		ldr	r3, [r7, #12]
 1415 0044 1A62     		str	r2, [r3, #32]
1411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1416              		.loc 1 1411 23 discriminator 2
 1417 0046 FB68     		ldr	r3, [r7, #12]
 1418 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1419 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1420              		.loc 1 1412 24 discriminator 2
 1421 004c FB68     		ldr	r3, [r7, #12]
 1422 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1423 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1424              		.loc 1 1414 22 discriminator 2
 1425 0052 FB68     		ldr	r3, [r7, #12]
 1426 0054 0022     		movs	r2, #0
 1427 0056 1A64     		str	r2, [r3, #64]
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1428              		.loc 1 1415 19 discriminator 2
 1429 0058 FB68     		ldr	r3, [r7, #12]
 1430 005a 2122     		movs	r2, #33
 1431 005c 83F83D20 		strb	r2, [r3, #61]
1416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1432              		.loc 1 1418 10 discriminator 2
 1433 0060 FB68     		ldr	r3, [r7, #12]
 1434 0062 5B6B     		ldr	r3, [r3, #52]
 1435              		.loc 1 1418 37 discriminator 2
 1436 0064 194A     		ldr	r2, .L70
 1437 0066 9A62     		str	r2, [r3, #40]
1419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1438              		.loc 1 1421 10 discriminator 2
 1439 0068 FB68     		ldr	r3, [r7, #12]
 1440 006a 5B6B     		ldr	r3, [r3, #52]
 1441              		.loc 1 1421 41 discriminator 2
 1442 006c 184A     		ldr	r2, .L70+4
 1443 006e DA62     		str	r2, [r3, #44]
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1444              		.loc 1 1424 10 discriminator 2
 1445 0070 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 51


 1446 0072 5B6B     		ldr	r3, [r3, #52]
 1447              		.loc 1 1424 38 discriminator 2
 1448 0074 174A     		ldr	r2, .L70+8
 1449 0076 1A63     		str	r2, [r3, #48]
1425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1450              		.loc 1 1427 10 discriminator 2
 1451 0078 FB68     		ldr	r3, [r7, #12]
 1452 007a 5B6B     		ldr	r3, [r3, #52]
 1453              		.loc 1 1427 38 discriminator 2
 1454 007c 0022     		movs	r2, #0
 1455 007e 5A63     		str	r2, [r3, #52]
1428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
 1456              		.loc 1 1430 9 discriminator 2
 1457 0080 07F10803 		add	r3, r7, #8
 1458 0084 7B61     		str	r3, [r7, #20]
1431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1459              		.loc 1 1431 5 discriminator 2
 1460 0086 FB68     		ldr	r3, [r7, #12]
 1461 0088 586B     		ldr	r0, [r3, #52]
 1462 008a 7B69     		ldr	r3, [r7, #20]
 1463 008c 1968     		ldr	r1, [r3]
 1464              		.loc 1 1431 71 discriminator 2
 1465 008e FB68     		ldr	r3, [r7, #12]
 1466 0090 1B68     		ldr	r3, [r3]
 1467              		.loc 1 1431 65 discriminator 2
 1468 0092 0433     		adds	r3, r3, #4
 1469              		.loc 1 1431 5 discriminator 2
 1470 0094 1A46     		mov	r2, r3
 1471 0096 FB88     		ldrh	r3, [r7, #6]
 1472 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1473              		.loc 1 1434 5 discriminator 2
 1474 009c FB68     		ldr	r3, [r7, #12]
 1475 009e 1B68     		ldr	r3, [r3]
 1476 00a0 6FF04002 		mvn	r2, #64
 1477 00a4 1A60     		str	r2, [r3]
1435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1478              		.loc 1 1437 5 discriminator 2
 1479 00a6 FB68     		ldr	r3, [r7, #12]
 1480 00a8 0022     		movs	r2, #0
 1481 00aa 83F83C20 		strb	r2, [r3, #60]
1438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1482              		.loc 1 1441 5 discriminator 2
 1483 00ae FB68     		ldr	r3, [r7, #12]
 1484 00b0 1B68     		ldr	r3, [r3]
 1485 00b2 5A69     		ldr	r2, [r3, #20]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 52


 1486 00b4 FB68     		ldr	r3, [r7, #12]
 1487 00b6 1B68     		ldr	r3, [r3]
 1488 00b8 42F08002 		orr	r2, r2, #128
 1489 00bc 5A61     		str	r2, [r3, #20]
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1490              		.loc 1 1443 12 discriminator 2
 1491 00be 0023     		movs	r3, #0
 1492 00c0 00E0     		b	.L68
 1493              	.L65:
1444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1494              		.loc 1 1447 12
 1495 00c2 0223     		movs	r3, #2
 1496              	.L68:
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1497              		.loc 1 1449 1
 1498 00c4 1846     		mov	r0, r3
 1499 00c6 1837     		adds	r7, r7, #24
 1500              		.cfi_def_cfa_offset 8
 1501 00c8 BD46     		mov	sp, r7
 1502              		.cfi_def_cfa_register 13
 1503              		@ sp needed
 1504 00ca 80BD     		pop	{r7, pc}
 1505              	.L71:
 1506              		.align	2
 1507              	.L70:
 1508 00cc 00000000 		.word	UART_DMATransmitCplt
 1509 00d0 00000000 		.word	UART_DMATxHalfCplt
 1510 00d4 00000000 		.word	UART_DMAError
 1511              		.cfi_endproc
 1512              	.LFE76:
 1514              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1515              		.align	1
 1516              		.global	HAL_UART_Receive_DMA
 1517              		.syntax unified
 1518              		.thumb
 1519              		.thumb_func
 1520              		.fpu softvfp
 1522              	HAL_UART_Receive_DMA:
 1523              	.LFB77:
1450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 53


1463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1524              		.loc 1 1464 1
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 16
 1527              		@ frame_needed = 1, uses_anonymous_args = 0
 1528 0000 80B5     		push	{r7, lr}
 1529              		.cfi_def_cfa_offset 8
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 14, -4
 1532 0002 84B0     		sub	sp, sp, #16
 1533              		.cfi_def_cfa_offset 24
 1534 0004 00AF     		add	r7, sp, #0
 1535              		.cfi_def_cfa_register 7
 1536 0006 F860     		str	r0, [r7, #12]
 1537 0008 B960     		str	r1, [r7, #8]
 1538 000a 1346     		mov	r3, r2
 1539 000c FB80     		strh	r3, [r7, #6]	@ movhi
1465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1540              		.loc 1 1466 12
 1541 000e FB68     		ldr	r3, [r7, #12]
 1542 0010 93F83E30 		ldrb	r3, [r3, #62]
 1543 0014 DBB2     		uxtb	r3, r3
 1544              		.loc 1 1466 6
 1545 0016 202B     		cmp	r3, #32
 1546 0018 1DD1     		bne	.L73
1467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1547              		.loc 1 1468 8
 1548 001a BB68     		ldr	r3, [r7, #8]
 1549 001c 002B     		cmp	r3, #0
 1550 001e 02D0     		beq	.L74
 1551              		.loc 1 1468 25 discriminator 1
 1552 0020 FB88     		ldrh	r3, [r7, #6]
 1553 0022 002B     		cmp	r3, #0
 1554 0024 01D1     		bne	.L75
 1555              	.L74:
1469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1556              		.loc 1 1470 14
 1557 0026 0123     		movs	r3, #1
 1558 0028 16E0     		b	.L76
 1559              	.L75:
1471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1560              		.loc 1 1474 5
 1561 002a FB68     		ldr	r3, [r7, #12]
 1562 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1563 0030 012B     		cmp	r3, #1
 1564 0032 01D1     		bne	.L77
 1565              		.loc 1 1474 5 is_stmt 0 discriminator 1
 1566 0034 0223     		movs	r3, #2
 1567 0036 0FE0     		b	.L76
 1568              	.L77:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 54


 1569              		.loc 1 1474 5 discriminator 2
 1570 0038 FB68     		ldr	r3, [r7, #12]
 1571 003a 0122     		movs	r2, #1
 1572 003c 83F83C20 		strb	r2, [r3, #60]
1475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1573              		.loc 1 1477 26 is_stmt 1 discriminator 2
 1574 0040 FB68     		ldr	r3, [r7, #12]
 1575 0042 0022     		movs	r2, #0
 1576 0044 1A63     		str	r2, [r3, #48]
1478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_DMA(huart, pData, Size));
 1577              		.loc 1 1479 12 discriminator 2
 1578 0046 FB88     		ldrh	r3, [r7, #6]
 1579 0048 1A46     		mov	r2, r3
 1580 004a B968     		ldr	r1, [r7, #8]
 1581 004c F868     		ldr	r0, [r7, #12]
 1582 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 1583 0052 0346     		mov	r3, r0
 1584 0054 00E0     		b	.L76
 1585              	.L73:
1480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1586              		.loc 1 1483 12
 1587 0056 0223     		movs	r3, #2
 1588              	.L76:
1484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1589              		.loc 1 1485 1
 1590 0058 1846     		mov	r0, r3
 1591 005a 1037     		adds	r7, r7, #16
 1592              		.cfi_def_cfa_offset 8
 1593 005c BD46     		mov	sp, r7
 1594              		.cfi_def_cfa_register 13
 1595              		@ sp needed
 1596 005e 80BD     		pop	{r7, pc}
 1597              		.cfi_endproc
 1598              	.LFE77:
 1600              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1601              		.align	1
 1602              		.global	HAL_UART_DMAPause
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1606              		.fpu softvfp
 1608              	HAL_UART_DMAPause:
 1609              	.LFB78:
1486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 55


1493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1610              		.loc 1 1494 1
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 16
 1613              		@ frame_needed = 1, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
 1615 0000 80B4     		push	{r7}
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 7, -4
 1618 0002 85B0     		sub	sp, sp, #20
 1619              		.cfi_def_cfa_offset 24
 1620 0004 00AF     		add	r7, sp, #0
 1621              		.cfi_def_cfa_register 7
 1622 0006 7860     		str	r0, [r7, #4]
1495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1623              		.loc 1 1495 12
 1624 0008 0023     		movs	r3, #0
 1625 000a FB60     		str	r3, [r7, #12]
1496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1626              		.loc 1 1498 3
 1627 000c 7B68     		ldr	r3, [r7, #4]
 1628 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1629 0012 012B     		cmp	r3, #1
 1630 0014 01D1     		bne	.L79
 1631              		.loc 1 1498 3 is_stmt 0 discriminator 1
 1632 0016 0223     		movs	r3, #2
 1633 0018 50E0     		b	.L80
 1634              	.L79:
 1635              		.loc 1 1498 3 discriminator 2
 1636 001a 7B68     		ldr	r3, [r7, #4]
 1637 001c 0122     		movs	r2, #1
 1638 001e 83F83C20 		strb	r2, [r3, #60]
1499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1639              		.loc 1 1500 16 is_stmt 1 discriminator 2
 1640 0022 7B68     		ldr	r3, [r7, #4]
 1641 0024 1B68     		ldr	r3, [r3]
 1642 0026 5B69     		ldr	r3, [r3, #20]
 1643 0028 03F08003 		and	r3, r3, #128
 1644 002c 002B     		cmp	r3, #0
 1645 002e 14BF     		ite	ne
 1646 0030 0123     		movne	r3, #1
 1647 0032 0023     		moveq	r3, #0
 1648 0034 DBB2     		uxtb	r3, r3
 1649              		.loc 1 1500 14 discriminator 2
 1650 0036 FB60     		str	r3, [r7, #12]
1501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1651              		.loc 1 1501 13 discriminator 2
 1652 0038 7B68     		ldr	r3, [r7, #4]
 1653 003a 93F83D30 		ldrb	r3, [r3, #61]
 1654 003e DBB2     		uxtb	r3, r3
 1655              		.loc 1 1501 6 discriminator 2
 1656 0040 212B     		cmp	r3, #33
 1657 0042 0AD1     		bne	.L81
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 56


 1658              		.loc 1 1501 49 discriminator 1
 1659 0044 FB68     		ldr	r3, [r7, #12]
 1660 0046 002B     		cmp	r3, #0
 1661 0048 07D0     		beq	.L81
1502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1662              		.loc 1 1504 5
 1663 004a 7B68     		ldr	r3, [r7, #4]
 1664 004c 1B68     		ldr	r3, [r3]
 1665 004e 5A69     		ldr	r2, [r3, #20]
 1666 0050 7B68     		ldr	r3, [r7, #4]
 1667 0052 1B68     		ldr	r3, [r3]
 1668 0054 22F08002 		bic	r2, r2, #128
 1669 0058 5A61     		str	r2, [r3, #20]
 1670              	.L81:
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1671              		.loc 1 1507 16
 1672 005a 7B68     		ldr	r3, [r7, #4]
 1673 005c 1B68     		ldr	r3, [r3]
 1674 005e 5B69     		ldr	r3, [r3, #20]
 1675 0060 03F04003 		and	r3, r3, #64
 1676 0064 002B     		cmp	r3, #0
 1677 0066 14BF     		ite	ne
 1678 0068 0123     		movne	r3, #1
 1679 006a 0023     		moveq	r3, #0
 1680 006c DBB2     		uxtb	r3, r3
 1681              		.loc 1 1507 14
 1682 006e FB60     		str	r3, [r7, #12]
1508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1683              		.loc 1 1508 13
 1684 0070 7B68     		ldr	r3, [r7, #4]
 1685 0072 93F83E30 		ldrb	r3, [r3, #62]
 1686 0076 DBB2     		uxtb	r3, r3
 1687              		.loc 1 1508 6
 1688 0078 222B     		cmp	r3, #34
 1689 007a 1AD1     		bne	.L82
 1690              		.loc 1 1508 50 discriminator 1
 1691 007c FB68     		ldr	r3, [r7, #12]
 1692 007e 002B     		cmp	r3, #0
 1693 0080 17D0     		beq	.L82
1509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1694              		.loc 1 1511 5
 1695 0082 7B68     		ldr	r3, [r7, #4]
 1696 0084 1B68     		ldr	r3, [r3]
 1697 0086 DA68     		ldr	r2, [r3, #12]
 1698 0088 7B68     		ldr	r3, [r7, #4]
 1699 008a 1B68     		ldr	r3, [r3]
 1700 008c 22F48072 		bic	r2, r2, #256
 1701 0090 DA60     		str	r2, [r3, #12]
1512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1702              		.loc 1 1512 5
 1703 0092 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 57


 1704 0094 1B68     		ldr	r3, [r3]
 1705 0096 5A69     		ldr	r2, [r3, #20]
 1706 0098 7B68     		ldr	r3, [r7, #4]
 1707 009a 1B68     		ldr	r3, [r3]
 1708 009c 22F00102 		bic	r2, r2, #1
 1709 00a0 5A61     		str	r2, [r3, #20]
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1710              		.loc 1 1515 5
 1711 00a2 7B68     		ldr	r3, [r7, #4]
 1712 00a4 1B68     		ldr	r3, [r3]
 1713 00a6 5A69     		ldr	r2, [r3, #20]
 1714 00a8 7B68     		ldr	r3, [r7, #4]
 1715 00aa 1B68     		ldr	r3, [r3]
 1716 00ac 22F04002 		bic	r2, r2, #64
 1717 00b0 5A61     		str	r2, [r3, #20]
 1718              	.L82:
1516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1719              		.loc 1 1519 3
 1720 00b2 7B68     		ldr	r3, [r7, #4]
 1721 00b4 0022     		movs	r2, #0
 1722 00b6 83F83C20 		strb	r2, [r3, #60]
1520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1723              		.loc 1 1521 10
 1724 00ba 0023     		movs	r3, #0
 1725              	.L80:
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1726              		.loc 1 1522 1
 1727 00bc 1846     		mov	r0, r3
 1728 00be 1437     		adds	r7, r7, #20
 1729              		.cfi_def_cfa_offset 4
 1730 00c0 BD46     		mov	sp, r7
 1731              		.cfi_def_cfa_register 13
 1732              		@ sp needed
 1733 00c2 80BC     		pop	{r7}
 1734              		.cfi_restore 7
 1735              		.cfi_def_cfa_offset 0
 1736 00c4 7047     		bx	lr
 1737              		.cfi_endproc
 1738              	.LFE78:
 1740              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1741              		.align	1
 1742              		.global	HAL_UART_DMAResume
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1746              		.fpu softvfp
 1748              	HAL_UART_DMAResume:
 1749              	.LFB79:
1523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 58


1526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1750              		.loc 1 1531 1
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 16
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755 0000 80B4     		push	{r7}
 1756              		.cfi_def_cfa_offset 4
 1757              		.cfi_offset 7, -4
 1758 0002 85B0     		sub	sp, sp, #20
 1759              		.cfi_def_cfa_offset 24
 1760 0004 00AF     		add	r7, sp, #0
 1761              		.cfi_def_cfa_register 7
 1762 0006 7860     		str	r0, [r7, #4]
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1763              		.loc 1 1533 3
 1764 0008 7B68     		ldr	r3, [r7, #4]
 1765 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1766 000e 012B     		cmp	r3, #1
 1767 0010 01D1     		bne	.L84
 1768              		.loc 1 1533 3 is_stmt 0 discriminator 1
 1769 0012 0223     		movs	r3, #2
 1770 0014 3FE0     		b	.L85
 1771              	.L84:
 1772              		.loc 1 1533 3 discriminator 2
 1773 0016 7B68     		ldr	r3, [r7, #4]
 1774 0018 0122     		movs	r2, #1
 1775 001a 83F83C20 		strb	r2, [r3, #60]
1534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1776              		.loc 1 1535 12 is_stmt 1 discriminator 2
 1777 001e 7B68     		ldr	r3, [r7, #4]
 1778 0020 93F83D30 		ldrb	r3, [r3, #61]
 1779 0024 DBB2     		uxtb	r3, r3
 1780              		.loc 1 1535 6 discriminator 2
 1781 0026 212B     		cmp	r3, #33
 1782 0028 07D1     		bne	.L86
1536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1783              		.loc 1 1538 5
 1784 002a 7B68     		ldr	r3, [r7, #4]
 1785 002c 1B68     		ldr	r3, [r3]
 1786 002e 5A69     		ldr	r2, [r3, #20]
 1787 0030 7B68     		ldr	r3, [r7, #4]
 1788 0032 1B68     		ldr	r3, [r3]
 1789 0034 42F08002 		orr	r2, r2, #128
 1790 0038 5A61     		str	r2, [r3, #20]
 1791              	.L86:
1539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 59


1541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1792              		.loc 1 1541 12
 1793 003a 7B68     		ldr	r3, [r7, #4]
 1794 003c 93F83E30 		ldrb	r3, [r3, #62]
 1795 0040 DBB2     		uxtb	r3, r3
 1796              		.loc 1 1541 6
 1797 0042 222B     		cmp	r3, #34
 1798 0044 22D1     		bne	.L87
 1799              	.LBB2:
1542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1800              		.loc 1 1544 5
 1801 0046 0023     		movs	r3, #0
 1802 0048 FB60     		str	r3, [r7, #12]
 1803 004a 7B68     		ldr	r3, [r7, #4]
 1804 004c 1B68     		ldr	r3, [r3]
 1805 004e 1B68     		ldr	r3, [r3]
 1806 0050 FB60     		str	r3, [r7, #12]
 1807 0052 7B68     		ldr	r3, [r7, #4]
 1808 0054 1B68     		ldr	r3, [r3]
 1809 0056 5B68     		ldr	r3, [r3, #4]
 1810 0058 FB60     		str	r3, [r7, #12]
 1811 005a FB68     		ldr	r3, [r7, #12]
 1812              	.LBE2:
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1813              		.loc 1 1547 5
 1814 005c 7B68     		ldr	r3, [r7, #4]
 1815 005e 1B68     		ldr	r3, [r3]
 1816 0060 DA68     		ldr	r2, [r3, #12]
 1817 0062 7B68     		ldr	r3, [r7, #4]
 1818 0064 1B68     		ldr	r3, [r3]
 1819 0066 42F48072 		orr	r2, r2, #256
 1820 006a DA60     		str	r2, [r3, #12]
1548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1821              		.loc 1 1548 5
 1822 006c 7B68     		ldr	r3, [r7, #4]
 1823 006e 1B68     		ldr	r3, [r3]
 1824 0070 5A69     		ldr	r2, [r3, #20]
 1825 0072 7B68     		ldr	r3, [r7, #4]
 1826 0074 1B68     		ldr	r3, [r3]
 1827 0076 42F00102 		orr	r2, r2, #1
 1828 007a 5A61     		str	r2, [r3, #20]
1549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1829              		.loc 1 1551 5
 1830 007c 7B68     		ldr	r3, [r7, #4]
 1831 007e 1B68     		ldr	r3, [r3]
 1832 0080 5A69     		ldr	r2, [r3, #20]
 1833 0082 7B68     		ldr	r3, [r7, #4]
 1834 0084 1B68     		ldr	r3, [r3]
 1835 0086 42F04002 		orr	r2, r2, #64
 1836 008a 5A61     		str	r2, [r3, #20]
 1837              	.L87:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 60


1552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1838              		.loc 1 1555 3
 1839 008c 7B68     		ldr	r3, [r7, #4]
 1840 008e 0022     		movs	r2, #0
 1841 0090 83F83C20 		strb	r2, [r3, #60]
1556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1842              		.loc 1 1557 10
 1843 0094 0023     		movs	r3, #0
 1844              	.L85:
1558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1845              		.loc 1 1558 1
 1846 0096 1846     		mov	r0, r3
 1847 0098 1437     		adds	r7, r7, #20
 1848              		.cfi_def_cfa_offset 4
 1849 009a BD46     		mov	sp, r7
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 009c 80BC     		pop	{r7}
 1853              		.cfi_restore 7
 1854              		.cfi_def_cfa_offset 0
 1855 009e 7047     		bx	lr
 1856              		.cfi_endproc
 1857              	.LFE79:
 1859              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1860              		.align	1
 1861              		.global	HAL_UART_DMAStop
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1865              		.fpu softvfp
 1867              	HAL_UART_DMAStop:
 1868              	.LFB80:
1559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1869              		.loc 1 1567 1
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 16
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
 1873 0000 80B5     		push	{r7, lr}
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
 1877 0002 84B0     		sub	sp, sp, #16
 1878              		.cfi_def_cfa_offset 24
 1879 0004 00AF     		add	r7, sp, #0
 1880              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 61


 1881 0006 7860     		str	r0, [r7, #4]
1568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1882              		.loc 1 1568 12
 1883 0008 0023     		movs	r3, #0
 1884 000a FB60     		str	r3, [r7, #12]
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1885              		.loc 1 1576 16
 1886 000c 7B68     		ldr	r3, [r7, #4]
 1887 000e 1B68     		ldr	r3, [r3]
 1888 0010 5B69     		ldr	r3, [r3, #20]
 1889 0012 03F08003 		and	r3, r3, #128
 1890 0016 002B     		cmp	r3, #0
 1891 0018 14BF     		ite	ne
 1892 001a 0123     		movne	r3, #1
 1893 001c 0023     		moveq	r3, #0
 1894 001e DBB2     		uxtb	r3, r3
 1895              		.loc 1 1576 14
 1896 0020 FB60     		str	r3, [r7, #12]
1577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1897              		.loc 1 1577 13
 1898 0022 7B68     		ldr	r3, [r7, #4]
 1899 0024 93F83D30 		ldrb	r3, [r3, #61]
 1900 0028 DBB2     		uxtb	r3, r3
 1901              		.loc 1 1577 6
 1902 002a 212B     		cmp	r3, #33
 1903 002c 16D1     		bne	.L89
 1904              		.loc 1 1577 49 discriminator 1
 1905 002e FB68     		ldr	r3, [r7, #12]
 1906 0030 002B     		cmp	r3, #0
 1907 0032 13D0     		beq	.L89
1578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1908              		.loc 1 1579 5
 1909 0034 7B68     		ldr	r3, [r7, #4]
 1910 0036 1B68     		ldr	r3, [r3]
 1911 0038 5A69     		ldr	r2, [r3, #20]
 1912 003a 7B68     		ldr	r3, [r7, #4]
 1913 003c 1B68     		ldr	r3, [r3]
 1914 003e 22F08002 		bic	r2, r2, #128
 1915 0042 5A61     		str	r2, [r3, #20]
1580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 1916              		.loc 1 1582 14
 1917 0044 7B68     		ldr	r3, [r7, #4]
 1918 0046 5B6B     		ldr	r3, [r3, #52]
 1919              		.loc 1 1582 8
 1920 0048 002B     		cmp	r3, #0
 1921 004a 04D0     		beq	.L90
1583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 62


1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 1922              		.loc 1 1584 7
 1923 004c 7B68     		ldr	r3, [r7, #4]
 1924 004e 5B6B     		ldr	r3, [r3, #52]
 1925 0050 1846     		mov	r0, r3
 1926 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1927              	.L90:
1585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 1928              		.loc 1 1586 5
 1929 0056 7868     		ldr	r0, [r7, #4]
 1930 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 1931              	.L89:
1587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1932              		.loc 1 1590 16
 1933 005c 7B68     		ldr	r3, [r7, #4]
 1934 005e 1B68     		ldr	r3, [r3]
 1935 0060 5B69     		ldr	r3, [r3, #20]
 1936 0062 03F04003 		and	r3, r3, #64
 1937 0066 002B     		cmp	r3, #0
 1938 0068 14BF     		ite	ne
 1939 006a 0123     		movne	r3, #1
 1940 006c 0023     		moveq	r3, #0
 1941 006e DBB2     		uxtb	r3, r3
 1942              		.loc 1 1590 14
 1943 0070 FB60     		str	r3, [r7, #12]
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1944              		.loc 1 1591 13
 1945 0072 7B68     		ldr	r3, [r7, #4]
 1946 0074 93F83E30 		ldrb	r3, [r3, #62]
 1947 0078 DBB2     		uxtb	r3, r3
 1948              		.loc 1 1591 6
 1949 007a 222B     		cmp	r3, #34
 1950 007c 16D1     		bne	.L91
 1951              		.loc 1 1591 50 discriminator 1
 1952 007e FB68     		ldr	r3, [r7, #12]
 1953 0080 002B     		cmp	r3, #0
 1954 0082 13D0     		beq	.L91
1592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1955              		.loc 1 1593 5
 1956 0084 7B68     		ldr	r3, [r7, #4]
 1957 0086 1B68     		ldr	r3, [r3]
 1958 0088 5A69     		ldr	r2, [r3, #20]
 1959 008a 7B68     		ldr	r3, [r7, #4]
 1960 008c 1B68     		ldr	r3, [r3]
 1961 008e 22F04002 		bic	r2, r2, #64
 1962 0092 5A61     		str	r2, [r3, #20]
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 1963              		.loc 1 1596 14
 1964 0094 7B68     		ldr	r3, [r7, #4]
 1965 0096 9B6B     		ldr	r3, [r3, #56]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 63


 1966              		.loc 1 1596 8
 1967 0098 002B     		cmp	r3, #0
 1968 009a 04D0     		beq	.L92
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 1969              		.loc 1 1598 7
 1970 009c 7B68     		ldr	r3, [r7, #4]
 1971 009e 9B6B     		ldr	r3, [r3, #56]
 1972 00a0 1846     		mov	r0, r3
 1973 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 1974              	.L92:
1599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 1975              		.loc 1 1600 5
 1976 00a6 7868     		ldr	r0, [r7, #4]
 1977 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
 1978              	.L91:
1601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1979              		.loc 1 1603 10
 1980 00ac 0023     		movs	r3, #0
1604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1981              		.loc 1 1604 1
 1982 00ae 1846     		mov	r0, r3
 1983 00b0 1037     		adds	r7, r7, #16
 1984              		.cfi_def_cfa_offset 8
 1985 00b2 BD46     		mov	sp, r7
 1986              		.cfi_def_cfa_register 13
 1987              		@ sp needed
 1988 00b4 80BD     		pop	{r7, pc}
 1989              		.cfi_endproc
 1990              	.LFE80:
 1992              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 1993              		.align	1
 1994              		.global	HAL_UARTEx_ReceiveToIdle
 1995              		.syntax unified
 1996              		.thumb
 1997              		.thumb_func
 1998              		.fpu softvfp
 2000              	HAL_UARTEx_ReceiveToIdle:
 2001              	.LFB81:
1605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
1608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart   UART handle.
1615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 64


1620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2002              		.loc 1 1622 1
 2003              		.cfi_startproc
 2004              		@ args = 4, pretend = 0, frame = 32
 2005              		@ frame_needed = 1, uses_anonymous_args = 0
 2006 0000 80B5     		push	{r7, lr}
 2007              		.cfi_def_cfa_offset 8
 2008              		.cfi_offset 7, -8
 2009              		.cfi_offset 14, -4
 2010 0002 88B0     		sub	sp, sp, #32
 2011              		.cfi_def_cfa_offset 40
 2012 0004 00AF     		add	r7, sp, #0
 2013              		.cfi_def_cfa_register 7
 2014 0006 F860     		str	r0, [r7, #12]
 2015 0008 B960     		str	r1, [r7, #8]
 2016 000a 3B60     		str	r3, [r7]
 2017 000c 1346     		mov	r3, r2	@ movhi
 2018 000e FB80     		strh	r3, [r7, #6]	@ movhi
1623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart;
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2019              		.loc 1 1628 12
 2020 0010 FB68     		ldr	r3, [r7, #12]
 2021 0012 93F83E30 		ldrb	r3, [r3, #62]
 2022 0016 DBB2     		uxtb	r3, r3
 2023              		.loc 1 1628 6
 2024 0018 202B     		cmp	r3, #32
 2025 001a 40F0C980 		bne	.L95
1629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2026              		.loc 1 1630 8
 2027 001e BB68     		ldr	r3, [r7, #8]
 2028 0020 002B     		cmp	r3, #0
 2029 0022 02D0     		beq	.L96
 2030              		.loc 1 1630 25 discriminator 1
 2031 0024 FB88     		ldrh	r3, [r7, #6]
 2032 0026 002B     		cmp	r3, #0
 2033 0028 01D1     		bne	.L97
 2034              	.L96:
1631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 2035              		.loc 1 1632 15
 2036 002a 0123     		movs	r3, #1
 2037 002c C1E0     		b	.L98
 2038              	.L97:
1633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2039              		.loc 1 1635 5
 2040 002e FB68     		ldr	r3, [r7, #12]
 2041 0030 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2042 0034 012B     		cmp	r3, #1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 65


 2043 0036 01D1     		bne	.L99
 2044              		.loc 1 1635 5 is_stmt 0 discriminator 1
 2045 0038 0223     		movs	r3, #2
 2046 003a BAE0     		b	.L98
 2047              	.L99:
 2048              		.loc 1 1635 5 discriminator 2
 2049 003c FB68     		ldr	r3, [r7, #12]
 2050 003e 0122     		movs	r2, #1
 2051 0040 83F83C20 		strb	r2, [r3, #60]
1636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2052              		.loc 1 1637 22 is_stmt 1 discriminator 2
 2053 0044 FB68     		ldr	r3, [r7, #12]
 2054 0046 0022     		movs	r2, #0
 2055 0048 1A64     		str	r2, [r3, #64]
1638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2056              		.loc 1 1638 20 discriminator 2
 2057 004a FB68     		ldr	r3, [r7, #12]
 2058 004c 2222     		movs	r2, #34
 2059 004e 83F83E20 		strb	r2, [r3, #62]
1639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2060              		.loc 1 1639 26 discriminator 2
 2061 0052 FB68     		ldr	r3, [r7, #12]
 2062 0054 0122     		movs	r2, #1
 2063 0056 1A63     		str	r2, [r3, #48]
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2064              		.loc 1 1642 17 discriminator 2
 2065 0058 FFF7FEFF 		bl	HAL_GetTick
 2066 005c 7861     		str	r0, [r7, #20]
1643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize  = Size;
 2067              		.loc 1 1644 24 discriminator 2
 2068 005e FB68     		ldr	r3, [r7, #12]
 2069 0060 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2070 0062 9A85     		strh	r2, [r3, #44]	@ movhi
1645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 2071              		.loc 1 1645 24 discriminator 2
 2072 0064 FB68     		ldr	r3, [r7, #12]
 2073 0066 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2074 0068 DA85     		strh	r2, [r3, #46]	@ movhi
1646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 2075              		.loc 1 1648 21 discriminator 2
 2076 006a FB68     		ldr	r3, [r7, #12]
 2077 006c 9B68     		ldr	r3, [r3, #8]
 2078              		.loc 1 1648 8 discriminator 2
 2079 006e B3F5805F 		cmp	r3, #4096
 2080 0072 08D1     		bne	.L100
 2081              		.loc 1 1648 71 discriminator 1
 2082 0074 FB68     		ldr	r3, [r7, #12]
 2083 0076 1B69     		ldr	r3, [r3, #16]
 2084              		.loc 1 1648 56 discriminator 1
 2085 0078 002B     		cmp	r3, #0
 2086 007a 04D1     		bne	.L100
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 66


1649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 2087              		.loc 1 1650 19
 2088 007c 0023     		movs	r3, #0
 2089 007e FB61     		str	r3, [r7, #28]
1651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 2090              		.loc 1 1651 19
 2091 0080 BB68     		ldr	r3, [r7, #8]
 2092 0082 BB61     		str	r3, [r7, #24]
 2093 0084 03E0     		b	.L101
 2094              	.L100:
1652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 2095              		.loc 1 1655 19
 2096 0086 BB68     		ldr	r3, [r7, #8]
 2097 0088 FB61     		str	r3, [r7, #28]
1656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 2098              		.loc 1 1656 19
 2099 008a 0023     		movs	r3, #0
 2100 008c BB61     		str	r3, [r7, #24]
 2101              	.L101:
1657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 2102              		.loc 1 1659 5
 2103 008e FB68     		ldr	r3, [r7, #12]
 2104 0090 0022     		movs	r2, #0
 2105 0092 83F83C20 		strb	r2, [r3, #60]
1660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Initialize output number of received elements */
1662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = 0U;
 2106              		.loc 1 1662 12
 2107 0096 3B68     		ldr	r3, [r7]
 2108 0098 0022     		movs	r2, #0
 2109 009a 1A80     		strh	r2, [r3]	@ movhi
1663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* as long as data have to be received */
1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 2110              		.loc 1 1665 11
 2111 009c 74E0     		b	.L102
 2112              	.L111:
1666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if IDLE flag is set */
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 2113              		.loc 1 1668 11
 2114 009e FB68     		ldr	r3, [r7, #12]
 2115 00a0 1B68     		ldr	r3, [r3]
 2116 00a2 1B68     		ldr	r3, [r3]
 2117 00a4 03F01003 		and	r3, r3, #16
 2118              		.loc 1 1668 10
 2119 00a8 102B     		cmp	r3, #16
 2120 00aa 14D1     		bne	.L103
 2121              	.LBB3:
1669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 67


1671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2122              		.loc 1 1671 9
 2123 00ac 0023     		movs	r3, #0
 2124 00ae 3B61     		str	r3, [r7, #16]
 2125 00b0 FB68     		ldr	r3, [r7, #12]
 2126 00b2 1B68     		ldr	r3, [r3]
 2127 00b4 1B68     		ldr	r3, [r3]
 2128 00b6 3B61     		str	r3, [r7, #16]
 2129 00b8 FB68     		ldr	r3, [r7, #12]
 2130 00ba 1B68     		ldr	r3, [r3]
 2131 00bc 5B68     		ldr	r3, [r3, #4]
 2132 00be 3B61     		str	r3, [r7, #16]
 2133 00c0 3B69     		ldr	r3, [r7, #16]
 2134              	.LBE3:
1672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (*RxLen > 0U)
 2135              		.loc 1 1675 13
 2136 00c2 3B68     		ldr	r3, [r7]
 2137 00c4 1B88     		ldrh	r3, [r3]
 2138              		.loc 1 1675 12
 2139 00c6 002B     		cmp	r3, #0
 2140 00c8 05D0     		beq	.L103
1676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2141              		.loc 1 1677 26
 2142 00ca FB68     		ldr	r3, [r7, #12]
 2143 00cc 2022     		movs	r2, #32
 2144 00ce 83F83E20 		strb	r2, [r3, #62]
1678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_OK;
 2145              		.loc 1 1679 18
 2146 00d2 0023     		movs	r3, #0
 2147 00d4 6DE0     		b	.L98
 2148              	.L103:
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if RXNE flag is set */
1684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 2149              		.loc 1 1684 11
 2150 00d6 FB68     		ldr	r3, [r7, #12]
 2151 00d8 1B68     		ldr	r3, [r3]
 2152 00da 1B68     		ldr	r3, [r3]
 2153 00dc 03F02003 		and	r3, r3, #32
 2154              		.loc 1 1684 10
 2155 00e0 202B     		cmp	r3, #32
 2156 00e2 3CD1     		bne	.L104
1685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (pdata8bits == NULL)
 2157              		.loc 1 1686 12
 2158 00e4 FB69     		ldr	r3, [r7, #28]
 2159 00e6 002B     		cmp	r3, #0
 2160 00e8 0CD1     		bne	.L105
1687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 68


 2161              		.loc 1 1688 42
 2162 00ea FB68     		ldr	r3, [r7, #12]
 2163 00ec 1B68     		ldr	r3, [r3]
 2164              		.loc 1 1688 52
 2165 00ee 5B68     		ldr	r3, [r3, #4]
 2166              		.loc 1 1688 26
 2167 00f0 9BB2     		uxth	r3, r3
 2168 00f2 C3F30803 		ubfx	r3, r3, #0, #9
 2169 00f6 9AB2     		uxth	r2, r3
 2170              		.loc 1 1688 24
 2171 00f8 BB69     		ldr	r3, [r7, #24]
 2172 00fa 1A80     		strh	r2, [r3]	@ movhi
1689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata16bits++;
 2173              		.loc 1 1689 22
 2174 00fc BB69     		ldr	r3, [r7, #24]
 2175 00fe 0233     		adds	r3, r3, #2
 2176 0100 BB61     		str	r3, [r7, #24]
 2177 0102 1FE0     		b	.L106
 2178              	.L105:
1690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_W
 2179              		.loc 1 1693 28
 2180 0104 FB68     		ldr	r3, [r7, #12]
 2181 0106 9B68     		ldr	r3, [r3, #8]
 2182              		.loc 1 1693 15
 2183 0108 B3F5805F 		cmp	r3, #4096
 2184 010c 07D0     		beq	.L107
 2185              		.loc 1 1693 79 discriminator 1
 2186 010e FB68     		ldr	r3, [r7, #12]
 2187 0110 9B68     		ldr	r3, [r3, #8]
 2188              		.loc 1 1693 63 discriminator 1
 2189 0112 002B     		cmp	r3, #0
 2190 0114 0AD1     		bne	.L108
 2191              		.loc 1 1693 129 discriminator 2
 2192 0116 FB68     		ldr	r3, [r7, #12]
 2193 0118 1B69     		ldr	r3, [r3, #16]
 2194              		.loc 1 1693 114 discriminator 2
 2195 011a 002B     		cmp	r3, #0
 2196 011c 06D1     		bne	.L108
 2197              	.L107:
1694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 2198              		.loc 1 1695 43
 2199 011e FB68     		ldr	r3, [r7, #12]
 2200 0120 1B68     		ldr	r3, [r3]
 2201              		.loc 1 1695 53
 2202 0122 5B68     		ldr	r3, [r3, #4]
 2203              		.loc 1 1695 28
 2204 0124 DAB2     		uxtb	r2, r3
 2205              		.loc 1 1695 26
 2206 0126 FB69     		ldr	r3, [r7, #28]
 2207 0128 1A70     		strb	r2, [r3]
 2208 012a 08E0     		b	.L109
 2209              	.L108:
1696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 69


1697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            else
1698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 2210              		.loc 1 1699 43
 2211 012c FB68     		ldr	r3, [r7, #12]
 2212 012e 1B68     		ldr	r3, [r3]
 2213              		.loc 1 1699 53
 2214 0130 5B68     		ldr	r3, [r3, #4]
 2215              		.loc 1 1699 28
 2216 0132 DBB2     		uxtb	r3, r3
 2217 0134 03F07F03 		and	r3, r3, #127
 2218 0138 DAB2     		uxtb	r2, r3
 2219              		.loc 1 1699 26
 2220 013a FB69     		ldr	r3, [r7, #28]
 2221 013c 1A70     		strb	r2, [r3]
 2222              	.L109:
1700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
1701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata8bits++;
 2223              		.loc 1 1702 21
 2224 013e FB69     		ldr	r3, [r7, #28]
 2225 0140 0133     		adds	r3, r3, #1
 2226 0142 FB61     		str	r3, [r7, #28]
 2227              	.L106:
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Increment number of received elements */
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *RxLen += 1U;
 2228              		.loc 1 1705 16
 2229 0144 3B68     		ldr	r3, [r7]
 2230 0146 1B88     		ldrh	r3, [r3]
 2231 0148 0133     		adds	r3, r3, #1
 2232 014a 9AB2     		uxth	r2, r3
 2233 014c 3B68     		ldr	r3, [r7]
 2234 014e 1A80     		strh	r2, [r3]	@ movhi
1706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount--;
 2235              		.loc 1 1706 14
 2236 0150 FB68     		ldr	r3, [r7, #12]
 2237 0152 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2238 0154 9BB2     		uxth	r3, r3
 2239              		.loc 1 1706 27
 2240 0156 013B     		subs	r3, r3, #1
 2241 0158 9AB2     		uxth	r2, r3
 2242 015a FB68     		ldr	r3, [r7, #12]
 2243 015c DA85     		strh	r2, [r3, #46]	@ movhi
 2244              	.L104:
1707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check for the Timeout */
1710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 2245              		.loc 1 1710 10
 2246 015e BB6A     		ldr	r3, [r7, #40]
 2247 0160 B3F1FF3F 		cmp	r3, #-1
 2248 0164 10D0     		beq	.L102
1711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2249              		.loc 1 1712 15
 2250 0166 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 70


 2251 016a 0246     		mov	r2, r0
 2252              		.loc 1 1712 29
 2253 016c 7B69     		ldr	r3, [r7, #20]
 2254 016e D31A     		subs	r3, r2, r3
 2255              		.loc 1 1712 12
 2256 0170 BA6A     		ldr	r2, [r7, #40]
 2257 0172 9A42     		cmp	r2, r3
 2258 0174 02D3     		bcc	.L110
 2259              		.loc 1 1712 53 discriminator 1
 2260 0176 BB6A     		ldr	r3, [r7, #40]
 2261 0178 002B     		cmp	r3, #0
 2262 017a 05D1     		bne	.L102
 2263              	.L110:
1713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2264              		.loc 1 1714 26
 2265 017c FB68     		ldr	r3, [r7, #12]
 2266 017e 2022     		movs	r2, #32
 2267 0180 83F83E20 		strb	r2, [r3, #62]
1715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2268              		.loc 1 1716 18
 2269 0184 0323     		movs	r3, #3
 2270 0186 14E0     		b	.L98
 2271              	.L102:
1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2272              		.loc 1 1665 17
 2273 0188 FB68     		ldr	r3, [r7, #12]
 2274 018a DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2275 018c 9BB2     		uxth	r3, r3
1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2276              		.loc 1 1665 11
 2277 018e 002B     		cmp	r3, #0
 2278 0190 85D1     		bne	.L111
1717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 2279              		.loc 1 1722 19
 2280 0192 FB68     		ldr	r3, [r7, #12]
 2281 0194 9A8D     		ldrh	r2, [r3, #44]
 2282              		.loc 1 1722 39
 2283 0196 FB68     		ldr	r3, [r7, #12]
 2284 0198 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2285 019a 9BB2     		uxth	r3, r3
 2286              		.loc 1 1722 32
 2287 019c D31A     		subs	r3, r2, r3
 2288 019e 9AB2     		uxth	r2, r3
 2289              		.loc 1 1722 12
 2290 01a0 3B68     		ldr	r3, [r7]
 2291 01a2 1A80     		strh	r2, [r3]	@ movhi
1723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2292              		.loc 1 1724 20
 2293 01a4 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 71


 2294 01a6 2022     		movs	r2, #32
 2295 01a8 83F83E20 		strb	r2, [r3, #62]
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 2296              		.loc 1 1726 12
 2297 01ac 0023     		movs	r3, #0
 2298 01ae 00E0     		b	.L98
 2299              	.L95:
1727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2300              		.loc 1 1730 12
 2301 01b0 0223     		movs	r3, #2
 2302              	.L98:
1731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2303              		.loc 1 1732 1
 2304 01b2 1846     		mov	r0, r3
 2305 01b4 2037     		adds	r7, r7, #32
 2306              		.cfi_def_cfa_offset 8
 2307 01b6 BD46     		mov	sp, r7
 2308              		.cfi_def_cfa_register 13
 2309              		@ sp needed
 2310 01b8 80BD     		pop	{r7, pc}
 2311              		.cfi_endproc
 2312              	.LFE81:
 2314              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 2315              		.align	1
 2316              		.global	HAL_UARTEx_ReceiveToIdle_IT
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu softvfp
 2322              	HAL_UARTEx_ReceiveToIdle_IT:
 2323              	.LFB82:
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
1738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         number of received data elements.
1739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2324              		.loc 1 1748 1
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 24
 2327              		@ frame_needed = 1, uses_anonymous_args = 0
 2328 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 72


 2329              		.cfi_def_cfa_offset 8
 2330              		.cfi_offset 7, -8
 2331              		.cfi_offset 14, -4
 2332 0002 86B0     		sub	sp, sp, #24
 2333              		.cfi_def_cfa_offset 32
 2334 0004 00AF     		add	r7, sp, #0
 2335              		.cfi_def_cfa_register 7
 2336 0006 F860     		str	r0, [r7, #12]
 2337 0008 B960     		str	r1, [r7, #8]
 2338 000a 1346     		mov	r3, r2
 2339 000c FB80     		strh	r3, [r7, #6]	@ movhi
1749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2340              		.loc 1 1752 12
 2341 000e FB68     		ldr	r3, [r7, #12]
 2342 0010 93F83E30 		ldrb	r3, [r3, #62]
 2343 0014 DBB2     		uxtb	r3, r3
 2344              		.loc 1 1752 6
 2345 0016 202B     		cmp	r3, #32
 2346 0018 3CD1     		bne	.L113
1753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2347              		.loc 1 1754 8
 2348 001a BB68     		ldr	r3, [r7, #8]
 2349 001c 002B     		cmp	r3, #0
 2350 001e 02D0     		beq	.L114
 2351              		.loc 1 1754 25 discriminator 1
 2352 0020 FB88     		ldrh	r3, [r7, #6]
 2353 0022 002B     		cmp	r3, #0
 2354 0024 01D1     		bne	.L115
 2355              	.L114:
1755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2356              		.loc 1 1756 14
 2357 0026 0123     		movs	r3, #1
 2358 0028 35E0     		b	.L116
 2359              	.L115:
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2360              		.loc 1 1759 5
 2361 002a FB68     		ldr	r3, [r7, #12]
 2362 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2363 0030 012B     		cmp	r3, #1
 2364 0032 01D1     		bne	.L117
 2365              		.loc 1 1759 5 is_stmt 0 discriminator 1
 2366 0034 0223     		movs	r3, #2
 2367 0036 2EE0     		b	.L116
 2368              	.L117:
 2369              		.loc 1 1759 5 discriminator 2
 2370 0038 FB68     		ldr	r3, [r7, #12]
 2371 003a 0122     		movs	r2, #1
 2372 003c 83F83C20 		strb	r2, [r3, #60]
1760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 73


1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2373              		.loc 1 1762 26 is_stmt 1 discriminator 2
 2374 0040 FB68     		ldr	r3, [r7, #12]
 2375 0042 0122     		movs	r2, #1
 2376 0044 1A63     		str	r2, [r3, #48]
1763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 2377              		.loc 1 1764 15 discriminator 2
 2378 0046 FB88     		ldrh	r3, [r7, #6]
 2379 0048 1A46     		mov	r2, r3
 2380 004a B968     		ldr	r1, [r7, #8]
 2381 004c F868     		ldr	r0, [r7, #12]
 2382 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 2383 0052 0346     		mov	r3, r0
 2384 0054 FB75     		strb	r3, [r7, #23]
1765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2385              		.loc 1 1767 8 discriminator 2
 2386 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2387 0058 002B     		cmp	r3, #0
 2388 005a 19D1     		bne	.L118
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2389              		.loc 1 1769 16
 2390 005c FB68     		ldr	r3, [r7, #12]
 2391 005e 1B6B     		ldr	r3, [r3, #48]
 2392              		.loc 1 1769 10
 2393 0060 012B     		cmp	r3, #1
 2394 0062 13D1     		bne	.L119
 2395              	.LBB4:
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2396              		.loc 1 1771 9
 2397 0064 0023     		movs	r3, #0
 2398 0066 3B61     		str	r3, [r7, #16]
 2399 0068 FB68     		ldr	r3, [r7, #12]
 2400 006a 1B68     		ldr	r3, [r3]
 2401 006c 1B68     		ldr	r3, [r3]
 2402 006e 3B61     		str	r3, [r7, #16]
 2403 0070 FB68     		ldr	r3, [r7, #12]
 2404 0072 1B68     		ldr	r3, [r3]
 2405 0074 5B68     		ldr	r3, [r3, #4]
 2406 0076 3B61     		str	r3, [r7, #16]
 2407 0078 3B69     		ldr	r3, [r7, #16]
 2408              	.LBE4:
1772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2409              		.loc 1 1772 9
 2410 007a FB68     		ldr	r3, [r7, #12]
 2411 007c 1B68     		ldr	r3, [r3]
 2412 007e DA68     		ldr	r2, [r3, #12]
 2413 0080 FB68     		ldr	r3, [r7, #12]
 2414 0082 1B68     		ldr	r3, [r3]
 2415 0084 42F01002 		orr	r2, r2, #16
 2416 0088 DA60     		str	r2, [r3, #12]
 2417 008a 01E0     		b	.L118
 2418              	.L119:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 74


1773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2419              		.loc 1 1780 16
 2420 008c 0123     		movs	r3, #1
 2421 008e FB75     		strb	r3, [r7, #23]
 2422              	.L118:
1781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2423              		.loc 1 1784 12
 2424 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2425 0092 00E0     		b	.L116
 2426              	.L113:
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2427              		.loc 1 1788 12
 2428 0094 0223     		movs	r3, #2
 2429              	.L116:
1789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2430              		.loc 1 1790 1
 2431 0096 1846     		mov	r0, r3
 2432 0098 1837     		adds	r7, r7, #24
 2433              		.cfi_def_cfa_offset 8
 2434 009a BD46     		mov	sp, r7
 2435              		.cfi_def_cfa_register 13
 2436              		@ sp needed
 2437 009c 80BD     		pop	{r7, pc}
 2438              		.cfi_endproc
 2439              	.LFE82:
 2441              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 2442              		.align	1
 2443              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 2444              		.syntax unified
 2445              		.thumb
 2446              		.thumb_func
 2447              		.fpu softvfp
 2449              	HAL_UARTEx_ReceiveToIdle_DMA:
 2450              	.LFB83:
1791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the parity bit (MSB position).
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 75


1800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2451              		.loc 1 1809 1
 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 24
 2454              		@ frame_needed = 1, uses_anonymous_args = 0
 2455 0000 80B5     		push	{r7, lr}
 2456              		.cfi_def_cfa_offset 8
 2457              		.cfi_offset 7, -8
 2458              		.cfi_offset 14, -4
 2459 0002 86B0     		sub	sp, sp, #24
 2460              		.cfi_def_cfa_offset 32
 2461 0004 00AF     		add	r7, sp, #0
 2462              		.cfi_def_cfa_register 7
 2463 0006 F860     		str	r0, [r7, #12]
 2464 0008 B960     		str	r1, [r7, #8]
 2465 000a 1346     		mov	r3, r2
 2466 000c FB80     		strh	r3, [r7, #6]	@ movhi
1810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2467              		.loc 1 1813 12
 2468 000e FB68     		ldr	r3, [r7, #12]
 2469 0010 93F83E30 		ldrb	r3, [r3, #62]
 2470 0014 DBB2     		uxtb	r3, r3
 2471              		.loc 1 1813 6
 2472 0016 202B     		cmp	r3, #32
 2473 0018 3CD1     		bne	.L121
1814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2474              		.loc 1 1815 8
 2475 001a BB68     		ldr	r3, [r7, #8]
 2476 001c 002B     		cmp	r3, #0
 2477 001e 02D0     		beq	.L122
 2478              		.loc 1 1815 25 discriminator 1
 2479 0020 FB88     		ldrh	r3, [r7, #6]
 2480 0022 002B     		cmp	r3, #0
 2481 0024 01D1     		bne	.L123
 2482              	.L122:
1816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2483              		.loc 1 1817 14
 2484 0026 0123     		movs	r3, #1
 2485 0028 35E0     		b	.L124
 2486              	.L123:
1818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 76


 2487              		.loc 1 1820 5
 2488 002a FB68     		ldr	r3, [r7, #12]
 2489 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2490 0030 012B     		cmp	r3, #1
 2491 0032 01D1     		bne	.L125
 2492              		.loc 1 1820 5 is_stmt 0 discriminator 1
 2493 0034 0223     		movs	r3, #2
 2494 0036 2EE0     		b	.L124
 2495              	.L125:
 2496              		.loc 1 1820 5 discriminator 2
 2497 0038 FB68     		ldr	r3, [r7, #12]
 2498 003a 0122     		movs	r2, #1
 2499 003c 83F83C20 		strb	r2, [r3, #60]
1821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2500              		.loc 1 1823 26 is_stmt 1 discriminator 2
 2501 0040 FB68     		ldr	r3, [r7, #12]
 2502 0042 0122     		movs	r2, #1
 2503 0044 1A63     		str	r2, [r3, #48]
1824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 2504              		.loc 1 1825 15 discriminator 2
 2505 0046 FB88     		ldrh	r3, [r7, #6]
 2506 0048 1A46     		mov	r2, r3
 2507 004a B968     		ldr	r1, [r7, #8]
 2508 004c F868     		ldr	r0, [r7, #12]
 2509 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2510 0052 0346     		mov	r3, r0
 2511 0054 FB75     		strb	r3, [r7, #23]
1826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2512              		.loc 1 1828 8 discriminator 2
 2513 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2514 0058 002B     		cmp	r3, #0
 2515 005a 19D1     		bne	.L126
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2516              		.loc 1 1830 16
 2517 005c FB68     		ldr	r3, [r7, #12]
 2518 005e 1B6B     		ldr	r3, [r3, #48]
 2519              		.loc 1 1830 10
 2520 0060 012B     		cmp	r3, #1
 2521 0062 13D1     		bne	.L127
 2522              	.LBB5:
1831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2523              		.loc 1 1832 9
 2524 0064 0023     		movs	r3, #0
 2525 0066 3B61     		str	r3, [r7, #16]
 2526 0068 FB68     		ldr	r3, [r7, #12]
 2527 006a 1B68     		ldr	r3, [r3]
 2528 006c 1B68     		ldr	r3, [r3]
 2529 006e 3B61     		str	r3, [r7, #16]
 2530 0070 FB68     		ldr	r3, [r7, #12]
 2531 0072 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 77


 2532 0074 5B68     		ldr	r3, [r3, #4]
 2533 0076 3B61     		str	r3, [r7, #16]
 2534 0078 3B69     		ldr	r3, [r7, #16]
 2535              	.LBE5:
1833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2536              		.loc 1 1833 9
 2537 007a FB68     		ldr	r3, [r7, #12]
 2538 007c 1B68     		ldr	r3, [r3]
 2539 007e DA68     		ldr	r2, [r3, #12]
 2540 0080 FB68     		ldr	r3, [r7, #12]
 2541 0082 1B68     		ldr	r3, [r3]
 2542 0084 42F01002 		orr	r2, r2, #16
 2543 0088 DA60     		str	r2, [r3, #12]
 2544 008a 01E0     		b	.L126
 2545              	.L127:
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2546              		.loc 1 1841 16
 2547 008c 0123     		movs	r3, #1
 2548 008e FB75     		strb	r3, [r7, #23]
 2549              	.L126:
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2550              		.loc 1 1845 12
 2551 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2552 0092 00E0     		b	.L124
 2553              	.L121:
1846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2554              		.loc 1 1849 12
 2555 0094 0223     		movs	r3, #2
 2556              	.L124:
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2557              		.loc 1 1851 1
 2558 0096 1846     		mov	r0, r3
 2559 0098 1837     		adds	r7, r7, #24
 2560              		.cfi_def_cfa_offset 8
 2561 009a BD46     		mov	sp, r7
 2562              		.cfi_def_cfa_register 13
 2563              		@ sp needed
 2564 009c 80BD     		pop	{r7, pc}
 2565              		.cfi_endproc
 2566              	.LFE83:
 2568              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2569              		.align	1
 2570              		.global	HAL_UART_Abort
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 78


 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2574              		.fpu softvfp
 2576              	HAL_UART_Abort:
 2577              	.LFB84:
1852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2578              		.loc 1 1866 1
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 8
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582 0000 80B5     		push	{r7, lr}
 2583              		.cfi_def_cfa_offset 8
 2584              		.cfi_offset 7, -8
 2585              		.cfi_offset 14, -4
 2586 0002 82B0     		sub	sp, sp, #8
 2587              		.cfi_def_cfa_offset 16
 2588 0004 00AF     		add	r7, sp, #0
 2589              		.cfi_def_cfa_register 7
 2590 0006 7860     		str	r0, [r7, #4]
1867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2591              		.loc 1 1868 3
 2592 0008 7B68     		ldr	r3, [r7, #4]
 2593 000a 1B68     		ldr	r3, [r3]
 2594 000c DA68     		ldr	r2, [r3, #12]
 2595 000e 7B68     		ldr	r3, [r7, #4]
 2596 0010 1B68     		ldr	r3, [r3]
 2597 0012 22F4F072 		bic	r2, r2, #480
 2598 0016 DA60     		str	r2, [r3, #12]
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2599              		.loc 1 1869 3
 2600 0018 7B68     		ldr	r3, [r7, #4]
 2601 001a 1B68     		ldr	r3, [r3]
 2602 001c 5A69     		ldr	r2, [r3, #20]
 2603 001e 7B68     		ldr	r3, [r7, #4]
 2604 0020 1B68     		ldr	r3, [r3]
 2605 0022 22F00102 		bic	r2, r2, #1
 2606 0026 5A61     		str	r2, [r3, #20]
1870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2607              		.loc 1 1872 12
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 79


 2608 0028 7B68     		ldr	r3, [r7, #4]
 2609 002a 1B6B     		ldr	r3, [r3, #48]
 2610              		.loc 1 1872 6
 2611 002c 012B     		cmp	r3, #1
 2612 002e 07D1     		bne	.L129
1873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2613              		.loc 1 1874 5
 2614 0030 7B68     		ldr	r3, [r7, #4]
 2615 0032 1B68     		ldr	r3, [r3]
 2616 0034 DA68     		ldr	r2, [r3, #12]
 2617 0036 7B68     		ldr	r3, [r7, #4]
 2618 0038 1B68     		ldr	r3, [r3]
 2619 003a 22F01002 		bic	r2, r2, #16
 2620 003e DA60     		str	r2, [r3, #12]
 2621              	.L129:
1875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2622              		.loc 1 1878 7
 2623 0040 7B68     		ldr	r3, [r7, #4]
 2624 0042 1B68     		ldr	r3, [r3]
 2625 0044 5B69     		ldr	r3, [r3, #20]
 2626 0046 03F08003 		and	r3, r3, #128
 2627              		.loc 1 1878 6
 2628 004a 002B     		cmp	r3, #0
 2629 004c 24D0     		beq	.L130
1879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2630              		.loc 1 1880 5
 2631 004e 7B68     		ldr	r3, [r7, #4]
 2632 0050 1B68     		ldr	r3, [r3]
 2633 0052 5A69     		ldr	r2, [r3, #20]
 2634 0054 7B68     		ldr	r3, [r7, #4]
 2635 0056 1B68     		ldr	r3, [r3]
 2636 0058 22F08002 		bic	r2, r2, #128
 2637 005c 5A61     		str	r2, [r3, #20]
1881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2638              		.loc 1 1883 14
 2639 005e 7B68     		ldr	r3, [r7, #4]
 2640 0060 5B6B     		ldr	r3, [r3, #52]
 2641              		.loc 1 1883 8
 2642 0062 002B     		cmp	r3, #0
 2643 0064 18D0     		beq	.L130
1884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2644              		.loc 1 1887 12
 2645 0066 7B68     		ldr	r3, [r7, #4]
 2646 0068 5B6B     		ldr	r3, [r3, #52]
 2647              		.loc 1 1887 40
 2648 006a 0022     		movs	r2, #0
 2649 006c 5A63     		str	r2, [r3, #52]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 80


1888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2650              		.loc 1 1889 11
 2651 006e 7B68     		ldr	r3, [r7, #4]
 2652 0070 5B6B     		ldr	r3, [r3, #52]
 2653 0072 1846     		mov	r0, r3
 2654 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2655 0078 0346     		mov	r3, r0
 2656              		.loc 1 1889 10
 2657 007a 002B     		cmp	r3, #0
 2658 007c 0CD0     		beq	.L130
1890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2659              		.loc 1 1891 13
 2660 007e 7B68     		ldr	r3, [r7, #4]
 2661 0080 5B6B     		ldr	r3, [r3, #52]
 2662 0082 1846     		mov	r0, r3
 2663 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2664 0088 0346     		mov	r3, r0
 2665              		.loc 1 1891 12
 2666 008a 202B     		cmp	r3, #32
 2667 008c 04D1     		bne	.L130
1892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2668              		.loc 1 1894 28
 2669 008e 7B68     		ldr	r3, [r7, #4]
 2670 0090 1022     		movs	r2, #16
 2671 0092 1A64     		str	r2, [r3, #64]
1895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2672              		.loc 1 1896 18
 2673 0094 0323     		movs	r3, #3
 2674 0096 40E0     		b	.L131
 2675              	.L130:
1897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2676              		.loc 1 1903 7
 2677 0098 7B68     		ldr	r3, [r7, #4]
 2678 009a 1B68     		ldr	r3, [r3]
 2679 009c 5B69     		ldr	r3, [r3, #20]
 2680 009e 03F04003 		and	r3, r3, #64
 2681              		.loc 1 1903 6
 2682 00a2 002B     		cmp	r3, #0
 2683 00a4 24D0     		beq	.L132
1904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2684              		.loc 1 1905 5
 2685 00a6 7B68     		ldr	r3, [r7, #4]
 2686 00a8 1B68     		ldr	r3, [r3]
 2687 00aa 5A69     		ldr	r2, [r3, #20]
 2688 00ac 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 81


 2689 00ae 1B68     		ldr	r3, [r3]
 2690 00b0 22F04002 		bic	r2, r2, #64
 2691 00b4 5A61     		str	r2, [r3, #20]
1906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2692              		.loc 1 1908 14
 2693 00b6 7B68     		ldr	r3, [r7, #4]
 2694 00b8 9B6B     		ldr	r3, [r3, #56]
 2695              		.loc 1 1908 8
 2696 00ba 002B     		cmp	r3, #0
 2697 00bc 18D0     		beq	.L132
1909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2698              		.loc 1 1912 12
 2699 00be 7B68     		ldr	r3, [r7, #4]
 2700 00c0 9B6B     		ldr	r3, [r3, #56]
 2701              		.loc 1 1912 40
 2702 00c2 0022     		movs	r2, #0
 2703 00c4 5A63     		str	r2, [r3, #52]
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2704              		.loc 1 1914 11
 2705 00c6 7B68     		ldr	r3, [r7, #4]
 2706 00c8 9B6B     		ldr	r3, [r3, #56]
 2707 00ca 1846     		mov	r0, r3
 2708 00cc FFF7FEFF 		bl	HAL_DMA_Abort
 2709 00d0 0346     		mov	r3, r0
 2710              		.loc 1 1914 10
 2711 00d2 002B     		cmp	r3, #0
 2712 00d4 0CD0     		beq	.L132
1915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2713              		.loc 1 1916 13
 2714 00d6 7B68     		ldr	r3, [r7, #4]
 2715 00d8 9B6B     		ldr	r3, [r3, #56]
 2716 00da 1846     		mov	r0, r3
 2717 00dc FFF7FEFF 		bl	HAL_DMA_GetError
 2718 00e0 0346     		mov	r3, r0
 2719              		.loc 1 1916 12
 2720 00e2 202B     		cmp	r3, #32
 2721 00e4 04D1     		bne	.L132
1917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2722              		.loc 1 1919 28
 2723 00e6 7B68     		ldr	r3, [r7, #4]
 2724 00e8 1022     		movs	r2, #16
 2725 00ea 1A64     		str	r2, [r3, #64]
1920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2726              		.loc 1 1921 18
 2727 00ec 0323     		movs	r3, #3
 2728 00ee 14E0     		b	.L131
 2729              	.L132:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 82


1922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2730              		.loc 1 1928 22
 2731 00f0 7B68     		ldr	r3, [r7, #4]
 2732 00f2 0022     		movs	r2, #0
 2733 00f4 DA84     		strh	r2, [r3, #38]	@ movhi
1929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2734              		.loc 1 1929 22
 2735 00f6 7B68     		ldr	r3, [r7, #4]
 2736 00f8 0022     		movs	r2, #0
 2737 00fa DA85     		strh	r2, [r3, #46]	@ movhi
1930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2738              		.loc 1 1932 20
 2739 00fc 7B68     		ldr	r3, [r7, #4]
 2740 00fe 0022     		movs	r2, #0
 2741 0100 1A64     		str	r2, [r3, #64]
1933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2742              		.loc 1 1935 18
 2743 0102 7B68     		ldr	r3, [r7, #4]
 2744 0104 2022     		movs	r2, #32
 2745 0106 83F83E20 		strb	r2, [r3, #62]
1936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2746              		.loc 1 1936 17
 2747 010a 7B68     		ldr	r3, [r7, #4]
 2748 010c 2022     		movs	r2, #32
 2749 010e 83F83D20 		strb	r2, [r3, #61]
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2750              		.loc 1 1937 24
 2751 0112 7B68     		ldr	r3, [r7, #4]
 2752 0114 0022     		movs	r2, #0
 2753 0116 1A63     		str	r2, [r3, #48]
1938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2754              		.loc 1 1939 10
 2755 0118 0023     		movs	r3, #0
 2756              	.L131:
1940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2757              		.loc 1 1940 1
 2758 011a 1846     		mov	r0, r3
 2759 011c 0837     		adds	r7, r7, #8
 2760              		.cfi_def_cfa_offset 8
 2761 011e BD46     		mov	sp, r7
 2762              		.cfi_def_cfa_register 13
 2763              		@ sp needed
 2764 0120 80BD     		pop	{r7, pc}
 2765              		.cfi_endproc
 2766              	.LFE84:
 2768              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 83


 2769              		.align	1
 2770              		.global	HAL_UART_AbortTransmit
 2771              		.syntax unified
 2772              		.thumb
 2773              		.thumb_func
 2774              		.fpu softvfp
 2776              	HAL_UART_AbortTransmit:
 2777              	.LFB85:
1941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2778              		.loc 1 1955 1
 2779              		.cfi_startproc
 2780              		@ args = 0, pretend = 0, frame = 8
 2781              		@ frame_needed = 1, uses_anonymous_args = 0
 2782 0000 80B5     		push	{r7, lr}
 2783              		.cfi_def_cfa_offset 8
 2784              		.cfi_offset 7, -8
 2785              		.cfi_offset 14, -4
 2786 0002 82B0     		sub	sp, sp, #8
 2787              		.cfi_def_cfa_offset 16
 2788 0004 00AF     		add	r7, sp, #0
 2789              		.cfi_def_cfa_register 7
 2790 0006 7860     		str	r0, [r7, #4]
1956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2791              		.loc 1 1957 3
 2792 0008 7B68     		ldr	r3, [r7, #4]
 2793 000a 1B68     		ldr	r3, [r3]
 2794 000c DA68     		ldr	r2, [r3, #12]
 2795 000e 7B68     		ldr	r3, [r7, #4]
 2796 0010 1B68     		ldr	r3, [r3]
 2797 0012 22F0C002 		bic	r2, r2, #192
 2798 0016 DA60     		str	r2, [r3, #12]
1958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2799              		.loc 1 1960 7
 2800 0018 7B68     		ldr	r3, [r7, #4]
 2801 001a 1B68     		ldr	r3, [r3]
 2802 001c 5B69     		ldr	r3, [r3, #20]
 2803 001e 03F08003 		and	r3, r3, #128
 2804              		.loc 1 1960 6
 2805 0022 002B     		cmp	r3, #0
 2806 0024 24D0     		beq	.L134
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 84


1961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2807              		.loc 1 1962 5
 2808 0026 7B68     		ldr	r3, [r7, #4]
 2809 0028 1B68     		ldr	r3, [r3]
 2810 002a 5A69     		ldr	r2, [r3, #20]
 2811 002c 7B68     		ldr	r3, [r7, #4]
 2812 002e 1B68     		ldr	r3, [r3]
 2813 0030 22F08002 		bic	r2, r2, #128
 2814 0034 5A61     		str	r2, [r3, #20]
1963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2815              		.loc 1 1965 14
 2816 0036 7B68     		ldr	r3, [r7, #4]
 2817 0038 5B6B     		ldr	r3, [r3, #52]
 2818              		.loc 1 1965 8
 2819 003a 002B     		cmp	r3, #0
 2820 003c 18D0     		beq	.L134
1966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2821              		.loc 1 1969 12
 2822 003e 7B68     		ldr	r3, [r7, #4]
 2823 0040 5B6B     		ldr	r3, [r3, #52]
 2824              		.loc 1 1969 40
 2825 0042 0022     		movs	r2, #0
 2826 0044 5A63     		str	r2, [r3, #52]
1970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2827              		.loc 1 1971 11
 2828 0046 7B68     		ldr	r3, [r7, #4]
 2829 0048 5B6B     		ldr	r3, [r3, #52]
 2830 004a 1846     		mov	r0, r3
 2831 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2832 0050 0346     		mov	r3, r0
 2833              		.loc 1 1971 10
 2834 0052 002B     		cmp	r3, #0
 2835 0054 0CD0     		beq	.L134
1972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2836              		.loc 1 1973 13
 2837 0056 7B68     		ldr	r3, [r7, #4]
 2838 0058 5B6B     		ldr	r3, [r3, #52]
 2839 005a 1846     		mov	r0, r3
 2840 005c FFF7FEFF 		bl	HAL_DMA_GetError
 2841 0060 0346     		mov	r3, r0
 2842              		.loc 1 1973 12
 2843 0062 202B     		cmp	r3, #32
 2844 0064 04D1     		bne	.L134
1974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2845              		.loc 1 1976 28
 2846 0066 7B68     		ldr	r3, [r7, #4]
 2847 0068 1022     		movs	r2, #16
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 85


 2848 006a 1A64     		str	r2, [r3, #64]
1977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2849              		.loc 1 1978 18
 2850 006c 0323     		movs	r3, #3
 2851 006e 07E0     		b	.L135
 2852              	.L134:
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2853              		.loc 1 1985 22
 2854 0070 7B68     		ldr	r3, [r7, #4]
 2855 0072 0022     		movs	r2, #0
 2856 0074 DA84     		strh	r2, [r3, #38]	@ movhi
1986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2857              		.loc 1 1988 17
 2858 0076 7B68     		ldr	r3, [r7, #4]
 2859 0078 2022     		movs	r2, #32
 2860 007a 83F83D20 		strb	r2, [r3, #61]
1989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2861              		.loc 1 1990 10
 2862 007e 0023     		movs	r3, #0
 2863              	.L135:
1991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2864              		.loc 1 1991 1
 2865 0080 1846     		mov	r0, r3
 2866 0082 0837     		adds	r7, r7, #8
 2867              		.cfi_def_cfa_offset 8
 2868 0084 BD46     		mov	sp, r7
 2869              		.cfi_def_cfa_register 13
 2870              		@ sp needed
 2871 0086 80BD     		pop	{r7, pc}
 2872              		.cfi_endproc
 2873              	.LFE85:
 2875              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2876              		.align	1
 2877              		.global	HAL_UART_AbortReceive
 2878              		.syntax unified
 2879              		.thumb
 2880              		.thumb_func
 2881              		.fpu softvfp
 2883              	HAL_UART_AbortReceive:
 2884              	.LFB86:
1992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 86


1999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
2001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
2006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2885              		.loc 1 2006 1
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 8
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889 0000 80B5     		push	{r7, lr}
 2890              		.cfi_def_cfa_offset 8
 2891              		.cfi_offset 7, -8
 2892              		.cfi_offset 14, -4
 2893 0002 82B0     		sub	sp, sp, #8
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              		.cfi_def_cfa_register 7
 2897 0006 7860     		str	r0, [r7, #4]
2007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2898              		.loc 1 2008 3
 2899 0008 7B68     		ldr	r3, [r7, #4]
 2900 000a 1B68     		ldr	r3, [r3]
 2901 000c DA68     		ldr	r2, [r3, #12]
 2902 000e 7B68     		ldr	r3, [r7, #4]
 2903 0010 1B68     		ldr	r3, [r3]
 2904 0012 22F49072 		bic	r2, r2, #288
 2905 0016 DA60     		str	r2, [r3, #12]
2009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2906              		.loc 1 2009 3
 2907 0018 7B68     		ldr	r3, [r7, #4]
 2908 001a 1B68     		ldr	r3, [r3]
 2909 001c 5A69     		ldr	r2, [r3, #20]
 2910 001e 7B68     		ldr	r3, [r7, #4]
 2911 0020 1B68     		ldr	r3, [r3]
 2912 0022 22F00102 		bic	r2, r2, #1
 2913 0026 5A61     		str	r2, [r3, #20]
2010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2914              		.loc 1 2012 12
 2915 0028 7B68     		ldr	r3, [r7, #4]
 2916 002a 1B6B     		ldr	r3, [r3, #48]
 2917              		.loc 1 2012 6
 2918 002c 012B     		cmp	r3, #1
 2919 002e 07D1     		bne	.L137
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2920              		.loc 1 2014 5
 2921 0030 7B68     		ldr	r3, [r7, #4]
 2922 0032 1B68     		ldr	r3, [r3]
 2923 0034 DA68     		ldr	r2, [r3, #12]
 2924 0036 7B68     		ldr	r3, [r7, #4]
 2925 0038 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 87


 2926 003a 22F01002 		bic	r2, r2, #16
 2927 003e DA60     		str	r2, [r3, #12]
 2928              	.L137:
2015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2929              		.loc 1 2018 7
 2930 0040 7B68     		ldr	r3, [r7, #4]
 2931 0042 1B68     		ldr	r3, [r3]
 2932 0044 5B69     		ldr	r3, [r3, #20]
 2933 0046 03F04003 		and	r3, r3, #64
 2934              		.loc 1 2018 6
 2935 004a 002B     		cmp	r3, #0
 2936 004c 24D0     		beq	.L138
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2937              		.loc 1 2020 5
 2938 004e 7B68     		ldr	r3, [r7, #4]
 2939 0050 1B68     		ldr	r3, [r3]
 2940 0052 5A69     		ldr	r2, [r3, #20]
 2941 0054 7B68     		ldr	r3, [r7, #4]
 2942 0056 1B68     		ldr	r3, [r3]
 2943 0058 22F04002 		bic	r2, r2, #64
 2944 005c 5A61     		str	r2, [r3, #20]
2021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2945              		.loc 1 2023 14
 2946 005e 7B68     		ldr	r3, [r7, #4]
 2947 0060 9B6B     		ldr	r3, [r3, #56]
 2948              		.loc 1 2023 8
 2949 0062 002B     		cmp	r3, #0
 2950 0064 18D0     		beq	.L138
2024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2951              		.loc 1 2027 12
 2952 0066 7B68     		ldr	r3, [r7, #4]
 2953 0068 9B6B     		ldr	r3, [r3, #56]
 2954              		.loc 1 2027 40
 2955 006a 0022     		movs	r2, #0
 2956 006c 5A63     		str	r2, [r3, #52]
2028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2957              		.loc 1 2029 11
 2958 006e 7B68     		ldr	r3, [r7, #4]
 2959 0070 9B6B     		ldr	r3, [r3, #56]
 2960 0072 1846     		mov	r0, r3
 2961 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2962 0078 0346     		mov	r3, r0
 2963              		.loc 1 2029 10
 2964 007a 002B     		cmp	r3, #0
 2965 007c 0CD0     		beq	.L138
2030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 88


 2966              		.loc 1 2031 13
 2967 007e 7B68     		ldr	r3, [r7, #4]
 2968 0080 9B6B     		ldr	r3, [r3, #56]
 2969 0082 1846     		mov	r0, r3
 2970 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2971 0088 0346     		mov	r3, r0
 2972              		.loc 1 2031 12
 2973 008a 202B     		cmp	r3, #32
 2974 008c 04D1     		bne	.L138
2032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
2034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2975              		.loc 1 2034 28
 2976 008e 7B68     		ldr	r3, [r7, #4]
 2977 0090 1022     		movs	r2, #16
 2978 0092 1A64     		str	r2, [r3, #64]
2035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2979              		.loc 1 2036 18
 2980 0094 0323     		movs	r3, #3
 2981 0096 0AE0     		b	.L139
 2982              	.L138:
2037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2983              		.loc 1 2043 22
 2984 0098 7B68     		ldr	r3, [r7, #4]
 2985 009a 0022     		movs	r2, #0
 2986 009c DA85     		strh	r2, [r3, #46]	@ movhi
2044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2987              		.loc 1 2046 18
 2988 009e 7B68     		ldr	r3, [r7, #4]
 2989 00a0 2022     		movs	r2, #32
 2990 00a2 83F83E20 		strb	r2, [r3, #62]
2047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2991              		.loc 1 2047 24
 2992 00a6 7B68     		ldr	r3, [r7, #4]
 2993 00a8 0022     		movs	r2, #0
 2994 00aa 1A63     		str	r2, [r3, #48]
2048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2995              		.loc 1 2049 10
 2996 00ac 0023     		movs	r3, #0
 2997              	.L139:
2050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2998              		.loc 1 2050 1
 2999 00ae 1846     		mov	r0, r3
 3000 00b0 0837     		adds	r7, r7, #8
 3001              		.cfi_def_cfa_offset 8
 3002 00b2 BD46     		mov	sp, r7
 3003              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 89


 3004              		@ sp needed
 3005 00b4 80BD     		pop	{r7, pc}
 3006              		.cfi_endproc
 3007              	.LFE86:
 3009              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3010              		.align	1
 3011              		.global	HAL_UART_Abort_IT
 3012              		.syntax unified
 3013              		.thumb
 3014              		.thumb_func
 3015              		.fpu softvfp
 3017              	HAL_UART_Abort_IT:
 3018              	.LFB87:
2051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3019              		.loc 1 2067 1
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 16
 3022              		@ frame_needed = 1, uses_anonymous_args = 0
 3023 0000 80B5     		push	{r7, lr}
 3024              		.cfi_def_cfa_offset 8
 3025              		.cfi_offset 7, -8
 3026              		.cfi_offset 14, -4
 3027 0002 84B0     		sub	sp, sp, #16
 3028              		.cfi_def_cfa_offset 24
 3029 0004 00AF     		add	r7, sp, #0
 3030              		.cfi_def_cfa_register 7
 3031 0006 7860     		str	r0, [r7, #4]
2068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3032              		.loc 1 2068 12
 3033 0008 0123     		movs	r3, #1
 3034 000a FB60     		str	r3, [r7, #12]
2069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 3035              		.loc 1 2071 3
 3036 000c 7B68     		ldr	r3, [r7, #4]
 3037 000e 1B68     		ldr	r3, [r3]
 3038 0010 DA68     		ldr	r2, [r3, #12]
 3039 0012 7B68     		ldr	r3, [r7, #4]
 3040 0014 1B68     		ldr	r3, [r3]
 3041 0016 22F4F072 		bic	r2, r2, #480
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 90


 3042 001a DA60     		str	r2, [r3, #12]
2072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3043              		.loc 1 2072 3
 3044 001c 7B68     		ldr	r3, [r7, #4]
 3045 001e 1B68     		ldr	r3, [r3]
 3046 0020 5A69     		ldr	r2, [r3, #20]
 3047 0022 7B68     		ldr	r3, [r7, #4]
 3048 0024 1B68     		ldr	r3, [r3]
 3049 0026 22F00102 		bic	r2, r2, #1
 3050 002a 5A61     		str	r2, [r3, #20]
2073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3051              		.loc 1 2075 12
 3052 002c 7B68     		ldr	r3, [r7, #4]
 3053 002e 1B6B     		ldr	r3, [r3, #48]
 3054              		.loc 1 2075 6
 3055 0030 012B     		cmp	r3, #1
 3056 0032 07D1     		bne	.L141
2076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3057              		.loc 1 2077 5
 3058 0034 7B68     		ldr	r3, [r7, #4]
 3059 0036 1B68     		ldr	r3, [r3]
 3060 0038 DA68     		ldr	r2, [r3, #12]
 3061 003a 7B68     		ldr	r3, [r7, #4]
 3062 003c 1B68     		ldr	r3, [r3]
 3063 003e 22F01002 		bic	r2, r2, #16
 3064 0042 DA60     		str	r2, [r3, #12]
 3065              	.L141:
2078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
2082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 3066              		.loc 1 2083 12
 3067 0044 7B68     		ldr	r3, [r7, #4]
 3068 0046 5B6B     		ldr	r3, [r3, #52]
 3069              		.loc 1 2083 6
 3070 0048 002B     		cmp	r3, #0
 3071 004a 0FD0     		beq	.L142
2084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3072              		.loc 1 2087 9
 3073 004c 7B68     		ldr	r3, [r7, #4]
 3074 004e 1B68     		ldr	r3, [r3]
 3075 0050 5B69     		ldr	r3, [r3, #20]
 3076 0052 03F08003 		and	r3, r3, #128
 3077              		.loc 1 2087 8
 3078 0056 002B     		cmp	r3, #0
 3079 0058 04D0     		beq	.L143
2088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 3080              		.loc 1 2089 12
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 91


 3081 005a 7B68     		ldr	r3, [r7, #4]
 3082 005c 5B6B     		ldr	r3, [r3, #52]
 3083              		.loc 1 2089 40
 3084 005e 404A     		ldr	r2, .L152
 3085 0060 5A63     		str	r2, [r3, #52]
 3086 0062 03E0     		b	.L142
 3087              	.L143:
2090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3088              		.loc 1 2093 12
 3089 0064 7B68     		ldr	r3, [r7, #4]
 3090 0066 5B6B     		ldr	r3, [r3, #52]
 3091              		.loc 1 2093 40
 3092 0068 0022     		movs	r2, #0
 3093 006a 5A63     		str	r2, [r3, #52]
 3094              	.L142:
2094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 3095              		.loc 1 2097 12
 3096 006c 7B68     		ldr	r3, [r7, #4]
 3097 006e 9B6B     		ldr	r3, [r3, #56]
 3098              		.loc 1 2097 6
 3099 0070 002B     		cmp	r3, #0
 3100 0072 0FD0     		beq	.L144
2098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3101              		.loc 1 2101 9
 3102 0074 7B68     		ldr	r3, [r7, #4]
 3103 0076 1B68     		ldr	r3, [r3]
 3104 0078 5B69     		ldr	r3, [r3, #20]
 3105 007a 03F04003 		and	r3, r3, #64
 3106              		.loc 1 2101 8
 3107 007e 002B     		cmp	r3, #0
 3108 0080 04D0     		beq	.L145
2102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 3109              		.loc 1 2103 12
 3110 0082 7B68     		ldr	r3, [r7, #4]
 3111 0084 9B6B     		ldr	r3, [r3, #56]
 3112              		.loc 1 2103 40
 3113 0086 374A     		ldr	r2, .L152+4
 3114 0088 5A63     		str	r2, [r3, #52]
 3115 008a 03E0     		b	.L144
 3116              	.L145:
2104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3117              		.loc 1 2107 12
 3118 008c 7B68     		ldr	r3, [r7, #4]
 3119 008e 9B6B     		ldr	r3, [r3, #56]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 92


 3120              		.loc 1 2107 40
 3121 0090 0022     		movs	r2, #0
 3122 0092 5A63     		str	r2, [r3, #52]
 3123              	.L144:
2108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3124              		.loc 1 2112 7
 3125 0094 7B68     		ldr	r3, [r7, #4]
 3126 0096 1B68     		ldr	r3, [r3]
 3127 0098 5B69     		ldr	r3, [r3, #20]
 3128 009a 03F08003 		and	r3, r3, #128
 3129              		.loc 1 2112 6
 3130 009e 002B     		cmp	r3, #0
 3131 00a0 1AD0     		beq	.L146
2113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3132              		.loc 1 2115 5
 3133 00a2 7B68     		ldr	r3, [r7, #4]
 3134 00a4 1B68     		ldr	r3, [r3]
 3135 00a6 5A69     		ldr	r2, [r3, #20]
 3136 00a8 7B68     		ldr	r3, [r7, #4]
 3137 00aa 1B68     		ldr	r3, [r3]
 3138 00ac 22F08002 		bic	r2, r2, #128
 3139 00b0 5A61     		str	r2, [r3, #20]
2116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3140              		.loc 1 2118 14
 3141 00b2 7B68     		ldr	r3, [r7, #4]
 3142 00b4 5B6B     		ldr	r3, [r3, #52]
 3143              		.loc 1 2118 8
 3144 00b6 002B     		cmp	r3, #0
 3145 00b8 0ED0     		beq	.L146
2119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3146              		.loc 1 2124 11
 3147 00ba 7B68     		ldr	r3, [r7, #4]
 3148 00bc 5B6B     		ldr	r3, [r3, #52]
 3149 00be 1846     		mov	r0, r3
 3150 00c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3151 00c4 0346     		mov	r3, r0
 3152              		.loc 1 2124 10
 3153 00c6 002B     		cmp	r3, #0
 3154 00c8 04D0     		beq	.L147
2125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 3155              		.loc 1 2126 14
 3156 00ca 7B68     		ldr	r3, [r7, #4]
 3157 00cc 5B6B     		ldr	r3, [r3, #52]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 93


 3158              		.loc 1 2126 42
 3159 00ce 0022     		movs	r2, #0
 3160 00d0 5A63     		str	r2, [r3, #52]
 3161 00d2 01E0     		b	.L146
 3162              	.L147:
2127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3163              		.loc 1 2130 19
 3164 00d4 0023     		movs	r3, #0
 3165 00d6 FB60     		str	r3, [r7, #12]
 3166              	.L146:
2131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3167              		.loc 1 2136 7
 3168 00d8 7B68     		ldr	r3, [r7, #4]
 3169 00da 1B68     		ldr	r3, [r3]
 3170 00dc 5B69     		ldr	r3, [r3, #20]
 3171 00de 03F04003 		and	r3, r3, #64
 3172              		.loc 1 2136 6
 3173 00e2 002B     		cmp	r3, #0
 3174 00e4 1CD0     		beq	.L148
2137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3175              		.loc 1 2138 5
 3176 00e6 7B68     		ldr	r3, [r7, #4]
 3177 00e8 1B68     		ldr	r3, [r3]
 3178 00ea 5A69     		ldr	r2, [r3, #20]
 3179 00ec 7B68     		ldr	r3, [r7, #4]
 3180 00ee 1B68     		ldr	r3, [r3]
 3181 00f0 22F04002 		bic	r2, r2, #64
 3182 00f4 5A61     		str	r2, [r3, #20]
2139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3183              		.loc 1 2141 14
 3184 00f6 7B68     		ldr	r3, [r7, #4]
 3185 00f8 9B6B     		ldr	r3, [r3, #56]
 3186              		.loc 1 2141 8
 3187 00fa 002B     		cmp	r3, #0
 3188 00fc 10D0     		beq	.L148
2142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3189              		.loc 1 2147 11
 3190 00fe 7B68     		ldr	r3, [r7, #4]
 3191 0100 9B6B     		ldr	r3, [r3, #56]
 3192 0102 1846     		mov	r0, r3
 3193 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 94


 3194 0108 0346     		mov	r3, r0
 3195              		.loc 1 2147 10
 3196 010a 002B     		cmp	r3, #0
 3197 010c 06D0     		beq	.L149
2148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 3198              		.loc 1 2149 14
 3199 010e 7B68     		ldr	r3, [r7, #4]
 3200 0110 9B6B     		ldr	r3, [r3, #56]
 3201              		.loc 1 2149 42
 3202 0112 0022     		movs	r2, #0
 3203 0114 5A63     		str	r2, [r3, #52]
2150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 3204              		.loc 1 2150 19
 3205 0116 0123     		movs	r3, #1
 3206 0118 FB60     		str	r3, [r7, #12]
 3207 011a 01E0     		b	.L148
 3208              	.L149:
2151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3209              		.loc 1 2154 19
 3210 011c 0023     		movs	r3, #0
 3211 011e FB60     		str	r3, [r7, #12]
 3212              	.L148:
2155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 3213              		.loc 1 2160 6
 3214 0120 FB68     		ldr	r3, [r7, #12]
 3215 0122 012B     		cmp	r3, #1
 3216 0124 16D1     		bne	.L150
2161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3217              		.loc 1 2163 24
 3218 0126 7B68     		ldr	r3, [r7, #4]
 3219 0128 0022     		movs	r2, #0
 3220 012a DA84     		strh	r2, [r3, #38]	@ movhi
2164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3221              		.loc 1 2164 24
 3222 012c 7B68     		ldr	r3, [r7, #4]
 3223 012e 0022     		movs	r2, #0
 3224 0130 DA85     		strh	r2, [r3, #46]	@ movhi
2165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
2167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 3225              		.loc 1 2167 22
 3226 0132 7B68     		ldr	r3, [r7, #4]
 3227 0134 0022     		movs	r2, #0
 3228 0136 1A64     		str	r2, [r3, #64]
2168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 95


2170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 3229              		.loc 1 2170 20
 3230 0138 7B68     		ldr	r3, [r7, #4]
 3231 013a 2022     		movs	r2, #32
 3232 013c 83F83D20 		strb	r2, [r3, #61]
2171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3233              		.loc 1 2171 20
 3234 0140 7B68     		ldr	r3, [r7, #4]
 3235 0142 2022     		movs	r2, #32
 3236 0144 83F83E20 		strb	r2, [r3, #62]
2172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3237              		.loc 1 2172 26
 3238 0148 7B68     		ldr	r3, [r7, #4]
 3239 014a 0022     		movs	r2, #0
 3240 014c 1A63     		str	r2, [r3, #48]
2173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
2177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 3241              		.loc 1 2180 5
 3242 014e 7868     		ldr	r0, [r7, #4]
 3243 0150 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3244              	.L150:
2181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3245              		.loc 1 2184 10
 3246 0154 0023     		movs	r3, #0
2185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3247              		.loc 1 2185 1
 3248 0156 1846     		mov	r0, r3
 3249 0158 1037     		adds	r7, r7, #16
 3250              		.cfi_def_cfa_offset 8
 3251 015a BD46     		mov	sp, r7
 3252              		.cfi_def_cfa_register 13
 3253              		@ sp needed
 3254 015c 80BD     		pop	{r7, pc}
 3255              	.L153:
 3256 015e 00BF     		.align	2
 3257              	.L152:
 3258 0160 00000000 		.word	UART_DMATxAbortCallback
 3259 0164 00000000 		.word	UART_DMARxAbortCallback
 3260              		.cfi_endproc
 3261              	.LFE87:
 3263              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3264              		.align	1
 3265              		.global	HAL_UART_AbortTransmit_IT
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3269              		.fpu softvfp
 3271              	HAL_UART_AbortTransmit_IT:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 96


 3272              	.LFB88:
2186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
2202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3273              		.loc 1 2202 1
 3274              		.cfi_startproc
 3275              		@ args = 0, pretend = 0, frame = 8
 3276              		@ frame_needed = 1, uses_anonymous_args = 0
 3277 0000 80B5     		push	{r7, lr}
 3278              		.cfi_def_cfa_offset 8
 3279              		.cfi_offset 7, -8
 3280              		.cfi_offset 14, -4
 3281 0002 82B0     		sub	sp, sp, #8
 3282              		.cfi_def_cfa_offset 16
 3283 0004 00AF     		add	r7, sp, #0
 3284              		.cfi_def_cfa_register 7
 3285 0006 7860     		str	r0, [r7, #4]
2203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3286              		.loc 1 2204 3
 3287 0008 7B68     		ldr	r3, [r7, #4]
 3288 000a 1B68     		ldr	r3, [r3]
 3289 000c DA68     		ldr	r2, [r3, #12]
 3290 000e 7B68     		ldr	r3, [r7, #4]
 3291 0010 1B68     		ldr	r3, [r3]
 3292 0012 22F0C002 		bic	r2, r2, #192
 3293 0016 DA60     		str	r2, [r3, #12]
2205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3294              		.loc 1 2207 7
 3295 0018 7B68     		ldr	r3, [r7, #4]
 3296 001a 1B68     		ldr	r3, [r3]
 3297 001c 5B69     		ldr	r3, [r3, #20]
 3298 001e 03F08003 		and	r3, r3, #128
 3299              		.loc 1 2207 6
 3300 0022 002B     		cmp	r3, #0
 3301 0024 2AD0     		beq	.L155
2208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3302              		.loc 1 2209 5
 3303 0026 7B68     		ldr	r3, [r7, #4]
 3304 0028 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 97


 3305 002a 5A69     		ldr	r2, [r3, #20]
 3306 002c 7B68     		ldr	r3, [r7, #4]
 3307 002e 1B68     		ldr	r3, [r3]
 3308 0030 22F08002 		bic	r2, r2, #128
 3309 0034 5A61     		str	r2, [r3, #20]
2210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
2212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3310              		.loc 1 2212 14
 3311 0036 7B68     		ldr	r3, [r7, #4]
 3312 0038 5B6B     		ldr	r3, [r3, #52]
 3313              		.loc 1 2212 8
 3314 003a 002B     		cmp	r3, #0
 3315 003c 13D0     		beq	.L156
2213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 3316              		.loc 1 2216 12
 3317 003e 7B68     		ldr	r3, [r7, #4]
 3318 0040 5B6B     		ldr	r3, [r3, #52]
 3319              		.loc 1 2216 40
 3320 0042 164A     		ldr	r2, .L159
 3321 0044 5A63     		str	r2, [r3, #52]
2217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3322              		.loc 1 2219 11
 3323 0046 7B68     		ldr	r3, [r7, #4]
 3324 0048 5B6B     		ldr	r3, [r3, #52]
 3325 004a 1846     		mov	r0, r3
 3326 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3327 0050 0346     		mov	r3, r0
 3328              		.loc 1 2219 10
 3329 0052 002B     		cmp	r3, #0
 3330 0054 1CD0     		beq	.L157
2220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 3331              		.loc 1 2222 14
 3332 0056 7B68     		ldr	r3, [r7, #4]
 3333 0058 5B6B     		ldr	r3, [r3, #52]
 3334              		.loc 1 2222 22
 3335 005a 5B6B     		ldr	r3, [r3, #52]
 3336              		.loc 1 2222 47
 3337 005c 7A68     		ldr	r2, [r7, #4]
 3338 005e 526B     		ldr	r2, [r2, #52]
 3339              		.loc 1 2222 9
 3340 0060 1046     		mov	r0, r2
 3341 0062 9847     		blx	r3
 3342              	.LVL0:
 3343 0064 14E0     		b	.L157
 3344              	.L156:
2223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 98


2227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
2228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 3345              		.loc 1 2228 26
 3346 0066 7B68     		ldr	r3, [r7, #4]
 3347 0068 0022     		movs	r2, #0
 3348 006a DA84     		strh	r2, [r3, #38]	@ movhi
2229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 3349              		.loc 1 2231 21
 3350 006c 7B68     		ldr	r3, [r7, #4]
 3351 006e 2022     		movs	r2, #32
 3352 0070 83F83D20 		strb	r2, [r3, #61]
2232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 3353              		.loc 1 2239 7
 3354 0074 7868     		ldr	r0, [r7, #4]
 3355 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3356 007a 09E0     		b	.L157
 3357              	.L155:
2240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
2246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3358              		.loc 1 2246 24
 3359 007c 7B68     		ldr	r3, [r7, #4]
 3360 007e 0022     		movs	r2, #0
 3361 0080 DA84     		strh	r2, [r3, #38]	@ movhi
2247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 3362              		.loc 1 2249 19
 3363 0082 7B68     		ldr	r3, [r7, #4]
 3364 0084 2022     		movs	r2, #32
 3365 0086 83F83D20 		strb	r2, [r3, #61]
2250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 3366              		.loc 1 2257 5
 3367 008a 7868     		ldr	r0, [r7, #4]
 3368 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3369              	.L157:
2258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 99


2259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3370              		.loc 1 2261 10
 3371 0090 0023     		movs	r3, #0
2262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3372              		.loc 1 2262 1
 3373 0092 1846     		mov	r0, r3
 3374 0094 0837     		adds	r7, r7, #8
 3375              		.cfi_def_cfa_offset 8
 3376 0096 BD46     		mov	sp, r7
 3377              		.cfi_def_cfa_register 13
 3378              		@ sp needed
 3379 0098 80BD     		pop	{r7, pc}
 3380              	.L160:
 3381 009a 00BF     		.align	2
 3382              	.L159:
 3383 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 3384              		.cfi_endproc
 3385              	.LFE88:
 3387              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3388              		.align	1
 3389              		.global	HAL_UART_AbortReceive_IT
 3390              		.syntax unified
 3391              		.thumb
 3392              		.thumb_func
 3393              		.fpu softvfp
 3395              	HAL_UART_AbortReceive_IT:
 3396              	.LFB89:
2263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3397              		.loc 1 2279 1
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 8
 3400              		@ frame_needed = 1, uses_anonymous_args = 0
 3401 0000 80B5     		push	{r7, lr}
 3402              		.cfi_def_cfa_offset 8
 3403              		.cfi_offset 7, -8
 3404              		.cfi_offset 14, -4
 3405 0002 82B0     		sub	sp, sp, #8
 3406              		.cfi_def_cfa_offset 16
 3407 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 100


 3408              		.cfi_def_cfa_register 7
 3409 0006 7860     		str	r0, [r7, #4]
2280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3410              		.loc 1 2281 3
 3411 0008 7B68     		ldr	r3, [r7, #4]
 3412 000a 1B68     		ldr	r3, [r3]
 3413 000c DA68     		ldr	r2, [r3, #12]
 3414 000e 7B68     		ldr	r3, [r7, #4]
 3415 0010 1B68     		ldr	r3, [r3]
 3416 0012 22F49072 		bic	r2, r2, #288
 3417 0016 DA60     		str	r2, [r3, #12]
2282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3418              		.loc 1 2282 3
 3419 0018 7B68     		ldr	r3, [r7, #4]
 3420 001a 1B68     		ldr	r3, [r3]
 3421 001c 5A69     		ldr	r2, [r3, #20]
 3422 001e 7B68     		ldr	r3, [r7, #4]
 3423 0020 1B68     		ldr	r3, [r3]
 3424 0022 22F00102 		bic	r2, r2, #1
 3425 0026 5A61     		str	r2, [r3, #20]
2283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3426              		.loc 1 2285 12
 3427 0028 7B68     		ldr	r3, [r7, #4]
 3428 002a 1B6B     		ldr	r3, [r3, #48]
 3429              		.loc 1 2285 6
 3430 002c 012B     		cmp	r3, #1
 3431 002e 07D1     		bne	.L162
2286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3432              		.loc 1 2287 5
 3433 0030 7B68     		ldr	r3, [r7, #4]
 3434 0032 1B68     		ldr	r3, [r3]
 3435 0034 DA68     		ldr	r2, [r3, #12]
 3436 0036 7B68     		ldr	r3, [r7, #4]
 3437 0038 1B68     		ldr	r3, [r3]
 3438 003a 22F01002 		bic	r2, r2, #16
 3439 003e DA60     		str	r2, [r3, #12]
 3440              	.L162:
2288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3441              		.loc 1 2291 7
 3442 0040 7B68     		ldr	r3, [r7, #4]
 3443 0042 1B68     		ldr	r3, [r3]
 3444 0044 5B69     		ldr	r3, [r3, #20]
 3445 0046 03F04003 		and	r3, r3, #64
 3446              		.loc 1 2291 6
 3447 004a 002B     		cmp	r3, #0
 3448 004c 2DD0     		beq	.L163
2292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3449              		.loc 1 2293 5
 3450 004e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 101


 3451 0050 1B68     		ldr	r3, [r3]
 3452 0052 5A69     		ldr	r2, [r3, #20]
 3453 0054 7B68     		ldr	r3, [r7, #4]
 3454 0056 1B68     		ldr	r3, [r3]
 3455 0058 22F04002 		bic	r2, r2, #64
 3456 005c 5A61     		str	r2, [r3, #20]
2294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3457              		.loc 1 2296 14
 3458 005e 7B68     		ldr	r3, [r7, #4]
 3459 0060 9B6B     		ldr	r3, [r3, #56]
 3460              		.loc 1 2296 8
 3461 0062 002B     		cmp	r3, #0
 3462 0064 13D0     		beq	.L164
2297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 3463              		.loc 1 2300 12
 3464 0066 7B68     		ldr	r3, [r7, #4]
 3465 0068 9B6B     		ldr	r3, [r3, #56]
 3466              		.loc 1 2300 40
 3467 006a 194A     		ldr	r2, .L167
 3468 006c 5A63     		str	r2, [r3, #52]
2301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3469              		.loc 1 2303 11
 3470 006e 7B68     		ldr	r3, [r7, #4]
 3471 0070 9B6B     		ldr	r3, [r3, #56]
 3472 0072 1846     		mov	r0, r3
 3473 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3474 0078 0346     		mov	r3, r0
 3475              		.loc 1 2303 10
 3476 007a 002B     		cmp	r3, #0
 3477 007c 22D0     		beq	.L165
2304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3478              		.loc 1 2306 14
 3479 007e 7B68     		ldr	r3, [r7, #4]
 3480 0080 9B6B     		ldr	r3, [r3, #56]
 3481              		.loc 1 2306 22
 3482 0082 5B6B     		ldr	r3, [r3, #52]
 3483              		.loc 1 2306 47
 3484 0084 7A68     		ldr	r2, [r7, #4]
 3485 0086 926B     		ldr	r2, [r2, #56]
 3486              		.loc 1 2306 9
 3487 0088 1046     		mov	r0, r2
 3488 008a 9847     		blx	r3
 3489              	.LVL1:
 3490 008c 1AE0     		b	.L165
 3491              	.L164:
2307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 102


2310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
2312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 3492              		.loc 1 2312 26
 3493 008e 7B68     		ldr	r3, [r7, #4]
 3494 0090 0022     		movs	r2, #0
 3495 0092 DA85     		strh	r2, [r3, #46]	@ movhi
2313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 3496              		.loc 1 2315 22
 3497 0094 7B68     		ldr	r3, [r7, #4]
 3498 0096 2022     		movs	r2, #32
 3499 0098 83F83E20 		strb	r2, [r3, #62]
2316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3500              		.loc 1 2316 28
 3501 009c 7B68     		ldr	r3, [r7, #4]
 3502 009e 0022     		movs	r2, #0
 3503 00a0 1A63     		str	r2, [r3, #48]
2317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 3504              		.loc 1 2324 7
 3505 00a2 7868     		ldr	r0, [r7, #4]
 3506 00a4 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3507 00a8 0CE0     		b	.L165
 3508              	.L163:
2325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
2331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3509              		.loc 1 2331 24
 3510 00aa 7B68     		ldr	r3, [r7, #4]
 3511 00ac 0022     		movs	r2, #0
 3512 00ae DA85     		strh	r2, [r3, #46]	@ movhi
2332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3513              		.loc 1 2334 20
 3514 00b0 7B68     		ldr	r3, [r7, #4]
 3515 00b2 2022     		movs	r2, #32
 3516 00b4 83F83E20 		strb	r2, [r3, #62]
2335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3517              		.loc 1 2335 26
 3518 00b8 7B68     		ldr	r3, [r7, #4]
 3519 00ba 0022     		movs	r2, #0
 3520 00bc 1A63     		str	r2, [r3, #48]
2336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 103


2338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 3521              		.loc 1 2343 5
 3522 00be 7868     		ldr	r0, [r7, #4]
 3523 00c0 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3524              	.L165:
2344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3525              		.loc 1 2347 10
 3526 00c4 0023     		movs	r3, #0
2348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3527              		.loc 1 2348 1
 3528 00c6 1846     		mov	r0, r3
 3529 00c8 0837     		adds	r7, r7, #8
 3530              		.cfi_def_cfa_offset 8
 3531 00ca BD46     		mov	sp, r7
 3532              		.cfi_def_cfa_register 13
 3533              		@ sp needed
 3534 00cc 80BD     		pop	{r7, pc}
 3535              	.L168:
 3536 00ce 00BF     		.align	2
 3537              	.L167:
 3538 00d0 00000000 		.word	UART_DMARxOnlyAbortCallback
 3539              		.cfi_endproc
 3540              	.LFE89:
 3542              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 3543              		.align	1
 3544              		.global	HAL_UART_IRQHandler
 3545              		.syntax unified
 3546              		.thumb
 3547              		.thumb_func
 3548              		.fpu softvfp
 3550              	HAL_UART_IRQHandler:
 3551              	.LFB90:
2349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3552              		.loc 1 2357 1
 3553              		.cfi_startproc
 3554              		@ args = 0, pretend = 0, frame = 40
 3555              		@ frame_needed = 1, uses_anonymous_args = 0
 3556 0000 80B5     		push	{r7, lr}
 3557              		.cfi_def_cfa_offset 8
 3558              		.cfi_offset 7, -8
 3559              		.cfi_offset 14, -4
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 104


 3560 0002 8AB0     		sub	sp, sp, #40
 3561              		.cfi_def_cfa_offset 48
 3562 0004 00AF     		add	r7, sp, #0
 3563              		.cfi_def_cfa_register 7
 3564 0006 7860     		str	r0, [r7, #4]
2358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 3565              		.loc 1 2358 25
 3566 0008 7B68     		ldr	r3, [r7, #4]
 3567 000a 1B68     		ldr	r3, [r3]
 3568              		.loc 1 2358 12
 3569 000c 1B68     		ldr	r3, [r3]
 3570 000e 7B62     		str	r3, [r7, #36]
2359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3571              		.loc 1 2359 25
 3572 0010 7B68     		ldr	r3, [r7, #4]
 3573 0012 1B68     		ldr	r3, [r3]
 3574              		.loc 1 2359 12
 3575 0014 DB68     		ldr	r3, [r3, #12]
 3576 0016 3B62     		str	r3, [r7, #32]
2360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 3577              		.loc 1 2360 25
 3578 0018 7B68     		ldr	r3, [r7, #4]
 3579 001a 1B68     		ldr	r3, [r3]
 3580              		.loc 1 2360 12
 3581 001c 5B69     		ldr	r3, [r3, #20]
 3582 001e FB61     		str	r3, [r7, #28]
2361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 3583              		.loc 1 2361 12
 3584 0020 0023     		movs	r3, #0
 3585 0022 BB61     		str	r3, [r7, #24]
2362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 3586              		.loc 1 2362 12
 3587 0024 0023     		movs	r3, #0
 3588 0026 7B61     		str	r3, [r7, #20]
2363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 3589              		.loc 1 2365 14
 3590 0028 7B6A     		ldr	r3, [r7, #36]
 3591 002a 03F00F03 		and	r3, r3, #15
 3592 002e BB61     		str	r3, [r7, #24]
2366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
 3593              		.loc 1 2366 6
 3594 0030 BB69     		ldr	r3, [r7, #24]
 3595 0032 002B     		cmp	r3, #0
 3596 0034 0DD1     		bne	.L170
2367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3597              		.loc 1 2369 20
 3598 0036 7B6A     		ldr	r3, [r7, #36]
 3599 0038 03F02003 		and	r3, r3, #32
 3600              		.loc 1 2369 8
 3601 003c 002B     		cmp	r3, #0
 3602 003e 08D0     		beq	.L170
 3603              		.loc 1 2369 59 discriminator 1
 3604 0040 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 105


 3605 0042 03F02003 		and	r3, r3, #32
 3606              		.loc 1 2369 47 discriminator 1
 3607 0046 002B     		cmp	r3, #0
 3608 0048 03D0     		beq	.L170
2370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
 3609              		.loc 1 2371 7
 3610 004a 7868     		ldr	r0, [r7, #4]
 3611 004c FFF7FEFF 		bl	UART_Receive_IT
2372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3612              		.loc 1 2372 7
 3613 0050 7BE1     		b	.L169
 3614              	.L170:
2373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
 3615              		.loc 1 2377 6
 3616 0052 BB69     		ldr	r3, [r7, #24]
 3617 0054 002B     		cmp	r3, #0
 3618 0056 00F0B180 		beq	.L172
 3619              		.loc 1 2377 42 discriminator 1
 3620 005a FB69     		ldr	r3, [r7, #28]
 3621 005c 03F00103 		and	r3, r3, #1
 3622              		.loc 1 2377 29 discriminator 1
 3623 0060 002B     		cmp	r3, #0
 3624 0062 05D1     		bne	.L173
 3625              		.loc 1 2377 81 discriminator 2
 3626 0064 3B6A     		ldr	r3, [r7, #32]
 3627 0066 03F49073 		and	r3, r3, #288
 3628              		.loc 1 2377 69 discriminator 2
 3629 006a 002B     		cmp	r3, #0
 3630 006c 00F0A680 		beq	.L172
 3631              	.L173:
2378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3632              		.loc 1 2380 20
 3633 0070 7B6A     		ldr	r3, [r7, #36]
 3634 0072 03F00103 		and	r3, r3, #1
 3635              		.loc 1 2380 8
 3636 0076 002B     		cmp	r3, #0
 3637 0078 0AD0     		beq	.L174
 3638              		.loc 1 2380 57 discriminator 1
 3639 007a 3B6A     		ldr	r3, [r7, #32]
 3640 007c 03F48073 		and	r3, r3, #256
 3641              		.loc 1 2380 45 discriminator 1
 3642 0080 002B     		cmp	r3, #0
 3643 0082 05D0     		beq	.L174
2381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3644              		.loc 1 2382 24
 3645 0084 7B68     		ldr	r3, [r7, #4]
 3646 0086 1B6C     		ldr	r3, [r3, #64]
 3647 0088 43F00102 		orr	r2, r3, #1
 3648 008c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 106


 3649 008e 1A64     		str	r2, [r3, #64]
 3650              	.L174:
2383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3651              		.loc 1 2386 20
 3652 0090 7B6A     		ldr	r3, [r7, #36]
 3653 0092 03F00403 		and	r3, r3, #4
 3654              		.loc 1 2386 8
 3655 0096 002B     		cmp	r3, #0
 3656 0098 0AD0     		beq	.L175
 3657              		.loc 1 2386 57 discriminator 1
 3658 009a FB69     		ldr	r3, [r7, #28]
 3659 009c 03F00103 		and	r3, r3, #1
 3660              		.loc 1 2386 45 discriminator 1
 3661 00a0 002B     		cmp	r3, #0
 3662 00a2 05D0     		beq	.L175
2387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3663              		.loc 1 2388 24
 3664 00a4 7B68     		ldr	r3, [r7, #4]
 3665 00a6 1B6C     		ldr	r3, [r3, #64]
 3666 00a8 43F00202 		orr	r2, r3, #2
 3667 00ac 7B68     		ldr	r3, [r7, #4]
 3668 00ae 1A64     		str	r2, [r3, #64]
 3669              	.L175:
2389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3670              		.loc 1 2392 20
 3671 00b0 7B6A     		ldr	r3, [r7, #36]
 3672 00b2 03F00203 		and	r3, r3, #2
 3673              		.loc 1 2392 8
 3674 00b6 002B     		cmp	r3, #0
 3675 00b8 0AD0     		beq	.L176
 3676              		.loc 1 2392 57 discriminator 1
 3677 00ba FB69     		ldr	r3, [r7, #28]
 3678 00bc 03F00103 		and	r3, r3, #1
 3679              		.loc 1 2392 45 discriminator 1
 3680 00c0 002B     		cmp	r3, #0
 3681 00c2 05D0     		beq	.L176
2393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3682              		.loc 1 2394 24
 3683 00c4 7B68     		ldr	r3, [r7, #4]
 3684 00c6 1B6C     		ldr	r3, [r3, #64]
 3685 00c8 43F00402 		orr	r2, r3, #4
 3686 00cc 7B68     		ldr	r3, [r7, #4]
 3687 00ce 1A64     		str	r2, [r3, #64]
 3688              	.L176:
2395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its
 3689              		.loc 1 2398 20
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 107


 3690 00d0 7B6A     		ldr	r3, [r7, #36]
 3691 00d2 03F00803 		and	r3, r3, #8
 3692              		.loc 1 2398 8
 3693 00d6 002B     		cmp	r3, #0
 3694 00d8 0FD0     		beq	.L177
 3695              		.loc 1 2398 59 discriminator 1
 3696 00da 3B6A     		ldr	r3, [r7, #32]
 3697 00dc 03F02003 		and	r3, r3, #32
 3698              		.loc 1 2398 46 discriminator 1
 3699 00e0 002B     		cmp	r3, #0
 3700 00e2 04D1     		bne	.L178
 3701              		.loc 1 2398 101 discriminator 2
 3702 00e4 FB69     		ldr	r3, [r7, #28]
 3703 00e6 03F00103 		and	r3, r3, #1
 3704              		.loc 1 2398 89 discriminator 2
 3705 00ea 002B     		cmp	r3, #0
 3706 00ec 05D0     		beq	.L177
 3707              	.L178:
2399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3708              		.loc 1 2400 24
 3709 00ee 7B68     		ldr	r3, [r7, #4]
 3710 00f0 1B6C     		ldr	r3, [r3, #64]
 3711 00f2 43F00802 		orr	r2, r3, #8
 3712 00f6 7B68     		ldr	r3, [r7, #4]
 3713 00f8 1A64     		str	r2, [r3, #64]
 3714              	.L177:
2401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 3715              		.loc 1 2404 14
 3716 00fa 7B68     		ldr	r3, [r7, #4]
 3717 00fc 1B6C     		ldr	r3, [r3, #64]
 3718              		.loc 1 2404 8
 3719 00fe 002B     		cmp	r3, #0
 3720 0100 00F01E81 		beq	.L192
2405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3721              		.loc 1 2407 22
 3722 0104 7B6A     		ldr	r3, [r7, #36]
 3723 0106 03F02003 		and	r3, r3, #32
 3724              		.loc 1 2407 10
 3725 010a 002B     		cmp	r3, #0
 3726 010c 07D0     		beq	.L180
 3727              		.loc 1 2407 61 discriminator 1
 3728 010e 3B6A     		ldr	r3, [r7, #32]
 3729 0110 03F02003 		and	r3, r3, #32
 3730              		.loc 1 2407 49 discriminator 1
 3731 0114 002B     		cmp	r3, #0
 3732 0116 02D0     		beq	.L180
2408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 3733              		.loc 1 2409 9
 3734 0118 7868     		ldr	r0, [r7, #4]
 3735 011a FFF7FEFF 		bl	UART_Receive_IT
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 108


 3736              	.L180:
2410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 3737              		.loc 1 2414 20
 3738 011e 7B68     		ldr	r3, [r7, #4]
 3739 0120 1B68     		ldr	r3, [r3]
 3740 0122 5B69     		ldr	r3, [r3, #20]
 3741 0124 03F04003 		and	r3, r3, #64
 3742 0128 002B     		cmp	r3, #0
 3743 012a 14BF     		ite	ne
 3744 012c 0123     		movne	r3, #1
 3745 012e 0023     		moveq	r3, #0
 3746 0130 DBB2     		uxtb	r3, r3
 3747              		.loc 1 2414 18
 3748 0132 7B61     		str	r3, [r7, #20]
2415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3749              		.loc 1 2415 18
 3750 0134 7B68     		ldr	r3, [r7, #4]
 3751 0136 1B6C     		ldr	r3, [r3, #64]
 3752              		.loc 1 2415 30
 3753 0138 03F00803 		and	r3, r3, #8
 3754              		.loc 1 2415 10
 3755 013c 002B     		cmp	r3, #0
 3756 013e 02D1     		bne	.L181
 3757              		.loc 1 2415 62 discriminator 1
 3758 0140 7B69     		ldr	r3, [r7, #20]
 3759 0142 002B     		cmp	r3, #0
 3760 0144 31D0     		beq	.L182
 3761              	.L181:
2416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3762              		.loc 1 2420 9
 3763 0146 7868     		ldr	r0, [r7, #4]
 3764 0148 FFF7FEFF 		bl	UART_EndRxTransfer
2421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3765              		.loc 1 2423 13
 3766 014c 7B68     		ldr	r3, [r7, #4]
 3767 014e 1B68     		ldr	r3, [r3]
 3768 0150 5B69     		ldr	r3, [r3, #20]
 3769 0152 03F04003 		and	r3, r3, #64
 3770              		.loc 1 2423 12
 3771 0156 002B     		cmp	r3, #0
 3772 0158 23D0     		beq	.L183
2424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3773              		.loc 1 2425 11
 3774 015a 7B68     		ldr	r3, [r7, #4]
 3775 015c 1B68     		ldr	r3, [r3]
 3776 015e 5A69     		ldr	r2, [r3, #20]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 109


 3777 0160 7B68     		ldr	r3, [r7, #4]
 3778 0162 1B68     		ldr	r3, [r3]
 3779 0164 22F04002 		bic	r2, r2, #64
 3780 0168 5A61     		str	r2, [r3, #20]
2426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 3781              		.loc 1 2428 20
 3782 016a 7B68     		ldr	r3, [r7, #4]
 3783 016c 9B6B     		ldr	r3, [r3, #56]
 3784              		.loc 1 2428 14
 3785 016e 002B     		cmp	r3, #0
 3786 0170 13D0     		beq	.L184
2429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3787              		.loc 1 2432 18
 3788 0172 7B68     		ldr	r3, [r7, #4]
 3789 0174 9B6B     		ldr	r3, [r3, #56]
 3790              		.loc 1 2432 46
 3791 0176 764A     		ldr	r2, .L196
 3792 0178 5A63     		str	r2, [r3, #52]
2433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3793              		.loc 1 2433 17
 3794 017a 7B68     		ldr	r3, [r7, #4]
 3795 017c 9B6B     		ldr	r3, [r3, #56]
 3796 017e 1846     		mov	r0, r3
 3797 0180 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3798 0184 0346     		mov	r3, r0
 3799              		.loc 1 2433 16
 3800 0186 002B     		cmp	r3, #0
 3801 0188 16D0     		beq	.L193
2434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3802              		.loc 1 2436 20
 3803 018a 7B68     		ldr	r3, [r7, #4]
 3804 018c 9B6B     		ldr	r3, [r3, #56]
 3805              		.loc 1 2436 28
 3806 018e 5B6B     		ldr	r3, [r3, #52]
 3807              		.loc 1 2436 53
 3808 0190 7A68     		ldr	r2, [r7, #4]
 3809 0192 926B     		ldr	r2, [r2, #56]
 3810              		.loc 1 2436 15
 3811 0194 1046     		mov	r0, r2
 3812 0196 9847     		blx	r3
 3813              	.LVL2:
2423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3814              		.loc 1 2423 12
 3815 0198 0EE0     		b	.L193
 3816              	.L184:
2437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 110


2442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3817              		.loc 1 2447 13
 3818 019a 7868     		ldr	r0, [r7, #4]
 3819 019c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3820              		.loc 1 2423 12
 3821 01a0 0AE0     		b	.L193
 3822              	.L183:
2448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3823              		.loc 1 2459 11
 3824 01a2 7868     		ldr	r0, [r7, #4]
 3825 01a4 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3826              		.loc 1 2423 12
 3827 01a8 06E0     		b	.L193
 3828              	.L182:
2460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3829              		.loc 1 2472 9
 3830 01aa 7868     		ldr	r0, [r7, #4]
 3831 01ac FFF7FEFF 		bl	HAL_UART_ErrorCallback
2473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3832              		.loc 1 2475 26
 3833 01b0 7B68     		ldr	r3, [r7, #4]
 3834 01b2 0022     		movs	r2, #0
 3835 01b4 1A64     		str	r2, [r3, #64]
2476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 111


2478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3836              		.loc 1 2478 5
 3837 01b6 C3E0     		b	.L192
 3838              	.L193:
2423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3839              		.loc 1 2423 12
 3840 01b8 00BF     		nop
 3841              		.loc 1 2478 5
 3842 01ba C1E0     		b	.L192
 3843              	.L172:
2479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
2482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3844              		.loc 1 2483 15
 3845 01bc 7B68     		ldr	r3, [r7, #4]
 3846 01be 1B6B     		ldr	r3, [r3, #48]
 3847              		.loc 1 2483 6
 3848 01c0 012B     		cmp	r3, #1
 3849 01c2 40F0A180 		bne	.L186
2484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((isrflags & USART_SR_IDLE) != 0U)
 3850              		.loc 1 2484 20
 3851 01c6 7B6A     		ldr	r3, [r7, #36]
 3852 01c8 03F01003 		and	r3, r3, #16
 3853              		.loc 1 2484 7
 3854 01cc 002B     		cmp	r3, #0
 3855 01ce 00F09B80 		beq	.L186
2485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((cr1its & USART_SR_IDLE) != 0U))
 3856              		.loc 1 2485 18
 3857 01d2 3B6A     		ldr	r3, [r7, #32]
 3858 01d4 03F01003 		and	r3, r3, #16
 3859              		.loc 1 2485 7
 3860 01d8 002B     		cmp	r3, #0
 3861 01da 00F09580 		beq	.L186
 3862              	.LBB6:
2486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 3863              		.loc 1 2487 5
 3864 01de 0023     		movs	r3, #0
 3865 01e0 FB60     		str	r3, [r7, #12]
 3866 01e2 7B68     		ldr	r3, [r7, #4]
 3867 01e4 1B68     		ldr	r3, [r3]
 3868 01e6 1B68     		ldr	r3, [r3]
 3869 01e8 FB60     		str	r3, [r7, #12]
 3870 01ea 7B68     		ldr	r3, [r7, #4]
 3871 01ec 1B68     		ldr	r3, [r3]
 3872 01ee 5B68     		ldr	r3, [r3, #4]
 3873 01f0 FB60     		str	r3, [r7, #12]
 3874 01f2 FB68     		ldr	r3, [r7, #12]
 3875              	.LBE6:
2488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3876              		.loc 1 2490 9
 3877 01f4 7B68     		ldr	r3, [r7, #4]
 3878 01f6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 112


 3879 01f8 5B69     		ldr	r3, [r3, #20]
 3880 01fa 03F04003 		and	r3, r3, #64
 3881              		.loc 1 2490 8
 3882 01fe 002B     		cmp	r3, #0
 3883 0200 4ED0     		beq	.L187
 3884              	.LBB7:
2491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode enabled */
2493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (DMA cplt callback will be called).
2495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 3885              		.loc 1 2496 50
 3886 0202 7B68     		ldr	r3, [r7, #4]
 3887 0204 9B6B     		ldr	r3, [r3, #56]
 3888 0206 1B68     		ldr	r3, [r3]
 3889 0208 5B68     		ldr	r3, [r3, #4]
 3890              		.loc 1 2496 16
 3891 020a 3B82     		strh	r3, [r7, #16]	@ movhi
2497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (nb_remaining_rx_data > 0U)
 3892              		.loc 1 2497 10
 3893 020c 3B8A     		ldrh	r3, [r7, #16]
 3894 020e 002B     		cmp	r3, #0
 3895 0210 00F09880 		beq	.L194
2498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_remaining_rx_data < huart->RxXferSize))
 3896              		.loc 1 2498 42
 3897 0214 7B68     		ldr	r3, [r7, #4]
 3898 0216 9B8D     		ldrh	r3, [r3, #44]
 3899              		.loc 1 2498 11
 3900 0218 3A8A     		ldrh	r2, [r7, #16]
 3901 021a 9A42     		cmp	r2, r3
 3902 021c 80F09280 		bcs	.L194
2499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Reception is not complete */
2501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 3903              		.loc 1 2501 28
 3904 0220 7B68     		ldr	r3, [r7, #4]
 3905 0222 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 3906 0224 DA85     		strh	r2, [r3, #46]	@ movhi
2502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 3907              		.loc 1 2504 18
 3908 0226 7B68     		ldr	r3, [r7, #4]
 3909 0228 9B6B     		ldr	r3, [r3, #56]
 3910              		.loc 1 2504 32
 3911 022a 9B69     		ldr	r3, [r3, #24]
 3912              		.loc 1 2504 12
 3913 022c 202B     		cmp	r3, #32
 3914 022e 2BD0     		beq	.L189
2505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 3915              		.loc 1 2507 11
 3916 0230 7B68     		ldr	r3, [r7, #4]
 3917 0232 1B68     		ldr	r3, [r3]
 3918 0234 DA68     		ldr	r2, [r3, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 113


 3919 0236 7B68     		ldr	r3, [r7, #4]
 3920 0238 1B68     		ldr	r3, [r3]
 3921 023a 22F48072 		bic	r2, r2, #256
 3922 023e DA60     		str	r2, [r3, #12]
2508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3923              		.loc 1 2508 11
 3924 0240 7B68     		ldr	r3, [r7, #4]
 3925 0242 1B68     		ldr	r3, [r3]
 3926 0244 5A69     		ldr	r2, [r3, #20]
 3927 0246 7B68     		ldr	r3, [r7, #4]
 3928 0248 1B68     		ldr	r3, [r3]
 3929 024a 22F00102 		bic	r2, r2, #1
 3930 024e 5A61     		str	r2, [r3, #20]
2509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the UART CR3 register */
2512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3931              		.loc 1 2512 11
 3932 0250 7B68     		ldr	r3, [r7, #4]
 3933 0252 1B68     		ldr	r3, [r3]
 3934 0254 5A69     		ldr	r2, [r3, #20]
 3935 0256 7B68     		ldr	r3, [r7, #4]
 3936 0258 1B68     		ldr	r3, [r3]
 3937 025a 22F04002 		bic	r2, r2, #64
 3938 025e 5A61     		str	r2, [r3, #20]
2513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3939              		.loc 1 2515 26
 3940 0260 7B68     		ldr	r3, [r7, #4]
 3941 0262 2022     		movs	r2, #32
 3942 0264 83F83E20 		strb	r2, [r3, #62]
2516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3943              		.loc 1 2516 32
 3944 0268 7B68     		ldr	r3, [r7, #4]
 3945 026a 0022     		movs	r2, #0
 3946 026c 1A63     		str	r2, [r3, #48]
2517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3947              		.loc 1 2518 11
 3948 026e 7B68     		ldr	r3, [r7, #4]
 3949 0270 1B68     		ldr	r3, [r3]
 3950 0272 DA68     		ldr	r2, [r3, #12]
 3951 0274 7B68     		ldr	r3, [r7, #4]
 3952 0276 1B68     		ldr	r3, [r3]
 3953 0278 22F01002 		bic	r2, r2, #16
 3954 027c DA60     		str	r2, [r3, #12]
2519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 3955              		.loc 1 2521 17
 3956 027e 7B68     		ldr	r3, [r7, #4]
 3957 0280 9B6B     		ldr	r3, [r3, #56]
 3958 0282 1846     		mov	r0, r3
 3959 0284 FFF7FEFF 		bl	HAL_DMA_Abort
 3960              	.L189:
2522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 114


2523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 3961              		.loc 1 2528 49
 3962 0288 7B68     		ldr	r3, [r7, #4]
 3963 028a 9A8D     		ldrh	r2, [r3, #44]
 3964              		.loc 1 2528 69
 3965 028c 7B68     		ldr	r3, [r7, #4]
 3966 028e DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3967 0290 9BB2     		uxth	r3, r3
 3968              		.loc 1 2528 9
 3969 0292 D31A     		subs	r3, r2, r3
 3970 0294 9BB2     		uxth	r3, r3
 3971 0296 1946     		mov	r1, r3
 3972 0298 7868     		ldr	r0, [r7, #4]
 3973 029a FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
2530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3974              		.loc 1 2531 7
 3975 029e 51E0     		b	.L194
 3976              	.L187:
 3977              	.LBE7:
 3978              	.LBB8:
2532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode not enabled */
2536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 3979              		.loc 1 2538 34
 3980 02a0 7B68     		ldr	r3, [r7, #4]
 3981 02a2 9A8D     		ldrh	r2, [r3, #44]
 3982              		.loc 1 2538 54
 3983 02a4 7B68     		ldr	r3, [r7, #4]
 3984 02a6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3985 02a8 9BB2     		uxth	r3, r3
 3986              		.loc 1 2538 16
 3987 02aa D31A     		subs	r3, r2, r3
 3988 02ac 7B82     		strh	r3, [r7, #18]	@ movhi
2539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (huart->RxXferCount > 0U)
 3989              		.loc 1 2539 19
 3990 02ae 7B68     		ldr	r3, [r7, #4]
 3991 02b0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3992 02b2 9BB2     		uxth	r3, r3
 3993              		.loc 1 2539 10
 3994 02b4 002B     		cmp	r3, #0
 3995 02b6 47D0     		beq	.L195
2540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_rx_data > 0U) )
 3996              		.loc 1 2540 11
 3997 02b8 7B8A     		ldrh	r3, [r7, #18]
 3998 02ba 002B     		cmp	r3, #0
 3999 02bc 44D0     		beq	.L195
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 115


2541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4000              		.loc 1 2543 9
 4001 02be 7B68     		ldr	r3, [r7, #4]
 4002 02c0 1B68     		ldr	r3, [r3]
 4003 02c2 DA68     		ldr	r2, [r3, #12]
 4004 02c4 7B68     		ldr	r3, [r7, #4]
 4005 02c6 1B68     		ldr	r3, [r3]
 4006 02c8 22F49072 		bic	r2, r2, #288
 4007 02cc DA60     		str	r2, [r3, #12]
2544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4008              		.loc 1 2546 9
 4009 02ce 7B68     		ldr	r3, [r7, #4]
 4010 02d0 1B68     		ldr	r3, [r3]
 4011 02d2 5A69     		ldr	r2, [r3, #20]
 4012 02d4 7B68     		ldr	r3, [r7, #4]
 4013 02d6 1B68     		ldr	r3, [r3]
 4014 02d8 22F00102 		bic	r2, r2, #1
 4015 02dc 5A61     		str	r2, [r3, #20]
2547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4016              		.loc 1 2549 24
 4017 02de 7B68     		ldr	r3, [r7, #4]
 4018 02e0 2022     		movs	r2, #32
 4019 02e2 83F83E20 		strb	r2, [r3, #62]
2550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4020              		.loc 1 2550 30
 4021 02e6 7B68     		ldr	r3, [r7, #4]
 4022 02e8 0022     		movs	r2, #0
 4023 02ea 1A63     		str	r2, [r3, #48]
2551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 4024              		.loc 1 2552 9
 4025 02ec 7B68     		ldr	r3, [r7, #4]
 4026 02ee 1B68     		ldr	r3, [r3]
 4027 02f0 DA68     		ldr	r2, [r3, #12]
 4028 02f2 7B68     		ldr	r3, [r7, #4]
 4029 02f4 1B68     		ldr	r3, [r3]
 4030 02f6 22F01002 		bic	r2, r2, #16
 4031 02fa DA60     		str	r2, [r3, #12]
2553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 4032              		.loc 1 2558 9
 4033 02fc 7B8A     		ldrh	r3, [r7, #18]
 4034 02fe 1946     		mov	r1, r3
 4035 0300 7868     		ldr	r0, [r7, #4]
 4036 0302 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
2560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 116


2561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 4037              		.loc 1 2561 7
 4038 0306 1FE0     		b	.L195
 4039              	.L186:
 4040              	.LBE8:
2562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 4041              		.loc 1 2566 18
 4042 0308 7B6A     		ldr	r3, [r7, #36]
 4043 030a 03F08003 		and	r3, r3, #128
 4044              		.loc 1 2566 6
 4045 030e 002B     		cmp	r3, #0
 4046 0310 08D0     		beq	.L191
 4047              		.loc 1 2566 56 discriminator 1
 4048 0312 3B6A     		ldr	r3, [r7, #32]
 4049 0314 03F08003 		and	r3, r3, #128
 4050              		.loc 1 2566 44 discriminator 1
 4051 0318 002B     		cmp	r3, #0
 4052 031a 03D0     		beq	.L191
2567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 4053              		.loc 1 2568 5
 4054 031c 7868     		ldr	r0, [r7, #4]
 4055 031e FFF7FEFF 		bl	UART_Transmit_IT
2569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4056              		.loc 1 2569 5
 4057 0322 12E0     		b	.L169
 4058              	.L191:
2570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 4059              		.loc 1 2573 18
 4060 0324 7B6A     		ldr	r3, [r7, #36]
 4061 0326 03F04003 		and	r3, r3, #64
 4062              		.loc 1 2573 6
 4063 032a 002B     		cmp	r3, #0
 4064 032c 0DD0     		beq	.L169
 4065              		.loc 1 2573 55 discriminator 1
 4066 032e 3B6A     		ldr	r3, [r7, #32]
 4067 0330 03F04003 		and	r3, r3, #64
 4068              		.loc 1 2573 43 discriminator 1
 4069 0334 002B     		cmp	r3, #0
 4070 0336 08D0     		beq	.L169
2574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 4071              		.loc 1 2575 5
 4072 0338 7868     		ldr	r0, [r7, #4]
 4073 033a FFF7FEFF 		bl	UART_EndTransmit_IT
2576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4074              		.loc 1 2576 5
 4075 033e 04E0     		b	.L169
 4076              	.L192:
2478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 117


 4077              		.loc 1 2478 5
 4078 0340 00BF     		nop
 4079 0342 02E0     		b	.L169
 4080              	.L194:
 4081              	.LBB9:
2531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4082              		.loc 1 2531 7
 4083 0344 00BF     		nop
 4084 0346 00E0     		b	.L169
 4085              	.L195:
 4086              	.LBE9:
 4087              	.LBB10:
2561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4088              		.loc 1 2561 7
 4089 0348 00BF     		nop
 4090              	.L169:
 4091              	.LBE10:
2577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4092              		.loc 1 2578 1
 4093 034a 2837     		adds	r7, r7, #40
 4094              		.cfi_def_cfa_offset 8
 4095 034c BD46     		mov	sp, r7
 4096              		.cfi_def_cfa_register 13
 4097              		@ sp needed
 4098 034e 80BD     		pop	{r7, pc}
 4099              	.L197:
 4100              		.align	2
 4101              	.L196:
 4102 0350 00000000 		.word	UART_DMAAbortOnError
 4103              		.cfi_endproc
 4104              	.LFE90:
 4106              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 4107              		.align	1
 4108              		.weak	HAL_UART_TxCpltCallback
 4109              		.syntax unified
 4110              		.thumb
 4111              		.thumb_func
 4112              		.fpu softvfp
 4114              	HAL_UART_TxCpltCallback:
 4115              	.LFB91:
2579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4116              		.loc 1 2587 1
 4117              		.cfi_startproc
 4118              		@ args = 0, pretend = 0, frame = 8
 4119              		@ frame_needed = 1, uses_anonymous_args = 0
 4120              		@ link register save eliminated.
 4121 0000 80B4     		push	{r7}
 4122              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 118


 4123              		.cfi_offset 7, -4
 4124 0002 83B0     		sub	sp, sp, #12
 4125              		.cfi_def_cfa_offset 16
 4126 0004 00AF     		add	r7, sp, #0
 4127              		.cfi_def_cfa_register 7
 4128 0006 7860     		str	r0, [r7, #4]
2588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4129              		.loc 1 2593 1
 4130 0008 00BF     		nop
 4131 000a 0C37     		adds	r7, r7, #12
 4132              		.cfi_def_cfa_offset 4
 4133 000c BD46     		mov	sp, r7
 4134              		.cfi_def_cfa_register 13
 4135              		@ sp needed
 4136 000e 80BC     		pop	{r7}
 4137              		.cfi_restore 7
 4138              		.cfi_def_cfa_offset 0
 4139 0010 7047     		bx	lr
 4140              		.cfi_endproc
 4141              	.LFE91:
 4143              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 4144              		.align	1
 4145              		.weak	HAL_UART_TxHalfCpltCallback
 4146              		.syntax unified
 4147              		.thumb
 4148              		.thumb_func
 4149              		.fpu softvfp
 4151              	HAL_UART_TxHalfCpltCallback:
 4152              	.LFB92:
2594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4153              		.loc 1 2602 1
 4154              		.cfi_startproc
 4155              		@ args = 0, pretend = 0, frame = 8
 4156              		@ frame_needed = 1, uses_anonymous_args = 0
 4157              		@ link register save eliminated.
 4158 0000 80B4     		push	{r7}
 4159              		.cfi_def_cfa_offset 4
 4160              		.cfi_offset 7, -4
 4161 0002 83B0     		sub	sp, sp, #12
 4162              		.cfi_def_cfa_offset 16
 4163 0004 00AF     		add	r7, sp, #0
 4164              		.cfi_def_cfa_register 7
 4165 0006 7860     		str	r0, [r7, #4]
2603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 119


2604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4166              		.loc 1 2608 1
 4167 0008 00BF     		nop
 4168 000a 0C37     		adds	r7, r7, #12
 4169              		.cfi_def_cfa_offset 4
 4170 000c BD46     		mov	sp, r7
 4171              		.cfi_def_cfa_register 13
 4172              		@ sp needed
 4173 000e 80BC     		pop	{r7}
 4174              		.cfi_restore 7
 4175              		.cfi_def_cfa_offset 0
 4176 0010 7047     		bx	lr
 4177              		.cfi_endproc
 4178              	.LFE92:
 4180              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 4181              		.align	1
 4182              		.weak	HAL_UART_RxCpltCallback
 4183              		.syntax unified
 4184              		.thumb
 4185              		.thumb_func
 4186              		.fpu softvfp
 4188              	HAL_UART_RxCpltCallback:
 4189              	.LFB93:
2609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4190              		.loc 1 2617 1
 4191              		.cfi_startproc
 4192              		@ args = 0, pretend = 0, frame = 8
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194              		@ link register save eliminated.
 4195 0000 80B4     		push	{r7}
 4196              		.cfi_def_cfa_offset 4
 4197              		.cfi_offset 7, -4
 4198 0002 83B0     		sub	sp, sp, #12
 4199              		.cfi_def_cfa_offset 16
 4200 0004 00AF     		add	r7, sp, #0
 4201              		.cfi_def_cfa_register 7
 4202 0006 7860     		str	r0, [r7, #4]
2618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4203              		.loc 1 2623 1
 4204 0008 00BF     		nop
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 120


 4205 000a 0C37     		adds	r7, r7, #12
 4206              		.cfi_def_cfa_offset 4
 4207 000c BD46     		mov	sp, r7
 4208              		.cfi_def_cfa_register 13
 4209              		@ sp needed
 4210 000e 80BC     		pop	{r7}
 4211              		.cfi_restore 7
 4212              		.cfi_def_cfa_offset 0
 4213 0010 7047     		bx	lr
 4214              		.cfi_endproc
 4215              	.LFE93:
 4217              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 4218              		.align	1
 4219              		.weak	HAL_UART_RxHalfCpltCallback
 4220              		.syntax unified
 4221              		.thumb
 4222              		.thumb_func
 4223              		.fpu softvfp
 4225              	HAL_UART_RxHalfCpltCallback:
 4226              	.LFB94:
2624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4227              		.loc 1 2632 1
 4228              		.cfi_startproc
 4229              		@ args = 0, pretend = 0, frame = 8
 4230              		@ frame_needed = 1, uses_anonymous_args = 0
 4231              		@ link register save eliminated.
 4232 0000 80B4     		push	{r7}
 4233              		.cfi_def_cfa_offset 4
 4234              		.cfi_offset 7, -4
 4235 0002 83B0     		sub	sp, sp, #12
 4236              		.cfi_def_cfa_offset 16
 4237 0004 00AF     		add	r7, sp, #0
 4238              		.cfi_def_cfa_register 7
 4239 0006 7860     		str	r0, [r7, #4]
2633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4240              		.loc 1 2638 1
 4241 0008 00BF     		nop
 4242 000a 0C37     		adds	r7, r7, #12
 4243              		.cfi_def_cfa_offset 4
 4244 000c BD46     		mov	sp, r7
 4245              		.cfi_def_cfa_register 13
 4246              		@ sp needed
 4247 000e 80BC     		pop	{r7}
 4248              		.cfi_restore 7
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 121


 4249              		.cfi_def_cfa_offset 0
 4250 0010 7047     		bx	lr
 4251              		.cfi_endproc
 4252              	.LFE94:
 4254              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 4255              		.align	1
 4256              		.weak	HAL_UART_ErrorCallback
 4257              		.syntax unified
 4258              		.thumb
 4259              		.thumb_func
 4260              		.fpu softvfp
 4262              	HAL_UART_ErrorCallback:
 4263              	.LFB95:
2639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4264              		.loc 1 2647 1
 4265              		.cfi_startproc
 4266              		@ args = 0, pretend = 0, frame = 8
 4267              		@ frame_needed = 1, uses_anonymous_args = 0
 4268              		@ link register save eliminated.
 4269 0000 80B4     		push	{r7}
 4270              		.cfi_def_cfa_offset 4
 4271              		.cfi_offset 7, -4
 4272 0002 83B0     		sub	sp, sp, #12
 4273              		.cfi_def_cfa_offset 16
 4274 0004 00AF     		add	r7, sp, #0
 4275              		.cfi_def_cfa_register 7
 4276 0006 7860     		str	r0, [r7, #4]
2648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4277              		.loc 1 2653 1
 4278 0008 00BF     		nop
 4279 000a 0C37     		adds	r7, r7, #12
 4280              		.cfi_def_cfa_offset 4
 4281 000c BD46     		mov	sp, r7
 4282              		.cfi_def_cfa_register 13
 4283              		@ sp needed
 4284 000e 80BC     		pop	{r7}
 4285              		.cfi_restore 7
 4286              		.cfi_def_cfa_offset 0
 4287 0010 7047     		bx	lr
 4288              		.cfi_endproc
 4289              	.LFE95:
 4291              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 4292              		.align	1
 4293              		.weak	HAL_UART_AbortCpltCallback
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 122


 4294              		.syntax unified
 4295              		.thumb
 4296              		.thumb_func
 4297              		.fpu softvfp
 4299              	HAL_UART_AbortCpltCallback:
 4300              	.LFB96:
2654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4301              		.loc 1 2661 1
 4302              		.cfi_startproc
 4303              		@ args = 0, pretend = 0, frame = 8
 4304              		@ frame_needed = 1, uses_anonymous_args = 0
 4305              		@ link register save eliminated.
 4306 0000 80B4     		push	{r7}
 4307              		.cfi_def_cfa_offset 4
 4308              		.cfi_offset 7, -4
 4309 0002 83B0     		sub	sp, sp, #12
 4310              		.cfi_def_cfa_offset 16
 4311 0004 00AF     		add	r7, sp, #0
 4312              		.cfi_def_cfa_register 7
 4313 0006 7860     		str	r0, [r7, #4]
2662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4314              		.loc 1 2668 1
 4315 0008 00BF     		nop
 4316 000a 0C37     		adds	r7, r7, #12
 4317              		.cfi_def_cfa_offset 4
 4318 000c BD46     		mov	sp, r7
 4319              		.cfi_def_cfa_register 13
 4320              		@ sp needed
 4321 000e 80BC     		pop	{r7}
 4322              		.cfi_restore 7
 4323              		.cfi_def_cfa_offset 0
 4324 0010 7047     		bx	lr
 4325              		.cfi_endproc
 4326              	.LFE96:
 4328              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 4329              		.align	1
 4330              		.weak	HAL_UART_AbortTransmitCpltCallback
 4331              		.syntax unified
 4332              		.thumb
 4333              		.thumb_func
 4334              		.fpu softvfp
 4336              	HAL_UART_AbortTransmitCpltCallback:
 4337              	.LFB97:
2669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 123


2670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4338              		.loc 1 2676 1
 4339              		.cfi_startproc
 4340              		@ args = 0, pretend = 0, frame = 8
 4341              		@ frame_needed = 1, uses_anonymous_args = 0
 4342              		@ link register save eliminated.
 4343 0000 80B4     		push	{r7}
 4344              		.cfi_def_cfa_offset 4
 4345              		.cfi_offset 7, -4
 4346 0002 83B0     		sub	sp, sp, #12
 4347              		.cfi_def_cfa_offset 16
 4348 0004 00AF     		add	r7, sp, #0
 4349              		.cfi_def_cfa_register 7
 4350 0006 7860     		str	r0, [r7, #4]
2677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4351              		.loc 1 2683 1
 4352 0008 00BF     		nop
 4353 000a 0C37     		adds	r7, r7, #12
 4354              		.cfi_def_cfa_offset 4
 4355 000c BD46     		mov	sp, r7
 4356              		.cfi_def_cfa_register 13
 4357              		@ sp needed
 4358 000e 80BC     		pop	{r7}
 4359              		.cfi_restore 7
 4360              		.cfi_def_cfa_offset 0
 4361 0010 7047     		bx	lr
 4362              		.cfi_endproc
 4363              	.LFE97:
 4365              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 4366              		.align	1
 4367              		.weak	HAL_UART_AbortReceiveCpltCallback
 4368              		.syntax unified
 4369              		.thumb
 4370              		.thumb_func
 4371              		.fpu softvfp
 4373              	HAL_UART_AbortReceiveCpltCallback:
 4374              	.LFB98:
2684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 124


 4375              		.loc 1 2691 1
 4376              		.cfi_startproc
 4377              		@ args = 0, pretend = 0, frame = 8
 4378              		@ frame_needed = 1, uses_anonymous_args = 0
 4379              		@ link register save eliminated.
 4380 0000 80B4     		push	{r7}
 4381              		.cfi_def_cfa_offset 4
 4382              		.cfi_offset 7, -4
 4383 0002 83B0     		sub	sp, sp, #12
 4384              		.cfi_def_cfa_offset 16
 4385 0004 00AF     		add	r7, sp, #0
 4386              		.cfi_def_cfa_register 7
 4387 0006 7860     		str	r0, [r7, #4]
2692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4388              		.loc 1 2698 1
 4389 0008 00BF     		nop
 4390 000a 0C37     		adds	r7, r7, #12
 4391              		.cfi_def_cfa_offset 4
 4392 000c BD46     		mov	sp, r7
 4393              		.cfi_def_cfa_register 13
 4394              		@ sp needed
 4395 000e 80BC     		pop	{r7}
 4396              		.cfi_restore 7
 4397              		.cfi_def_cfa_offset 0
 4398 0010 7047     		bx	lr
 4399              		.cfi_endproc
 4400              	.LFE98:
 4402              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 4403              		.align	1
 4404              		.weak	HAL_UARTEx_RxEventCallback
 4405              		.syntax unified
 4406              		.thumb
 4407              		.thumb_func
 4408              		.fpu softvfp
 4410              	HAL_UARTEx_RxEventCallback:
 4411              	.LFB99:
2699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle
2703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               reception buffer until which, data are available)
2705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4412              		.loc 1 2708 1
 4413              		.cfi_startproc
 4414              		@ args = 0, pretend = 0, frame = 8
 4415              		@ frame_needed = 1, uses_anonymous_args = 0
 4416              		@ link register save eliminated.
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 125


 4417 0000 80B4     		push	{r7}
 4418              		.cfi_def_cfa_offset 4
 4419              		.cfi_offset 7, -4
 4420 0002 83B0     		sub	sp, sp, #12
 4421              		.cfi_def_cfa_offset 16
 4422 0004 00AF     		add	r7, sp, #0
 4423              		.cfi_def_cfa_register 7
 4424 0006 7860     		str	r0, [r7, #4]
 4425 0008 0B46     		mov	r3, r1
 4426 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(Size);
2712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4427              		.loc 1 2716 1
 4428 000c 00BF     		nop
 4429 000e 0C37     		adds	r7, r7, #12
 4430              		.cfi_def_cfa_offset 4
 4431 0010 BD46     		mov	sp, r7
 4432              		.cfi_def_cfa_register 13
 4433              		@ sp needed
 4434 0012 80BC     		pop	{r7}
 4435              		.cfi_restore 7
 4436              		.cfi_def_cfa_offset 0
 4437 0014 7047     		bx	lr
 4438              		.cfi_endproc
 4439              	.LFE99:
 4441              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4442              		.align	1
 4443              		.global	HAL_LIN_SendBreak
 4444              		.syntax unified
 4445              		.thumb
 4446              		.thumb_func
 4447              		.fpu softvfp
 4449              	HAL_LIN_SendBreak:
 4450              	.LFB100:
2717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 126


2734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4451              		.loc 1 2748 1
 4452              		.cfi_startproc
 4453              		@ args = 0, pretend = 0, frame = 8
 4454              		@ frame_needed = 1, uses_anonymous_args = 0
 4455              		@ link register save eliminated.
 4456 0000 80B4     		push	{r7}
 4457              		.cfi_def_cfa_offset 4
 4458              		.cfi_offset 7, -4
 4459 0002 83B0     		sub	sp, sp, #12
 4460              		.cfi_def_cfa_offset 16
 4461 0004 00AF     		add	r7, sp, #0
 4462              		.cfi_def_cfa_register 7
 4463 0006 7860     		str	r0, [r7, #4]
2749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4464              		.loc 1 2753 3
 4465 0008 7B68     		ldr	r3, [r7, #4]
 4466 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4467 000e 012B     		cmp	r3, #1
 4468 0010 01D1     		bne	.L208
 4469              		.loc 1 2753 3 is_stmt 0 discriminator 1
 4470 0012 0223     		movs	r3, #2
 4471 0014 18E0     		b	.L209
 4472              	.L208:
 4473              		.loc 1 2753 3 discriminator 2
 4474 0016 7B68     		ldr	r3, [r7, #4]
 4475 0018 0122     		movs	r2, #1
 4476 001a 83F83C20 		strb	r2, [r3, #60]
2754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4477              		.loc 1 2755 17 is_stmt 1 discriminator 2
 4478 001e 7B68     		ldr	r3, [r7, #4]
 4479 0020 2422     		movs	r2, #36
 4480 0022 83F83D20 		strb	r2, [r3, #61]
2756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 4481              		.loc 1 2758 3 discriminator 2
 4482 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 127


 4483 0028 1B68     		ldr	r3, [r3]
 4484 002a DA68     		ldr	r2, [r3, #12]
 4485 002c 7B68     		ldr	r3, [r7, #4]
 4486 002e 1B68     		ldr	r3, [r3]
 4487 0030 42F00102 		orr	r2, r2, #1
 4488 0034 DA60     		str	r2, [r3, #12]
2759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4489              		.loc 1 2760 17 discriminator 2
 4490 0036 7B68     		ldr	r3, [r7, #4]
 4491 0038 2022     		movs	r2, #32
 4492 003a 83F83D20 		strb	r2, [r3, #61]
2761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4493              		.loc 1 2763 3 discriminator 2
 4494 003e 7B68     		ldr	r3, [r7, #4]
 4495 0040 0022     		movs	r2, #0
 4496 0042 83F83C20 		strb	r2, [r3, #60]
2764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4497              		.loc 1 2765 10 discriminator 2
 4498 0046 0023     		movs	r3, #0
 4499              	.L209:
2766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4500              		.loc 1 2766 1
 4501 0048 1846     		mov	r0, r3
 4502 004a 0C37     		adds	r7, r7, #12
 4503              		.cfi_def_cfa_offset 4
 4504 004c BD46     		mov	sp, r7
 4505              		.cfi_def_cfa_register 13
 4506              		@ sp needed
 4507 004e 80BC     		pop	{r7}
 4508              		.cfi_restore 7
 4509              		.cfi_def_cfa_offset 0
 4510 0050 7047     		bx	lr
 4511              		.cfi_endproc
 4512              	.LFE100:
 4514              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 4515              		.align	1
 4516              		.global	HAL_MultiProcessor_EnterMuteMode
 4517              		.syntax unified
 4518              		.thumb
 4519              		.thumb_func
 4520              		.fpu softvfp
 4522              	HAL_MultiProcessor_EnterMuteMode:
 4523              	.LFB101:
2767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4524              		.loc 1 2775 1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 128


 4525              		.cfi_startproc
 4526              		@ args = 0, pretend = 0, frame = 8
 4527              		@ frame_needed = 1, uses_anonymous_args = 0
 4528              		@ link register save eliminated.
 4529 0000 80B4     		push	{r7}
 4530              		.cfi_def_cfa_offset 4
 4531              		.cfi_offset 7, -4
 4532 0002 83B0     		sub	sp, sp, #12
 4533              		.cfi_def_cfa_offset 16
 4534 0004 00AF     		add	r7, sp, #0
 4535              		.cfi_def_cfa_register 7
 4536 0006 7860     		str	r0, [r7, #4]
2776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4537              		.loc 1 2780 3
 4538 0008 7B68     		ldr	r3, [r7, #4]
 4539 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4540 000e 012B     		cmp	r3, #1
 4541 0010 01D1     		bne	.L211
 4542              		.loc 1 2780 3 is_stmt 0 discriminator 1
 4543 0012 0223     		movs	r3, #2
 4544 0014 18E0     		b	.L212
 4545              	.L211:
 4546              		.loc 1 2780 3 discriminator 2
 4547 0016 7B68     		ldr	r3, [r7, #4]
 4548 0018 0122     		movs	r2, #1
 4549 001a 83F83C20 		strb	r2, [r3, #60]
2781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4550              		.loc 1 2782 17 is_stmt 1 discriminator 2
 4551 001e 7B68     		ldr	r3, [r7, #4]
 4552 0020 2422     		movs	r2, #36
 4553 0022 83F83D20 		strb	r2, [r3, #61]
2783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4554              		.loc 1 2785 3 discriminator 2
 4555 0026 7B68     		ldr	r3, [r7, #4]
 4556 0028 1B68     		ldr	r3, [r3]
 4557 002a DA68     		ldr	r2, [r3, #12]
 4558 002c 7B68     		ldr	r3, [r7, #4]
 4559 002e 1B68     		ldr	r3, [r3]
 4560 0030 42F00202 		orr	r2, r2, #2
 4561 0034 DA60     		str	r2, [r3, #12]
2786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4562              		.loc 1 2787 17 discriminator 2
 4563 0036 7B68     		ldr	r3, [r7, #4]
 4564 0038 2022     		movs	r2, #32
 4565 003a 83F83D20 		strb	r2, [r3, #61]
2788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4566              		.loc 1 2790 3 discriminator 2
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 129


 4567 003e 7B68     		ldr	r3, [r7, #4]
 4568 0040 0022     		movs	r2, #0
 4569 0042 83F83C20 		strb	r2, [r3, #60]
2791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4570              		.loc 1 2792 10 discriminator 2
 4571 0046 0023     		movs	r3, #0
 4572              	.L212:
2793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4573              		.loc 1 2793 1
 4574 0048 1846     		mov	r0, r3
 4575 004a 0C37     		adds	r7, r7, #12
 4576              		.cfi_def_cfa_offset 4
 4577 004c BD46     		mov	sp, r7
 4578              		.cfi_def_cfa_register 13
 4579              		@ sp needed
 4580 004e 80BC     		pop	{r7}
 4581              		.cfi_restore 7
 4582              		.cfi_def_cfa_offset 0
 4583 0050 7047     		bx	lr
 4584              		.cfi_endproc
 4585              	.LFE101:
 4587              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 4588              		.align	1
 4589              		.global	HAL_MultiProcessor_ExitMuteMode
 4590              		.syntax unified
 4591              		.thumb
 4592              		.thumb_func
 4593              		.fpu softvfp
 4595              	HAL_MultiProcessor_ExitMuteMode:
 4596              	.LFB102:
2794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4597              		.loc 1 2802 1
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 8
 4600              		@ frame_needed = 1, uses_anonymous_args = 0
 4601              		@ link register save eliminated.
 4602 0000 80B4     		push	{r7}
 4603              		.cfi_def_cfa_offset 4
 4604              		.cfi_offset 7, -4
 4605 0002 83B0     		sub	sp, sp, #12
 4606              		.cfi_def_cfa_offset 16
 4607 0004 00AF     		add	r7, sp, #0
 4608              		.cfi_def_cfa_register 7
 4609 0006 7860     		str	r0, [r7, #4]
2803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 130


2807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4610              		.loc 1 2807 3
 4611 0008 7B68     		ldr	r3, [r7, #4]
 4612 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4613 000e 012B     		cmp	r3, #1
 4614 0010 01D1     		bne	.L214
 4615              		.loc 1 2807 3 is_stmt 0 discriminator 1
 4616 0012 0223     		movs	r3, #2
 4617 0014 18E0     		b	.L215
 4618              	.L214:
 4619              		.loc 1 2807 3 discriminator 2
 4620 0016 7B68     		ldr	r3, [r7, #4]
 4621 0018 0122     		movs	r2, #1
 4622 001a 83F83C20 		strb	r2, [r3, #60]
2808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4623              		.loc 1 2809 17 is_stmt 1 discriminator 2
 4624 001e 7B68     		ldr	r3, [r7, #4]
 4625 0020 2422     		movs	r2, #36
 4626 0022 83F83D20 		strb	r2, [r3, #61]
2810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4627              		.loc 1 2812 3 discriminator 2
 4628 0026 7B68     		ldr	r3, [r7, #4]
 4629 0028 1B68     		ldr	r3, [r3]
 4630 002a DA68     		ldr	r2, [r3, #12]
 4631 002c 7B68     		ldr	r3, [r7, #4]
 4632 002e 1B68     		ldr	r3, [r3]
 4633 0030 22F00202 		bic	r2, r2, #2
 4634 0034 DA60     		str	r2, [r3, #12]
2813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4635              		.loc 1 2814 17 discriminator 2
 4636 0036 7B68     		ldr	r3, [r7, #4]
 4637 0038 2022     		movs	r2, #32
 4638 003a 83F83D20 		strb	r2, [r3, #61]
2815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4639              		.loc 1 2817 3 discriminator 2
 4640 003e 7B68     		ldr	r3, [r7, #4]
 4641 0040 0022     		movs	r2, #0
 4642 0042 83F83C20 		strb	r2, [r3, #60]
2818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4643              		.loc 1 2819 10 discriminator 2
 4644 0046 0023     		movs	r3, #0
 4645              	.L215:
2820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4646              		.loc 1 2820 1
 4647 0048 1846     		mov	r0, r3
 4648 004a 0C37     		adds	r7, r7, #12
 4649              		.cfi_def_cfa_offset 4
 4650 004c BD46     		mov	sp, r7
 4651              		.cfi_def_cfa_register 13
 4652              		@ sp needed
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 131


 4653 004e 80BC     		pop	{r7}
 4654              		.cfi_restore 7
 4655              		.cfi_def_cfa_offset 0
 4656 0050 7047     		bx	lr
 4657              		.cfi_endproc
 4658              	.LFE102:
 4660              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 4661              		.align	1
 4662              		.global	HAL_HalfDuplex_EnableTransmitter
 4663              		.syntax unified
 4664              		.thumb
 4665              		.thumb_func
 4666              		.fpu softvfp
 4668              	HAL_HalfDuplex_EnableTransmitter:
 4669              	.LFB103:
2821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4670              		.loc 1 2829 1
 4671              		.cfi_startproc
 4672              		@ args = 0, pretend = 0, frame = 16
 4673              		@ frame_needed = 1, uses_anonymous_args = 0
 4674              		@ link register save eliminated.
 4675 0000 80B4     		push	{r7}
 4676              		.cfi_def_cfa_offset 4
 4677              		.cfi_offset 7, -4
 4678 0002 85B0     		sub	sp, sp, #20
 4679              		.cfi_def_cfa_offset 24
 4680 0004 00AF     		add	r7, sp, #0
 4681              		.cfi_def_cfa_register 7
 4682 0006 7860     		str	r0, [r7, #4]
2830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4683              		.loc 1 2830 12
 4684 0008 0023     		movs	r3, #0
 4685 000a FB60     		str	r3, [r7, #12]
2831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4686              		.loc 1 2833 3
 4687 000c 7B68     		ldr	r3, [r7, #4]
 4688 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4689 0012 012B     		cmp	r3, #1
 4690 0014 01D1     		bne	.L217
 4691              		.loc 1 2833 3 is_stmt 0 discriminator 1
 4692 0016 0223     		movs	r3, #2
 4693 0018 20E0     		b	.L218
 4694              	.L217:
 4695              		.loc 1 2833 3 discriminator 2
 4696 001a 7B68     		ldr	r3, [r7, #4]
 4697 001c 0122     		movs	r2, #1
 4698 001e 83F83C20 		strb	r2, [r3, #60]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 132


2834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4699              		.loc 1 2835 17 is_stmt 1 discriminator 2
 4700 0022 7B68     		ldr	r3, [r7, #4]
 4701 0024 2422     		movs	r2, #36
 4702 0026 83F83D20 		strb	r2, [r3, #61]
2836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4703              		.loc 1 2838 17 discriminator 2
 4704 002a 7B68     		ldr	r3, [r7, #4]
 4705 002c 1B68     		ldr	r3, [r3]
 4706              		.loc 1 2838 10 discriminator 2
 4707 002e DB68     		ldr	r3, [r3, #12]
 4708 0030 FB60     		str	r3, [r7, #12]
2839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4709              		.loc 1 2841 10 discriminator 2
 4710 0032 FB68     		ldr	r3, [r7, #12]
 4711 0034 23F00C03 		bic	r3, r3, #12
 4712 0038 FB60     		str	r3, [r7, #12]
2842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 4713              		.loc 1 2844 10 discriminator 2
 4714 003a FB68     		ldr	r3, [r7, #12]
 4715 003c 43F00803 		orr	r3, r3, #8
 4716 0040 FB60     		str	r3, [r7, #12]
2845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4717              		.loc 1 2847 3 discriminator 2
 4718 0042 7B68     		ldr	r3, [r7, #4]
 4719 0044 1B68     		ldr	r3, [r3]
 4720 0046 FA68     		ldr	r2, [r7, #12]
 4721 0048 DA60     		str	r2, [r3, #12]
2848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4722              		.loc 1 2849 17 discriminator 2
 4723 004a 7B68     		ldr	r3, [r7, #4]
 4724 004c 2022     		movs	r2, #32
 4725 004e 83F83D20 		strb	r2, [r3, #61]
2850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4726              		.loc 1 2852 3 discriminator 2
 4727 0052 7B68     		ldr	r3, [r7, #4]
 4728 0054 0022     		movs	r2, #0
 4729 0056 83F83C20 		strb	r2, [r3, #60]
2853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4730              		.loc 1 2854 10 discriminator 2
 4731 005a 0023     		movs	r3, #0
 4732              	.L218:
2855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4733              		.loc 1 2855 1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 133


 4734 005c 1846     		mov	r0, r3
 4735 005e 1437     		adds	r7, r7, #20
 4736              		.cfi_def_cfa_offset 4
 4737 0060 BD46     		mov	sp, r7
 4738              		.cfi_def_cfa_register 13
 4739              		@ sp needed
 4740 0062 80BC     		pop	{r7}
 4741              		.cfi_restore 7
 4742              		.cfi_def_cfa_offset 0
 4743 0064 7047     		bx	lr
 4744              		.cfi_endproc
 4745              	.LFE103:
 4747              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 4748              		.align	1
 4749              		.global	HAL_HalfDuplex_EnableReceiver
 4750              		.syntax unified
 4751              		.thumb
 4752              		.thumb_func
 4753              		.fpu softvfp
 4755              	HAL_HalfDuplex_EnableReceiver:
 4756              	.LFB104:
2856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4757              		.loc 1 2864 1
 4758              		.cfi_startproc
 4759              		@ args = 0, pretend = 0, frame = 16
 4760              		@ frame_needed = 1, uses_anonymous_args = 0
 4761              		@ link register save eliminated.
 4762 0000 80B4     		push	{r7}
 4763              		.cfi_def_cfa_offset 4
 4764              		.cfi_offset 7, -4
 4765 0002 85B0     		sub	sp, sp, #20
 4766              		.cfi_def_cfa_offset 24
 4767 0004 00AF     		add	r7, sp, #0
 4768              		.cfi_def_cfa_register 7
 4769 0006 7860     		str	r0, [r7, #4]
2865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4770              		.loc 1 2865 12
 4771 0008 0023     		movs	r3, #0
 4772 000a FB60     		str	r3, [r7, #12]
2866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4773              		.loc 1 2868 3
 4774 000c 7B68     		ldr	r3, [r7, #4]
 4775 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4776 0012 012B     		cmp	r3, #1
 4777 0014 01D1     		bne	.L220
 4778              		.loc 1 2868 3 is_stmt 0 discriminator 1
 4779 0016 0223     		movs	r3, #2
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 134


 4780 0018 20E0     		b	.L221
 4781              	.L220:
 4782              		.loc 1 2868 3 discriminator 2
 4783 001a 7B68     		ldr	r3, [r7, #4]
 4784 001c 0122     		movs	r2, #1
 4785 001e 83F83C20 		strb	r2, [r3, #60]
2869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4786              		.loc 1 2870 17 is_stmt 1 discriminator 2
 4787 0022 7B68     		ldr	r3, [r7, #4]
 4788 0024 2422     		movs	r2, #36
 4789 0026 83F83D20 		strb	r2, [r3, #61]
2871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4790              		.loc 1 2873 17 discriminator 2
 4791 002a 7B68     		ldr	r3, [r7, #4]
 4792 002c 1B68     		ldr	r3, [r3]
 4793              		.loc 1 2873 10 discriminator 2
 4794 002e DB68     		ldr	r3, [r3, #12]
 4795 0030 FB60     		str	r3, [r7, #12]
2874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4796              		.loc 1 2876 10 discriminator 2
 4797 0032 FB68     		ldr	r3, [r7, #12]
 4798 0034 23F00C03 		bic	r3, r3, #12
 4799 0038 FB60     		str	r3, [r7, #12]
2877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 4800              		.loc 1 2879 10 discriminator 2
 4801 003a FB68     		ldr	r3, [r7, #12]
 4802 003c 43F00403 		orr	r3, r3, #4
 4803 0040 FB60     		str	r3, [r7, #12]
2880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4804              		.loc 1 2882 3 discriminator 2
 4805 0042 7B68     		ldr	r3, [r7, #4]
 4806 0044 1B68     		ldr	r3, [r3]
 4807 0046 FA68     		ldr	r2, [r7, #12]
 4808 0048 DA60     		str	r2, [r3, #12]
2883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4809              		.loc 1 2884 17 discriminator 2
 4810 004a 7B68     		ldr	r3, [r7, #4]
 4811 004c 2022     		movs	r2, #32
 4812 004e 83F83D20 		strb	r2, [r3, #61]
2885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4813              		.loc 1 2887 3 discriminator 2
 4814 0052 7B68     		ldr	r3, [r7, #4]
 4815 0054 0022     		movs	r2, #0
 4816 0056 83F83C20 		strb	r2, [r3, #60]
2888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 135


2889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4817              		.loc 1 2889 10 discriminator 2
 4818 005a 0023     		movs	r3, #0
 4819              	.L221:
2890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4820              		.loc 1 2890 1
 4821 005c 1846     		mov	r0, r3
 4822 005e 1437     		adds	r7, r7, #20
 4823              		.cfi_def_cfa_offset 4
 4824 0060 BD46     		mov	sp, r7
 4825              		.cfi_def_cfa_register 13
 4826              		@ sp needed
 4827 0062 80BC     		pop	{r7}
 4828              		.cfi_restore 7
 4829              		.cfi_def_cfa_offset 0
 4830 0064 7047     		bx	lr
 4831              		.cfi_endproc
 4832              	.LFE104:
 4834              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4835              		.align	1
 4836              		.global	HAL_UART_GetState
 4837              		.syntax unified
 4838              		.thumb
 4839              		.thumb_func
 4840              		.fpu softvfp
 4842              	HAL_UART_GetState:
 4843              	.LFB105:
2891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 136


2921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4844              		.loc 1 2921 1
 4845              		.cfi_startproc
 4846              		@ args = 0, pretend = 0, frame = 16
 4847              		@ frame_needed = 1, uses_anonymous_args = 0
 4848              		@ link register save eliminated.
 4849 0000 80B4     		push	{r7}
 4850              		.cfi_def_cfa_offset 4
 4851              		.cfi_offset 7, -4
 4852 0002 85B0     		sub	sp, sp, #20
 4853              		.cfi_def_cfa_offset 24
 4854 0004 00AF     		add	r7, sp, #0
 4855              		.cfi_def_cfa_register 7
 4856 0006 7860     		str	r0, [r7, #4]
2922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 4857              		.loc 1 2922 12
 4858 0008 0023     		movs	r3, #0
 4859 000a FB60     		str	r3, [r7, #12]
 4860              		.loc 1 2922 27
 4861 000c 0023     		movs	r3, #0
 4862 000e BB60     		str	r3, [r7, #8]
2923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 4863              		.loc 1 2923 16
 4864 0010 7B68     		ldr	r3, [r7, #4]
 4865 0012 93F83D30 		ldrb	r3, [r3, #61]
 4866 0016 DBB2     		uxtb	r3, r3
 4867              		.loc 1 2923 9
 4868 0018 FB60     		str	r3, [r7, #12]
2924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 4869              		.loc 1 2924 16
 4870 001a 7B68     		ldr	r3, [r7, #4]
 4871 001c 93F83E30 		ldrb	r3, [r3, #62]
 4872 0020 DBB2     		uxtb	r3, r3
 4873              		.loc 1 2924 9
 4874 0022 BB60     		str	r3, [r7, #8]
2925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4875              		.loc 1 2926 10
 4876 0024 FB68     		ldr	r3, [r7, #12]
 4877 0026 DAB2     		uxtb	r2, r3
 4878 0028 BB68     		ldr	r3, [r7, #8]
 4879 002a DBB2     		uxtb	r3, r3
 4880 002c 1343     		orrs	r3, r3, r2
 4881 002e DBB2     		uxtb	r3, r3
2927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4882              		.loc 1 2927 1
 4883 0030 1846     		mov	r0, r3
 4884 0032 1437     		adds	r7, r7, #20
 4885              		.cfi_def_cfa_offset 4
 4886 0034 BD46     		mov	sp, r7
 4887              		.cfi_def_cfa_register 13
 4888              		@ sp needed
 4889 0036 80BC     		pop	{r7}
 4890              		.cfi_restore 7
 4891              		.cfi_def_cfa_offset 0
 4892 0038 7047     		bx	lr
 4893              		.cfi_endproc
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 137


 4894              	.LFE105:
 4896              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4897              		.align	1
 4898              		.global	HAL_UART_GetError
 4899              		.syntax unified
 4900              		.thumb
 4901              		.thumb_func
 4902              		.fpu softvfp
 4904              	HAL_UART_GetError:
 4905              	.LFB106:
2928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4906              		.loc 1 2936 1
 4907              		.cfi_startproc
 4908              		@ args = 0, pretend = 0, frame = 8
 4909              		@ frame_needed = 1, uses_anonymous_args = 0
 4910              		@ link register save eliminated.
 4911 0000 80B4     		push	{r7}
 4912              		.cfi_def_cfa_offset 4
 4913              		.cfi_offset 7, -4
 4914 0002 83B0     		sub	sp, sp, #12
 4915              		.cfi_def_cfa_offset 16
 4916 0004 00AF     		add	r7, sp, #0
 4917              		.cfi_def_cfa_register 7
 4918 0006 7860     		str	r0, [r7, #4]
2937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 4919              		.loc 1 2937 15
 4920 0008 7B68     		ldr	r3, [r7, #4]
 4921 000a 1B6C     		ldr	r3, [r3, #64]
2938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4922              		.loc 1 2938 1
 4923 000c 1846     		mov	r0, r3
 4924 000e 0C37     		adds	r7, r7, #12
 4925              		.cfi_def_cfa_offset 4
 4926 0010 BD46     		mov	sp, r7
 4927              		.cfi_def_cfa_register 13
 4928              		@ sp needed
 4929 0012 80BC     		pop	{r7}
 4930              		.cfi_restore 7
 4931              		.cfi_def_cfa_offset 0
 4932 0014 7047     		bx	lr
 4933              		.cfi_endproc
 4934              	.LFE106:
 4936              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4937              		.align	1
 4938              		.syntax unified
 4939              		.thumb
 4940              		.thumb_func
 4941              		.fpu softvfp
 4943              	UART_DMATransmitCplt:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 138


 4944              	.LFB107:
2939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4945              		.loc 1 2981 1
 4946              		.cfi_startproc
 4947              		@ args = 0, pretend = 0, frame = 16
 4948              		@ frame_needed = 1, uses_anonymous_args = 0
 4949 0000 80B5     		push	{r7, lr}
 4950              		.cfi_def_cfa_offset 8
 4951              		.cfi_offset 7, -8
 4952              		.cfi_offset 14, -4
 4953 0002 84B0     		sub	sp, sp, #16
 4954              		.cfi_def_cfa_offset 24
 4955 0004 00AF     		add	r7, sp, #0
 4956              		.cfi_def_cfa_register 7
 4957 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 139


2982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4958              		.loc 1 2982 23
 4959 0008 7B68     		ldr	r3, [r7, #4]
 4960 000a 5B6A     		ldr	r3, [r3, #36]
 4961 000c FB60     		str	r3, [r7, #12]
2983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 4962              		.loc 1 2984 12
 4963 000e 7B68     		ldr	r3, [r7, #4]
 4964 0010 1B68     		ldr	r3, [r3]
 4965              		.loc 1 2984 22
 4966 0012 1B68     		ldr	r3, [r3]
 4967              		.loc 1 2984 28
 4968 0014 03F02003 		and	r3, r3, #32
 4969              		.loc 1 2984 6
 4970 0018 002B     		cmp	r3, #0
 4971 001a 13D1     		bne	.L227
2985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4972              		.loc 1 2986 24
 4973 001c FB68     		ldr	r3, [r7, #12]
 4974 001e 0022     		movs	r2, #0
 4975 0020 DA84     		strh	r2, [r3, #38]	@ movhi
2987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4976              		.loc 1 2990 5
 4977 0022 FB68     		ldr	r3, [r7, #12]
 4978 0024 1B68     		ldr	r3, [r3]
 4979 0026 5A69     		ldr	r2, [r3, #20]
 4980 0028 FB68     		ldr	r3, [r7, #12]
 4981 002a 1B68     		ldr	r3, [r3]
 4982 002c 22F08002 		bic	r2, r2, #128
 4983 0030 5A61     		str	r2, [r3, #20]
2991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 4984              		.loc 1 2993 5
 4985 0032 FB68     		ldr	r3, [r7, #12]
 4986 0034 1B68     		ldr	r3, [r3]
 4987 0036 DA68     		ldr	r2, [r3, #12]
 4988 0038 FB68     		ldr	r3, [r7, #12]
 4989 003a 1B68     		ldr	r3, [r3]
 4990 003c 42F04002 		orr	r2, r2, #64
 4991 0040 DA60     		str	r2, [r3, #12]
2994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 140


3005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4992              		.loc 1 3007 1
 4993 0042 02E0     		b	.L229
 4994              	.L227:
3004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 4995              		.loc 1 3004 5
 4996 0044 F868     		ldr	r0, [r7, #12]
 4997 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4998              	.L229:
 4999              		.loc 1 3007 1
 5000 004a 00BF     		nop
 5001 004c 1037     		adds	r7, r7, #16
 5002              		.cfi_def_cfa_offset 8
 5003 004e BD46     		mov	sp, r7
 5004              		.cfi_def_cfa_register 13
 5005              		@ sp needed
 5006 0050 80BD     		pop	{r7, pc}
 5007              		.cfi_endproc
 5008              	.LFE107:
 5010              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 5011              		.align	1
 5012              		.syntax unified
 5013              		.thumb
 5014              		.thumb_func
 5015              		.fpu softvfp
 5017              	UART_DMATxHalfCplt:
 5018              	.LFB108:
3008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5019              		.loc 1 3016 1
 5020              		.cfi_startproc
 5021              		@ args = 0, pretend = 0, frame = 16
 5022              		@ frame_needed = 1, uses_anonymous_args = 0
 5023 0000 80B5     		push	{r7, lr}
 5024              		.cfi_def_cfa_offset 8
 5025              		.cfi_offset 7, -8
 5026              		.cfi_offset 14, -4
 5027 0002 84B0     		sub	sp, sp, #16
 5028              		.cfi_def_cfa_offset 24
 5029 0004 00AF     		add	r7, sp, #0
 5030              		.cfi_def_cfa_register 7
 5031 0006 7860     		str	r0, [r7, #4]
3017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5032              		.loc 1 3017 23
 5033 0008 7B68     		ldr	r3, [r7, #4]
 5034 000a 5B6A     		ldr	r3, [r3, #36]
 5035 000c FB60     		str	r3, [r7, #12]
3018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 141


3019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 5036              		.loc 1 3024 3
 5037 000e F868     		ldr	r0, [r7, #12]
 5038 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5039              		.loc 1 3026 1
 5040 0014 00BF     		nop
 5041 0016 1037     		adds	r7, r7, #16
 5042              		.cfi_def_cfa_offset 8
 5043 0018 BD46     		mov	sp, r7
 5044              		.cfi_def_cfa_register 13
 5045              		@ sp needed
 5046 001a 80BD     		pop	{r7, pc}
 5047              		.cfi_endproc
 5048              	.LFE108:
 5050              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 5051              		.align	1
 5052              		.syntax unified
 5053              		.thumb
 5054              		.thumb_func
 5055              		.fpu softvfp
 5057              	UART_DMAReceiveCplt:
 5058              	.LFB109:
3027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5059              		.loc 1 3035 1
 5060              		.cfi_startproc
 5061              		@ args = 0, pretend = 0, frame = 16
 5062              		@ frame_needed = 1, uses_anonymous_args = 0
 5063 0000 80B5     		push	{r7, lr}
 5064              		.cfi_def_cfa_offset 8
 5065              		.cfi_offset 7, -8
 5066              		.cfi_offset 14, -4
 5067 0002 84B0     		sub	sp, sp, #16
 5068              		.cfi_def_cfa_offset 24
 5069 0004 00AF     		add	r7, sp, #0
 5070              		.cfi_def_cfa_register 7
 5071 0006 7860     		str	r0, [r7, #4]
3036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5072              		.loc 1 3036 23
 5073 0008 7B68     		ldr	r3, [r7, #4]
 5074 000a 5B6A     		ldr	r3, [r3, #36]
 5075 000c FB60     		str	r3, [r7, #12]
3037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 142


3038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 5076              		.loc 1 3038 12
 5077 000e 7B68     		ldr	r3, [r7, #4]
 5078 0010 1B68     		ldr	r3, [r3]
 5079              		.loc 1 3038 22
 5080 0012 1B68     		ldr	r3, [r3]
 5081              		.loc 1 3038 28
 5082 0014 03F02003 		and	r3, r3, #32
 5083              		.loc 1 3038 6
 5084 0018 002B     		cmp	r3, #0
 5085 001a 2AD1     		bne	.L232
3039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
 5086              		.loc 1 3040 24
 5087 001c FB68     		ldr	r3, [r7, #12]
 5088 001e 0022     		movs	r2, #0
 5089 0020 DA85     		strh	r2, [r3, #46]	@ movhi
3041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5090              		.loc 1 3043 5
 5091 0022 FB68     		ldr	r3, [r7, #12]
 5092 0024 1B68     		ldr	r3, [r3]
 5093 0026 DA68     		ldr	r2, [r3, #12]
 5094 0028 FB68     		ldr	r3, [r7, #12]
 5095 002a 1B68     		ldr	r3, [r3]
 5096 002c 22F48072 		bic	r2, r2, #256
 5097 0030 DA60     		str	r2, [r3, #12]
3044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5098              		.loc 1 3044 5
 5099 0032 FB68     		ldr	r3, [r7, #12]
 5100 0034 1B68     		ldr	r3, [r3]
 5101 0036 5A69     		ldr	r2, [r3, #20]
 5102 0038 FB68     		ldr	r3, [r7, #12]
 5103 003a 1B68     		ldr	r3, [r3]
 5104 003c 22F00102 		bic	r2, r2, #1
 5105 0040 5A61     		str	r2, [r3, #20]
3045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
3048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5106              		.loc 1 3048 5
 5107 0042 FB68     		ldr	r3, [r7, #12]
 5108 0044 1B68     		ldr	r3, [r3]
 5109 0046 5A69     		ldr	r2, [r3, #20]
 5110 0048 FB68     		ldr	r3, [r7, #12]
 5111 004a 1B68     		ldr	r3, [r3]
 5112 004c 22F04002 		bic	r2, r2, #64
 5113 0050 5A61     		str	r2, [r3, #20]
3049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5114              		.loc 1 3051 20
 5115 0052 FB68     		ldr	r3, [r7, #12]
 5116 0054 2022     		movs	r2, #32
 5117 0056 83F83E20 		strb	r2, [r3, #62]
3052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 143


3053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5118              		.loc 1 3054 14
 5119 005a FB68     		ldr	r3, [r7, #12]
 5120 005c 1B6B     		ldr	r3, [r3, #48]
 5121              		.loc 1 3054 8
 5122 005e 012B     		cmp	r3, #1
 5123 0060 07D1     		bne	.L232
3055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5124              		.loc 1 3056 7
 5125 0062 FB68     		ldr	r3, [r7, #12]
 5126 0064 1B68     		ldr	r3, [r3]
 5127 0066 DA68     		ldr	r2, [r3, #12]
 5128 0068 FB68     		ldr	r3, [r7, #12]
 5129 006a 1B68     		ldr	r3, [r3]
 5130 006c 22F01002 		bic	r2, r2, #16
 5131 0070 DA60     		str	r2, [r3, #12]
 5132              	.L232:
3057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5133              		.loc 1 3062 12
 5134 0072 FB68     		ldr	r3, [r7, #12]
 5135 0074 1B6B     		ldr	r3, [r3, #48]
 5136              		.loc 1 3062 6
 5137 0076 012B     		cmp	r3, #1
 5138 0078 06D1     		bne	.L233
3063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {  
3064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 5139              		.loc 1 3069 5
 5140 007a FB68     		ldr	r3, [r7, #12]
 5141 007c 9B8D     		ldrh	r3, [r3, #44]
 5142 007e 1946     		mov	r1, r3
 5143 0080 F868     		ldr	r0, [r7, #12]
 5144 0082 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 144


3083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5145              		.loc 1 3083 1
 5146 0086 02E0     		b	.L235
 5147              	.L233:
3080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5148              		.loc 1 3080 5
 5149 0088 F868     		ldr	r0, [r7, #12]
 5150 008a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 5151              	.L235:
 5152              		.loc 1 3083 1
 5153 008e 00BF     		nop
 5154 0090 1037     		adds	r7, r7, #16
 5155              		.cfi_def_cfa_offset 8
 5156 0092 BD46     		mov	sp, r7
 5157              		.cfi_def_cfa_register 13
 5158              		@ sp needed
 5159 0094 80BD     		pop	{r7, pc}
 5160              		.cfi_endproc
 5161              	.LFE109:
 5163              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 5164              		.align	1
 5165              		.syntax unified
 5166              		.thumb
 5167              		.thumb_func
 5168              		.fpu softvfp
 5170              	UART_DMARxHalfCplt:
 5171              	.LFB110:
3084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5172              		.loc 1 3092 1
 5173              		.cfi_startproc
 5174              		@ args = 0, pretend = 0, frame = 16
 5175              		@ frame_needed = 1, uses_anonymous_args = 0
 5176 0000 80B5     		push	{r7, lr}
 5177              		.cfi_def_cfa_offset 8
 5178              		.cfi_offset 7, -8
 5179              		.cfi_offset 14, -4
 5180 0002 84B0     		sub	sp, sp, #16
 5181              		.cfi_def_cfa_offset 24
 5182 0004 00AF     		add	r7, sp, #0
 5183              		.cfi_def_cfa_register 7
 5184 0006 7860     		str	r0, [r7, #4]
3093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5185              		.loc 1 3093 23
 5186 0008 7B68     		ldr	r3, [r7, #4]
 5187 000a 5B6A     		ldr	r3, [r3, #36]
 5188 000c FB60     		str	r3, [r7, #12]
3094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 145


3097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5189              		.loc 1 3097 12
 5190 000e FB68     		ldr	r3, [r7, #12]
 5191 0010 1B6B     		ldr	r3, [r3, #48]
 5192              		.loc 1 3097 6
 5193 0012 012B     		cmp	r3, #1
 5194 0014 08D1     		bne	.L237
3098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize/2U);
3102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 5195              		.loc 1 3104 44
 5196 0016 FB68     		ldr	r3, [r7, #12]
 5197 0018 9B8D     		ldrh	r3, [r3, #44]
 5198              		.loc 1 3104 5
 5199 001a 5B08     		lsrs	r3, r3, #1
 5200 001c 9BB2     		uxth	r3, r3
 5201 001e 1946     		mov	r1, r3
 5202 0020 F868     		ldr	r0, [r7, #12]
 5203 0022 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5204              		.loc 1 3118 1
 5205 0026 02E0     		b	.L239
 5206              	.L237:
3115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5207              		.loc 1 3115 5
 5208 0028 F868     		ldr	r0, [r7, #12]
 5209 002a FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 5210              	.L239:
 5211              		.loc 1 3118 1
 5212 002e 00BF     		nop
 5213 0030 1037     		adds	r7, r7, #16
 5214              		.cfi_def_cfa_offset 8
 5215 0032 BD46     		mov	sp, r7
 5216              		.cfi_def_cfa_register 13
 5217              		@ sp needed
 5218 0034 80BD     		pop	{r7, pc}
 5219              		.cfi_endproc
 5220              	.LFE110:
 5222              		.section	.text.UART_DMAError,"ax",%progbits
 5223              		.align	1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 146


 5224              		.syntax unified
 5225              		.thumb
 5226              		.thumb_func
 5227              		.fpu softvfp
 5229              	UART_DMAError:
 5230              	.LFB111:
3119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5231              		.loc 1 3127 1
 5232              		.cfi_startproc
 5233              		@ args = 0, pretend = 0, frame = 16
 5234              		@ frame_needed = 1, uses_anonymous_args = 0
 5235 0000 80B5     		push	{r7, lr}
 5236              		.cfi_def_cfa_offset 8
 5237              		.cfi_offset 7, -8
 5238              		.cfi_offset 14, -4
 5239 0002 84B0     		sub	sp, sp, #16
 5240              		.cfi_def_cfa_offset 24
 5241 0004 00AF     		add	r7, sp, #0
 5242              		.cfi_def_cfa_register 7
 5243 0006 7860     		str	r0, [r7, #4]
3128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5244              		.loc 1 3128 12
 5245 0008 0023     		movs	r3, #0
 5246 000a FB60     		str	r3, [r7, #12]
3129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5247              		.loc 1 3129 23
 5248 000c 7B68     		ldr	r3, [r7, #4]
 5249 000e 5B6A     		ldr	r3, [r3, #36]
 5250 0010 BB60     		str	r3, [r7, #8]
3130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 5251              		.loc 1 3132 16
 5252 0012 BB68     		ldr	r3, [r7, #8]
 5253 0014 1B68     		ldr	r3, [r3]
 5254 0016 5B69     		ldr	r3, [r3, #20]
 5255 0018 03F08003 		and	r3, r3, #128
 5256 001c 002B     		cmp	r3, #0
 5257 001e 14BF     		ite	ne
 5258 0020 0123     		movne	r3, #1
 5259 0022 0023     		moveq	r3, #0
 5260 0024 DBB2     		uxtb	r3, r3
 5261              		.loc 1 3132 14
 5262 0026 FB60     		str	r3, [r7, #12]
3133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 5263              		.loc 1 3133 13
 5264 0028 BB68     		ldr	r3, [r7, #8]
 5265 002a 93F83D30 		ldrb	r3, [r3, #61]
 5266 002e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 147


 5267              		.loc 1 3133 6
 5268 0030 212B     		cmp	r3, #33
 5269 0032 08D1     		bne	.L241
 5270              		.loc 1 3133 49 discriminator 1
 5271 0034 FB68     		ldr	r3, [r7, #12]
 5272 0036 002B     		cmp	r3, #0
 5273 0038 05D0     		beq	.L241
3134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5274              		.loc 1 3135 24
 5275 003a BB68     		ldr	r3, [r7, #8]
 5276 003c 0022     		movs	r2, #0
 5277 003e DA84     		strh	r2, [r3, #38]	@ movhi
3136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 5278              		.loc 1 3136 5
 5279 0040 B868     		ldr	r0, [r7, #8]
 5280 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 5281              	.L241:
3137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5282              		.loc 1 3140 16
 5283 0046 BB68     		ldr	r3, [r7, #8]
 5284 0048 1B68     		ldr	r3, [r3]
 5285 004a 5B69     		ldr	r3, [r3, #20]
 5286 004c 03F04003 		and	r3, r3, #64
 5287 0050 002B     		cmp	r3, #0
 5288 0052 14BF     		ite	ne
 5289 0054 0123     		movne	r3, #1
 5290 0056 0023     		moveq	r3, #0
 5291 0058 DBB2     		uxtb	r3, r3
 5292              		.loc 1 3140 14
 5293 005a FB60     		str	r3, [r7, #12]
3141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 5294              		.loc 1 3141 13
 5295 005c BB68     		ldr	r3, [r7, #8]
 5296 005e 93F83E30 		ldrb	r3, [r3, #62]
 5297 0062 DBB2     		uxtb	r3, r3
 5298              		.loc 1 3141 6
 5299 0064 222B     		cmp	r3, #34
 5300 0066 08D1     		bne	.L242
 5301              		.loc 1 3141 50 discriminator 1
 5302 0068 FB68     		ldr	r3, [r7, #12]
 5303 006a 002B     		cmp	r3, #0
 5304 006c 05D0     		beq	.L242
3142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5305              		.loc 1 3143 24
 5306 006e BB68     		ldr	r3, [r7, #8]
 5307 0070 0022     		movs	r2, #0
 5308 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 5309              		.loc 1 3144 5
 5310 0074 B868     		ldr	r0, [r7, #8]
 5311 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 5312              	.L242:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 148


3145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 5313              		.loc 1 3147 20
 5314 007a BB68     		ldr	r3, [r7, #8]
 5315 007c 1B6C     		ldr	r3, [r3, #64]
 5316 007e 43F01002 		orr	r2, r3, #16
 5317 0082 BB68     		ldr	r3, [r7, #8]
 5318 0084 1A64     		str	r2, [r3, #64]
3148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5319              		.loc 1 3153 3
 5320 0086 B868     		ldr	r0, [r7, #8]
 5321 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5322              		.loc 1 3155 1
 5323 008c 00BF     		nop
 5324 008e 1037     		adds	r7, r7, #16
 5325              		.cfi_def_cfa_offset 8
 5326 0090 BD46     		mov	sp, r7
 5327              		.cfi_def_cfa_register 13
 5328              		@ sp needed
 5329 0092 80BD     		pop	{r7, pc}
 5330              		.cfi_endproc
 5331              	.LFE111:
 5333              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5334              		.align	1
 5335              		.syntax unified
 5336              		.thumb
 5337              		.thumb_func
 5338              		.fpu softvfp
 5340              	UART_WaitOnFlagUntilTimeout:
 5341              	.LFB112:
3156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
3159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
3163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
3164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
3165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5342              		.loc 1 3168 1
 5343              		.cfi_startproc
 5344              		@ args = 4, pretend = 0, frame = 16
 5345              		@ frame_needed = 1, uses_anonymous_args = 0
 5346 0000 80B5     		push	{r7, lr}
 5347              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 149


 5348              		.cfi_offset 7, -8
 5349              		.cfi_offset 14, -4
 5350 0002 84B0     		sub	sp, sp, #16
 5351              		.cfi_def_cfa_offset 24
 5352 0004 00AF     		add	r7, sp, #0
 5353              		.cfi_def_cfa_register 7
 5354 0006 F860     		str	r0, [r7, #12]
 5355 0008 B960     		str	r1, [r7, #8]
 5356 000a 3B60     		str	r3, [r7]
 5357 000c 1346     		mov	r3, r2
 5358 000e FB71     		strb	r3, [r7, #7]
3169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
3170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5359              		.loc 1 3170 9
 5360 0010 2CE0     		b	.L244
 5361              	.L247:
3171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
3173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 5362              		.loc 1 3173 8
 5363 0012 BB69     		ldr	r3, [r7, #24]
 5364 0014 B3F1FF3F 		cmp	r3, #-1
 5365 0018 28D0     		beq	.L244
3174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 5366              		.loc 1 3175 10
 5367 001a BB69     		ldr	r3, [r7, #24]
 5368 001c 002B     		cmp	r3, #0
 5369 001e 07D0     		beq	.L245
 5370              		.loc 1 3175 32 discriminator 1
 5371 0020 FFF7FEFF 		bl	HAL_GetTick
 5372 0024 0246     		mov	r2, r0
 5373              		.loc 1 3175 46 discriminator 1
 5374 0026 3B68     		ldr	r3, [r7]
 5375 0028 D31A     		subs	r3, r2, r3
 5376              		.loc 1 3175 27 discriminator 1
 5377 002a BA69     		ldr	r2, [r7, #24]
 5378 002c 9A42     		cmp	r2, r3
 5379 002e 1DD2     		bcs	.L244
 5380              	.L245:
3176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5381              		.loc 1 3178 9
 5382 0030 FB68     		ldr	r3, [r7, #12]
 5383 0032 1B68     		ldr	r3, [r3]
 5384 0034 DA68     		ldr	r2, [r3, #12]
 5385 0036 FB68     		ldr	r3, [r7, #12]
 5386 0038 1B68     		ldr	r3, [r3]
 5387 003a 22F4D072 		bic	r2, r2, #416
 5388 003e DA60     		str	r2, [r3, #12]
3179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5389              		.loc 1 3179 9
 5390 0040 FB68     		ldr	r3, [r7, #12]
 5391 0042 1B68     		ldr	r3, [r3]
 5392 0044 5A69     		ldr	r2, [r3, #20]
 5393 0046 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 150


 5394 0048 1B68     		ldr	r3, [r3]
 5395 004a 22F00102 		bic	r2, r2, #1
 5396 004e 5A61     		str	r2, [r3, #20]
3180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 5397              		.loc 1 3181 24
 5398 0050 FB68     		ldr	r3, [r7, #12]
 5399 0052 2022     		movs	r2, #32
 5400 0054 83F83D20 		strb	r2, [r3, #61]
3182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5401              		.loc 1 3182 24
 5402 0058 FB68     		ldr	r3, [r7, #12]
 5403 005a 2022     		movs	r2, #32
 5404 005c 83F83E20 		strb	r2, [r3, #62]
3183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
3185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 5405              		.loc 1 3185 9
 5406 0060 FB68     		ldr	r3, [r7, #12]
 5407 0062 0022     		movs	r2, #0
 5408 0064 83F83C20 		strb	r2, [r3, #60]
3186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 5409              		.loc 1 3187 16
 5410 0068 0323     		movs	r3, #3
 5411 006a 0FE0     		b	.L246
 5412              	.L244:
3170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5413              		.loc 1 3170 11
 5414 006c FB68     		ldr	r3, [r7, #12]
 5415 006e 1B68     		ldr	r3, [r3]
 5416 0070 1A68     		ldr	r2, [r3]
 5417 0072 BB68     		ldr	r3, [r7, #8]
 5418 0074 1340     		ands	r3, r3, r2
3170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5419              		.loc 1 3170 50
 5420 0076 BA68     		ldr	r2, [r7, #8]
 5421 0078 9A42     		cmp	r2, r3
 5422 007a 0CBF     		ite	eq
 5423 007c 0123     		moveq	r3, #1
 5424 007e 0023     		movne	r3, #0
 5425 0080 DBB2     		uxtb	r3, r3
 5426 0082 1A46     		mov	r2, r3
3170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5427              		.loc 1 3170 59
 5428 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5429              		.loc 1 3170 9
 5430 0086 9A42     		cmp	r2, r3
 5431 0088 C3D0     		beq	.L247
3188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5432              		.loc 1 3191 10
 5433 008a 0023     		movs	r3, #0
 5434              	.L246:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 151


3192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5435              		.loc 1 3192 1
 5436 008c 1846     		mov	r0, r3
 5437 008e 1037     		adds	r7, r7, #16
 5438              		.cfi_def_cfa_offset 8
 5439 0090 BD46     		mov	sp, r7
 5440              		.cfi_def_cfa_register 13
 5441              		@ sp needed
 5442 0092 80BD     		pop	{r7, pc}
 5443              		.cfi_endproc
 5444              	.LFE112:
 5446              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 5447              		.align	1
 5448              		.global	UART_Start_Receive_IT
 5449              		.syntax unified
 5450              		.thumb
 5451              		.thumb_func
 5452              		.fpu softvfp
 5454              	UART_Start_Receive_IT:
 5455              	.LFB113:
3193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5456              		.loc 1 3206 1
 5457              		.cfi_startproc
 5458              		@ args = 0, pretend = 0, frame = 16
 5459              		@ frame_needed = 1, uses_anonymous_args = 0
 5460              		@ link register save eliminated.
 5461 0000 80B4     		push	{r7}
 5462              		.cfi_def_cfa_offset 4
 5463              		.cfi_offset 7, -4
 5464 0002 85B0     		sub	sp, sp, #20
 5465              		.cfi_def_cfa_offset 24
 5466 0004 00AF     		add	r7, sp, #0
 5467              		.cfi_def_cfa_register 7
 5468 0006 F860     		str	r0, [r7, #12]
 5469 0008 B960     		str	r1, [r7, #8]
 5470 000a 1346     		mov	r3, r2
 5471 000c FB80     		strh	r3, [r7, #6]	@ movhi
3207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5472              		.loc 1 3207 21
 5473 000e FB68     		ldr	r3, [r7, #12]
 5474 0010 BA68     		ldr	r2, [r7, #8]
 5475 0012 9A62     		str	r2, [r3, #40]
3208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5476              		.loc 1 3208 21
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 152


 5477 0014 FB68     		ldr	r3, [r7, #12]
 5478 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5479 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = Size;
 5480              		.loc 1 3209 22
 5481 001a FB68     		ldr	r3, [r7, #12]
 5482 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 5483 001e DA85     		strh	r2, [r3, #46]	@ movhi
3210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5484              		.loc 1 3211 20
 5485 0020 FB68     		ldr	r3, [r7, #12]
 5486 0022 0022     		movs	r2, #0
 5487 0024 1A64     		str	r2, [r3, #64]
3212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5488              		.loc 1 3212 18
 5489 0026 FB68     		ldr	r3, [r7, #12]
 5490 0028 2222     		movs	r2, #34
 5491 002a 83F83E20 		strb	r2, [r3, #62]
3213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5492              		.loc 1 3215 3
 5493 002e FB68     		ldr	r3, [r7, #12]
 5494 0030 0022     		movs	r2, #0
 5495 0032 83F83C20 		strb	r2, [r3, #60]
3216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 5496              		.loc 1 3218 3
 5497 0036 FB68     		ldr	r3, [r7, #12]
 5498 0038 1B68     		ldr	r3, [r3]
 5499 003a DA68     		ldr	r2, [r3, #12]
 5500 003c FB68     		ldr	r3, [r7, #12]
 5501 003e 1B68     		ldr	r3, [r3]
 5502 0040 42F48072 		orr	r2, r2, #256
 5503 0044 DA60     		str	r2, [r3, #12]
3219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 5504              		.loc 1 3221 3
 5505 0046 FB68     		ldr	r3, [r7, #12]
 5506 0048 1B68     		ldr	r3, [r3]
 5507 004a 5A69     		ldr	r2, [r3, #20]
 5508 004c FB68     		ldr	r3, [r7, #12]
 5509 004e 1B68     		ldr	r3, [r3]
 5510 0050 42F00102 		orr	r2, r2, #1
 5511 0054 5A61     		str	r2, [r3, #20]
3222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 5512              		.loc 1 3224 3
 5513 0056 FB68     		ldr	r3, [r7, #12]
 5514 0058 1B68     		ldr	r3, [r3]
 5515 005a DA68     		ldr	r2, [r3, #12]
 5516 005c FB68     		ldr	r3, [r7, #12]
 5517 005e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 153


 5518 0060 42F02002 		orr	r2, r2, #32
 5519 0064 DA60     		str	r2, [r3, #12]
3225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5520              		.loc 1 3226 10
 5521 0066 0023     		movs	r3, #0
3227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5522              		.loc 1 3227 1
 5523 0068 1846     		mov	r0, r3
 5524 006a 1437     		adds	r7, r7, #20
 5525              		.cfi_def_cfa_offset 4
 5526 006c BD46     		mov	sp, r7
 5527              		.cfi_def_cfa_register 13
 5528              		@ sp needed
 5529 006e 80BC     		pop	{r7}
 5530              		.cfi_restore 7
 5531              		.cfi_def_cfa_offset 0
 5532 0070 7047     		bx	lr
 5533              		.cfi_endproc
 5534              	.LFE113:
 5536              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 5537              		.align	1
 5538              		.global	UART_Start_Receive_DMA
 5539              		.syntax unified
 5540              		.thumb
 5541              		.thumb_func
 5542              		.fpu softvfp
 5544              	UART_Start_Receive_DMA:
 5545              	.LFB114:
3228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5546              		.loc 1 3241 1
 5547              		.cfi_startproc
 5548              		@ args = 0, pretend = 0, frame = 24
 5549              		@ frame_needed = 1, uses_anonymous_args = 0
 5550 0000 80B5     		push	{r7, lr}
 5551              		.cfi_def_cfa_offset 8
 5552              		.cfi_offset 7, -8
 5553              		.cfi_offset 14, -4
 5554 0002 86B0     		sub	sp, sp, #24
 5555              		.cfi_def_cfa_offset 32
 5556 0004 00AF     		add	r7, sp, #0
 5557              		.cfi_def_cfa_register 7
 5558 0006 F860     		str	r0, [r7, #12]
 5559 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 154


 5560 000a 1346     		mov	r3, r2
 5561 000c FB80     		strh	r3, [r7, #6]	@ movhi
3242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
3243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5562              		.loc 1 3244 21
 5563 000e BA68     		ldr	r2, [r7, #8]
 5564 0010 FB68     		ldr	r3, [r7, #12]
 5565 0012 9A62     		str	r2, [r3, #40]
3245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5566              		.loc 1 3245 21
 5567 0014 FB68     		ldr	r3, [r7, #12]
 5568 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5569 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5570              		.loc 1 3247 20
 5571 001a FB68     		ldr	r3, [r7, #12]
 5572 001c 0022     		movs	r2, #0
 5573 001e 1A64     		str	r2, [r3, #64]
3248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5574              		.loc 1 3248 18
 5575 0020 FB68     		ldr	r3, [r7, #12]
 5576 0022 2222     		movs	r2, #34
 5577 0024 83F83E20 		strb	r2, [r3, #62]
3249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 5578              		.loc 1 3251 8
 5579 0028 FB68     		ldr	r3, [r7, #12]
 5580 002a 9B6B     		ldr	r3, [r3, #56]
 5581              		.loc 1 3251 35
 5582 002c 234A     		ldr	r2, .L252
 5583 002e 9A62     		str	r2, [r3, #40]
3252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 5584              		.loc 1 3254 8
 5585 0030 FB68     		ldr	r3, [r7, #12]
 5586 0032 9B6B     		ldr	r3, [r3, #56]
 5587              		.loc 1 3254 39
 5588 0034 224A     		ldr	r2, .L252+4
 5589 0036 DA62     		str	r2, [r3, #44]
3255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA error callback */
3257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 5590              		.loc 1 3257 8
 5591 0038 FB68     		ldr	r3, [r7, #12]
 5592 003a 9B6B     		ldr	r3, [r3, #56]
 5593              		.loc 1 3257 36
 5594 003c 214A     		ldr	r2, .L252+8
 5595 003e 1A63     		str	r2, [r3, #48]
3258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA abort callback */
3260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 5596              		.loc 1 3260 8
 5597 0040 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 155


 5598 0042 9B6B     		ldr	r3, [r3, #56]
 5599              		.loc 1 3260 36
 5600 0044 0022     		movs	r2, #0
 5601 0046 5A63     		str	r2, [r3, #52]
3261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA stream */
3263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
 5602              		.loc 1 3263 7
 5603 0048 07F10803 		add	r3, r7, #8
 5604 004c 7B61     		str	r3, [r7, #20]
3264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 5605              		.loc 1 3264 3
 5606 004e FB68     		ldr	r3, [r7, #12]
 5607 0050 986B     		ldr	r0, [r3, #56]
 5608              		.loc 1 3264 51
 5609 0052 FB68     		ldr	r3, [r7, #12]
 5610 0054 1B68     		ldr	r3, [r3]
 5611              		.loc 1 3264 45
 5612 0056 0433     		adds	r3, r3, #4
 5613              		.loc 1 3264 3
 5614 0058 1946     		mov	r1, r3
 5615 005a 7B69     		ldr	r3, [r7, #20]
 5616 005c 1A68     		ldr	r2, [r3]
 5617 005e FB88     		ldrh	r3, [r7, #6]
 5618 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5619              	.LBB11:
3265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 5620              		.loc 1 3267 3
 5621 0064 0023     		movs	r3, #0
 5622 0066 3B61     		str	r3, [r7, #16]
 5623 0068 FB68     		ldr	r3, [r7, #12]
 5624 006a 1B68     		ldr	r3, [r3]
 5625 006c 1B68     		ldr	r3, [r3]
 5626 006e 3B61     		str	r3, [r7, #16]
 5627 0070 FB68     		ldr	r3, [r7, #12]
 5628 0072 1B68     		ldr	r3, [r3]
 5629 0074 5B68     		ldr	r3, [r3, #4]
 5630 0076 3B61     		str	r3, [r7, #16]
 5631 0078 3B69     		ldr	r3, [r7, #16]
 5632              	.LBE11:
3268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5633              		.loc 1 3270 3
 5634 007a FB68     		ldr	r3, [r7, #12]
 5635 007c 0022     		movs	r2, #0
 5636 007e 83F83C20 		strb	r2, [r3, #60]
3271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5637              		.loc 1 3273 3
 5638 0082 FB68     		ldr	r3, [r7, #12]
 5639 0084 1B68     		ldr	r3, [r3]
 5640 0086 DA68     		ldr	r2, [r3, #12]
 5641 0088 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 156


 5642 008a 1B68     		ldr	r3, [r3]
 5643 008c 42F48072 		orr	r2, r2, #256
 5644 0090 DA60     		str	r2, [r3, #12]
3274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5645              		.loc 1 3276 3
 5646 0092 FB68     		ldr	r3, [r7, #12]
 5647 0094 1B68     		ldr	r3, [r3]
 5648 0096 5A69     		ldr	r2, [r3, #20]
 5649 0098 FB68     		ldr	r3, [r7, #12]
 5650 009a 1B68     		ldr	r3, [r3]
 5651 009c 42F00102 		orr	r2, r2, #1
 5652 00a0 5A61     		str	r2, [r3, #20]
3277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   in the UART CR3 register */
3280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5653              		.loc 1 3280 3
 5654 00a2 FB68     		ldr	r3, [r7, #12]
 5655 00a4 1B68     		ldr	r3, [r3]
 5656 00a6 5A69     		ldr	r2, [r3, #20]
 5657 00a8 FB68     		ldr	r3, [r7, #12]
 5658 00aa 1B68     		ldr	r3, [r3]
 5659 00ac 42F04002 		orr	r2, r2, #64
 5660 00b0 5A61     		str	r2, [r3, #20]
3281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5661              		.loc 1 3282 10
 5662 00b2 0023     		movs	r3, #0
3283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5663              		.loc 1 3283 1
 5664 00b4 1846     		mov	r0, r3
 5665 00b6 1837     		adds	r7, r7, #24
 5666              		.cfi_def_cfa_offset 8
 5667 00b8 BD46     		mov	sp, r7
 5668              		.cfi_def_cfa_register 13
 5669              		@ sp needed
 5670 00ba 80BD     		pop	{r7, pc}
 5671              	.L253:
 5672              		.align	2
 5673              	.L252:
 5674 00bc 00000000 		.word	UART_DMAReceiveCplt
 5675 00c0 00000000 		.word	UART_DMARxHalfCplt
 5676 00c4 00000000 		.word	UART_DMAError
 5677              		.cfi_endproc
 5678              	.LFE114:
 5680              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 5681              		.align	1
 5682              		.syntax unified
 5683              		.thumb
 5684              		.thumb_func
 5685              		.fpu softvfp
 5687              	UART_EndTxTransfer:
 5688              	.LFB115:
3284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 157


3286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5689              		.loc 1 3291 1
 5690              		.cfi_startproc
 5691              		@ args = 0, pretend = 0, frame = 8
 5692              		@ frame_needed = 1, uses_anonymous_args = 0
 5693              		@ link register save eliminated.
 5694 0000 80B4     		push	{r7}
 5695              		.cfi_def_cfa_offset 4
 5696              		.cfi_offset 7, -4
 5697 0002 83B0     		sub	sp, sp, #12
 5698              		.cfi_def_cfa_offset 16
 5699 0004 00AF     		add	r7, sp, #0
 5700              		.cfi_def_cfa_register 7
 5701 0006 7860     		str	r0, [r7, #4]
3292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5702              		.loc 1 3293 3
 5703 0008 7B68     		ldr	r3, [r7, #4]
 5704 000a 1B68     		ldr	r3, [r3]
 5705 000c DA68     		ldr	r2, [r3, #12]
 5706 000e 7B68     		ldr	r3, [r7, #4]
 5707 0010 1B68     		ldr	r3, [r3]
 5708 0012 22F0C002 		bic	r2, r2, #192
 5709 0016 DA60     		str	r2, [r3, #12]
3294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5710              		.loc 1 3296 17
 5711 0018 7B68     		ldr	r3, [r7, #4]
 5712 001a 2022     		movs	r2, #32
 5713 001c 83F83D20 		strb	r2, [r3, #61]
3297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5714              		.loc 1 3297 1
 5715 0020 00BF     		nop
 5716 0022 0C37     		adds	r7, r7, #12
 5717              		.cfi_def_cfa_offset 4
 5718 0024 BD46     		mov	sp, r7
 5719              		.cfi_def_cfa_register 13
 5720              		@ sp needed
 5721 0026 80BC     		pop	{r7}
 5722              		.cfi_restore 7
 5723              		.cfi_def_cfa_offset 0
 5724 0028 7047     		bx	lr
 5725              		.cfi_endproc
 5726              	.LFE115:
 5728              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 5729              		.align	1
 5730              		.syntax unified
 5731              		.thumb
 5732              		.thumb_func
 5733              		.fpu softvfp
 5735              	UART_EndRxTransfer:
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 158


 5736              	.LFB116:
3298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5737              		.loc 1 3305 1
 5738              		.cfi_startproc
 5739              		@ args = 0, pretend = 0, frame = 8
 5740              		@ frame_needed = 1, uses_anonymous_args = 0
 5741              		@ link register save eliminated.
 5742 0000 80B4     		push	{r7}
 5743              		.cfi_def_cfa_offset 4
 5744              		.cfi_offset 7, -4
 5745 0002 83B0     		sub	sp, sp, #12
 5746              		.cfi_def_cfa_offset 16
 5747 0004 00AF     		add	r7, sp, #0
 5748              		.cfi_def_cfa_register 7
 5749 0006 7860     		str	r0, [r7, #4]
3306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5750              		.loc 1 3307 3
 5751 0008 7B68     		ldr	r3, [r7, #4]
 5752 000a 1B68     		ldr	r3, [r3]
 5753 000c DA68     		ldr	r2, [r3, #12]
 5754 000e 7B68     		ldr	r3, [r7, #4]
 5755 0010 1B68     		ldr	r3, [r3]
 5756 0012 22F49072 		bic	r2, r2, #288
 5757 0016 DA60     		str	r2, [r3, #12]
3308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5758              		.loc 1 3308 3
 5759 0018 7B68     		ldr	r3, [r7, #4]
 5760 001a 1B68     		ldr	r3, [r3]
 5761 001c 5A69     		ldr	r2, [r3, #20]
 5762 001e 7B68     		ldr	r3, [r7, #4]
 5763 0020 1B68     		ldr	r3, [r3]
 5764 0022 22F00102 		bic	r2, r2, #1
 5765 0026 5A61     		str	r2, [r3, #20]
3309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5766              		.loc 1 3311 12
 5767 0028 7B68     		ldr	r3, [r7, #4]
 5768 002a 1B6B     		ldr	r3, [r3, #48]
 5769              		.loc 1 3311 6
 5770 002c 012B     		cmp	r3, #1
 5771 002e 07D1     		bne	.L256
3312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5772              		.loc 1 3313 5
 5773 0030 7B68     		ldr	r3, [r7, #4]
 5774 0032 1B68     		ldr	r3, [r3]
 5775 0034 DA68     		ldr	r2, [r3, #12]
 5776 0036 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 159


 5777 0038 1B68     		ldr	r3, [r3]
 5778 003a 22F01002 		bic	r2, r2, #16
 5779 003e DA60     		str	r2, [r3, #12]
 5780              	.L256:
3314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5781              		.loc 1 3317 18
 5782 0040 7B68     		ldr	r3, [r7, #4]
 5783 0042 2022     		movs	r2, #32
 5784 0044 83F83E20 		strb	r2, [r3, #62]
3318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5785              		.loc 1 3318 24
 5786 0048 7B68     		ldr	r3, [r7, #4]
 5787 004a 0022     		movs	r2, #0
 5788 004c 1A63     		str	r2, [r3, #48]
3319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5789              		.loc 1 3319 1
 5790 004e 00BF     		nop
 5791 0050 0C37     		adds	r7, r7, #12
 5792              		.cfi_def_cfa_offset 4
 5793 0052 BD46     		mov	sp, r7
 5794              		.cfi_def_cfa_register 13
 5795              		@ sp needed
 5796 0054 80BC     		pop	{r7}
 5797              		.cfi_restore 7
 5798              		.cfi_def_cfa_offset 0
 5799 0056 7047     		bx	lr
 5800              		.cfi_endproc
 5801              	.LFE116:
 5803              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 5804              		.align	1
 5805              		.syntax unified
 5806              		.thumb
 5807              		.thumb_func
 5808              		.fpu softvfp
 5810              	UART_DMAAbortOnError:
 5811              	.LFB117:
3320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5812              		.loc 1 3329 1
 5813              		.cfi_startproc
 5814              		@ args = 0, pretend = 0, frame = 16
 5815              		@ frame_needed = 1, uses_anonymous_args = 0
 5816 0000 80B5     		push	{r7, lr}
 5817              		.cfi_def_cfa_offset 8
 5818              		.cfi_offset 7, -8
 5819              		.cfi_offset 14, -4
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 160


 5820 0002 84B0     		sub	sp, sp, #16
 5821              		.cfi_def_cfa_offset 24
 5822 0004 00AF     		add	r7, sp, #0
 5823              		.cfi_def_cfa_register 7
 5824 0006 7860     		str	r0, [r7, #4]
3330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5825              		.loc 1 3330 23
 5826 0008 7B68     		ldr	r3, [r7, #4]
 5827 000a 5B6A     		ldr	r3, [r3, #36]
 5828 000c FB60     		str	r3, [r7, #12]
3331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5829              		.loc 1 3331 22
 5830 000e FB68     		ldr	r3, [r7, #12]
 5831 0010 0022     		movs	r2, #0
 5832 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 5833              		.loc 1 3332 22
 5834 0014 FB68     		ldr	r3, [r7, #12]
 5835 0016 0022     		movs	r2, #0
 5836 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5837              		.loc 1 3339 3
 5838 001a F868     		ldr	r0, [r7, #12]
 5839 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5840              		.loc 1 3341 1
 5841 0020 00BF     		nop
 5842 0022 1037     		adds	r7, r7, #16
 5843              		.cfi_def_cfa_offset 8
 5844 0024 BD46     		mov	sp, r7
 5845              		.cfi_def_cfa_register 13
 5846              		@ sp needed
 5847 0026 80BD     		pop	{r7, pc}
 5848              		.cfi_endproc
 5849              	.LFE117:
 5851              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 5852              		.align	1
 5853              		.syntax unified
 5854              		.thumb
 5855              		.thumb_func
 5856              		.fpu softvfp
 5858              	UART_DMATxAbortCallback:
 5859              	.LFB118:
3342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 161


3349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5860              		.loc 1 3353 1
 5861              		.cfi_startproc
 5862              		@ args = 0, pretend = 0, frame = 16
 5863              		@ frame_needed = 1, uses_anonymous_args = 0
 5864 0000 80B5     		push	{r7, lr}
 5865              		.cfi_def_cfa_offset 8
 5866              		.cfi_offset 7, -8
 5867              		.cfi_offset 14, -4
 5868 0002 84B0     		sub	sp, sp, #16
 5869              		.cfi_def_cfa_offset 24
 5870 0004 00AF     		add	r7, sp, #0
 5871              		.cfi_def_cfa_register 7
 5872 0006 7860     		str	r0, [r7, #4]
3354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5873              		.loc 1 3354 23
 5874 0008 7B68     		ldr	r3, [r7, #4]
 5875 000a 5B6A     		ldr	r3, [r3, #36]
 5876 000c FB60     		str	r3, [r7, #12]
3355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 5877              		.loc 1 3356 8
 5878 000e FB68     		ldr	r3, [r7, #12]
 5879 0010 5B6B     		ldr	r3, [r3, #52]
 5880              		.loc 1 3356 36
 5881 0012 0022     		movs	r2, #0
 5882 0014 5A63     		str	r2, [r3, #52]
3357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 5883              		.loc 1 3359 12
 5884 0016 FB68     		ldr	r3, [r7, #12]
 5885 0018 9B6B     		ldr	r3, [r3, #56]
 5886              		.loc 1 3359 6
 5887 001a 002B     		cmp	r3, #0
 5888 001c 04D0     		beq	.L259
3360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 5889              		.loc 1 3361 14
 5890 001e FB68     		ldr	r3, [r7, #12]
 5891 0020 9B6B     		ldr	r3, [r3, #56]
 5892              		.loc 1 3361 22
 5893 0022 5B6B     		ldr	r3, [r3, #52]
 5894              		.loc 1 3361 8
 5895 0024 002B     		cmp	r3, #0
 5896 0026 17D1     		bne	.L261
 5897              	.L259:
3362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 162


3368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 5898              		.loc 1 3368 22
 5899 0028 FB68     		ldr	r3, [r7, #12]
 5900 002a 0022     		movs	r2, #0
 5901 002c DA84     		strh	r2, [r3, #38]	@ movhi
3369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5902              		.loc 1 3369 22
 5903 002e FB68     		ldr	r3, [r7, #12]
 5904 0030 0022     		movs	r2, #0
 5905 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5906              		.loc 1 3372 20
 5907 0034 FB68     		ldr	r3, [r7, #12]
 5908 0036 0022     		movs	r2, #0
 5909 0038 1A64     		str	r2, [r3, #64]
3373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 5910              		.loc 1 3375 18
 5911 003a FB68     		ldr	r3, [r7, #12]
 5912 003c 2022     		movs	r2, #32
 5913 003e 83F83D20 		strb	r2, [r3, #61]
3376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5914              		.loc 1 3376 18
 5915 0042 FB68     		ldr	r3, [r7, #12]
 5916 0044 2022     		movs	r2, #32
 5917 0046 83F83E20 		strb	r2, [r3, #62]
3377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5918              		.loc 1 3377 24
 5919 004a FB68     		ldr	r3, [r7, #12]
 5920 004c 0022     		movs	r2, #0
 5921 004e 1A63     		str	r2, [r3, #48]
3378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 5922              		.loc 1 3385 3
 5923 0050 F868     		ldr	r0, [r7, #12]
 5924 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 5925 0056 00E0     		b	.L258
 5926              	.L261:
3363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5927              		.loc 1 3363 7
 5928 0058 00BF     		nop
 5929              	.L258:
3386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5930              		.loc 1 3387 1
 5931 005a 1037     		adds	r7, r7, #16
 5932              		.cfi_def_cfa_offset 8
 5933 005c BD46     		mov	sp, r7
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 163


 5934              		.cfi_def_cfa_register 13
 5935              		@ sp needed
 5936 005e 80BD     		pop	{r7, pc}
 5937              		.cfi_endproc
 5938              	.LFE118:
 5940              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 5941              		.align	1
 5942              		.syntax unified
 5943              		.thumb
 5944              		.thumb_func
 5945              		.fpu softvfp
 5947              	UART_DMARxAbortCallback:
 5948              	.LFB119:
3388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5949              		.loc 1 3399 1
 5950              		.cfi_startproc
 5951              		@ args = 0, pretend = 0, frame = 16
 5952              		@ frame_needed = 1, uses_anonymous_args = 0
 5953 0000 80B5     		push	{r7, lr}
 5954              		.cfi_def_cfa_offset 8
 5955              		.cfi_offset 7, -8
 5956              		.cfi_offset 14, -4
 5957 0002 84B0     		sub	sp, sp, #16
 5958              		.cfi_def_cfa_offset 24
 5959 0004 00AF     		add	r7, sp, #0
 5960              		.cfi_def_cfa_register 7
 5961 0006 7860     		str	r0, [r7, #4]
3400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5962              		.loc 1 3400 23
 5963 0008 7B68     		ldr	r3, [r7, #4]
 5964 000a 5B6A     		ldr	r3, [r3, #36]
 5965 000c FB60     		str	r3, [r7, #12]
3401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 5966              		.loc 1 3402 8
 5967 000e FB68     		ldr	r3, [r7, #12]
 5968 0010 9B6B     		ldr	r3, [r3, #56]
 5969              		.loc 1 3402 36
 5970 0012 0022     		movs	r2, #0
 5971 0014 5A63     		str	r2, [r3, #52]
3403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 5972              		.loc 1 3405 12
 5973 0016 FB68     		ldr	r3, [r7, #12]
 5974 0018 5B6B     		ldr	r3, [r3, #52]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 164


 5975              		.loc 1 3405 6
 5976 001a 002B     		cmp	r3, #0
 5977 001c 04D0     		beq	.L263
3406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 5978              		.loc 1 3407 14
 5979 001e FB68     		ldr	r3, [r7, #12]
 5980 0020 5B6B     		ldr	r3, [r3, #52]
 5981              		.loc 1 3407 22
 5982 0022 5B6B     		ldr	r3, [r3, #52]
 5983              		.loc 1 3407 8
 5984 0024 002B     		cmp	r3, #0
 5985 0026 17D1     		bne	.L265
 5986              	.L263:
3408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 5987              		.loc 1 3414 22
 5988 0028 FB68     		ldr	r3, [r7, #12]
 5989 002a 0022     		movs	r2, #0
 5990 002c DA84     		strh	r2, [r3, #38]	@ movhi
3415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5991              		.loc 1 3415 22
 5992 002e FB68     		ldr	r3, [r7, #12]
 5993 0030 0022     		movs	r2, #0
 5994 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5995              		.loc 1 3418 20
 5996 0034 FB68     		ldr	r3, [r7, #12]
 5997 0036 0022     		movs	r2, #0
 5998 0038 1A64     		str	r2, [r3, #64]
3419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 5999              		.loc 1 3421 18
 6000 003a FB68     		ldr	r3, [r7, #12]
 6001 003c 2022     		movs	r2, #32
 6002 003e 83F83D20 		strb	r2, [r3, #61]
3422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6003              		.loc 1 3422 18
 6004 0042 FB68     		ldr	r3, [r7, #12]
 6005 0044 2022     		movs	r2, #32
 6006 0046 83F83E20 		strb	r2, [r3, #62]
3423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6007              		.loc 1 3423 24
 6008 004a FB68     		ldr	r3, [r7, #12]
 6009 004c 0022     		movs	r2, #0
 6010 004e 1A63     		str	r2, [r3, #48]
3424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 165


3427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6011              		.loc 1 3431 3
 6012 0050 F868     		ldr	r0, [r7, #12]
 6013 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6014 0056 00E0     		b	.L262
 6015              	.L265:
3409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 6016              		.loc 1 3409 7
 6017 0058 00BF     		nop
 6018              	.L262:
3432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6019              		.loc 1 3433 1
 6020 005a 1037     		adds	r7, r7, #16
 6021              		.cfi_def_cfa_offset 8
 6022 005c BD46     		mov	sp, r7
 6023              		.cfi_def_cfa_register 13
 6024              		@ sp needed
 6025 005e 80BD     		pop	{r7, pc}
 6026              		.cfi_endproc
 6027              	.LFE119:
 6029              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 6030              		.align	1
 6031              		.syntax unified
 6032              		.thumb
 6033              		.thumb_func
 6034              		.fpu softvfp
 6036              	UART_DMATxOnlyAbortCallback:
 6037              	.LFB120:
3434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6038              		.loc 1 3445 1
 6039              		.cfi_startproc
 6040              		@ args = 0, pretend = 0, frame = 16
 6041              		@ frame_needed = 1, uses_anonymous_args = 0
 6042 0000 80B5     		push	{r7, lr}
 6043              		.cfi_def_cfa_offset 8
 6044              		.cfi_offset 7, -8
 6045              		.cfi_offset 14, -4
 6046 0002 84B0     		sub	sp, sp, #16
 6047              		.cfi_def_cfa_offset 24
 6048 0004 00AF     		add	r7, sp, #0
 6049              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 166


 6050 0006 7860     		str	r0, [r7, #4]
3446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6051              		.loc 1 3446 23
 6052 0008 7B68     		ldr	r3, [r7, #4]
 6053 000a 5B6A     		ldr	r3, [r3, #36]
 6054 000c FB60     		str	r3, [r7, #12]
3447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6055              		.loc 1 3448 22
 6056 000e FB68     		ldr	r3, [r7, #12]
 6057 0010 0022     		movs	r2, #0
 6058 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6059              		.loc 1 3451 17
 6060 0014 FB68     		ldr	r3, [r7, #12]
 6061 0016 2022     		movs	r2, #32
 6062 0018 83F83D20 		strb	r2, [r3, #61]
3452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 6063              		.loc 1 3459 3
 6064 001c F868     		ldr	r0, [r7, #12]
 6065 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6066              		.loc 1 3461 1
 6067 0022 00BF     		nop
 6068 0024 1037     		adds	r7, r7, #16
 6069              		.cfi_def_cfa_offset 8
 6070 0026 BD46     		mov	sp, r7
 6071              		.cfi_def_cfa_register 13
 6072              		@ sp needed
 6073 0028 80BD     		pop	{r7, pc}
 6074              		.cfi_endproc
 6075              	.LFE120:
 6077              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 6078              		.align	1
 6079              		.syntax unified
 6080              		.thumb
 6081              		.thumb_func
 6082              		.fpu softvfp
 6084              	UART_DMARxOnlyAbortCallback:
 6085              	.LFB121:
3462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 167


3469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6086              		.loc 1 3473 1
 6087              		.cfi_startproc
 6088              		@ args = 0, pretend = 0, frame = 16
 6089              		@ frame_needed = 1, uses_anonymous_args = 0
 6090 0000 80B5     		push	{r7, lr}
 6091              		.cfi_def_cfa_offset 8
 6092              		.cfi_offset 7, -8
 6093              		.cfi_offset 14, -4
 6094 0002 84B0     		sub	sp, sp, #16
 6095              		.cfi_def_cfa_offset 24
 6096 0004 00AF     		add	r7, sp, #0
 6097              		.cfi_def_cfa_register 7
 6098 0006 7860     		str	r0, [r7, #4]
3474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6099              		.loc 1 3474 23
 6100 0008 7B68     		ldr	r3, [r7, #4]
 6101 000a 5B6A     		ldr	r3, [r3, #36]
 6102 000c FB60     		str	r3, [r7, #12]
3475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6103              		.loc 1 3476 22
 6104 000e FB68     		ldr	r3, [r7, #12]
 6105 0010 0022     		movs	r2, #0
 6106 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6107              		.loc 1 3479 18
 6108 0014 FB68     		ldr	r3, [r7, #12]
 6109 0016 2022     		movs	r2, #32
 6110 0018 83F83E20 		strb	r2, [r3, #62]
3480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6111              		.loc 1 3480 24
 6112 001c FB68     		ldr	r3, [r7, #12]
 6113 001e 0022     		movs	r2, #0
 6114 0020 1A63     		str	r2, [r3, #48]
3481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 6115              		.loc 1 3488 3
 6116 0022 F868     		ldr	r0, [r7, #12]
 6117 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6118              		.loc 1 3490 1
 6119 0028 00BF     		nop
 6120 002a 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 168


 6121              		.cfi_def_cfa_offset 8
 6122 002c BD46     		mov	sp, r7
 6123              		.cfi_def_cfa_register 13
 6124              		@ sp needed
 6125 002e 80BD     		pop	{r7, pc}
 6126              		.cfi_endproc
 6127              	.LFE121:
 6129              		.section	.text.UART_Transmit_IT,"ax",%progbits
 6130              		.align	1
 6131              		.syntax unified
 6132              		.thumb
 6133              		.thumb_func
 6134              		.fpu softvfp
 6136              	UART_Transmit_IT:
 6137              	.LFB122:
3491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
3499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6138              		.loc 1 3499 1
 6139              		.cfi_startproc
 6140              		@ args = 0, pretend = 0, frame = 16
 6141              		@ frame_needed = 1, uses_anonymous_args = 0
 6142              		@ link register save eliminated.
 6143 0000 80B4     		push	{r7}
 6144              		.cfi_def_cfa_offset 4
 6145              		.cfi_offset 7, -4
 6146 0002 85B0     		sub	sp, sp, #20
 6147              		.cfi_def_cfa_offset 24
 6148 0004 00AF     		add	r7, sp, #0
 6149              		.cfi_def_cfa_register 7
 6150 0006 7860     		str	r0, [r7, #4]
3500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
3501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 6151              		.loc 1 3503 12
 6152 0008 7B68     		ldr	r3, [r7, #4]
 6153 000a 93F83D30 		ldrb	r3, [r3, #61]
 6154 000e DBB2     		uxtb	r3, r3
 6155              		.loc 1 3503 6
 6156 0010 212B     		cmp	r3, #33
 6157 0012 3ED1     		bne	.L269
3504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6158              		.loc 1 3505 21
 6159 0014 7B68     		ldr	r3, [r7, #4]
 6160 0016 9B68     		ldr	r3, [r3, #8]
 6161              		.loc 1 3505 8
 6162 0018 B3F5805F 		cmp	r3, #4096
 6163 001c 14D1     		bne	.L270
 6164              		.loc 1 3505 71 discriminator 1
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 169


 6165 001e 7B68     		ldr	r3, [r7, #4]
 6166 0020 1B69     		ldr	r3, [r3, #16]
 6167              		.loc 1 3505 56 discriminator 1
 6168 0022 002B     		cmp	r3, #0
 6169 0024 10D1     		bne	.L270
3506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
 6170              		.loc 1 3507 11
 6171 0026 7B68     		ldr	r3, [r7, #4]
 6172 0028 1B6A     		ldr	r3, [r3, #32]
 6173 002a FB60     		str	r3, [r7, #12]
3508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 6174              		.loc 1 3508 40
 6175 002c FB68     		ldr	r3, [r7, #12]
 6176 002e 1B88     		ldrh	r3, [r3]
 6177              		.loc 1 3508 29
 6178 0030 1A46     		mov	r2, r3
 6179              		.loc 1 3508 12
 6180 0032 7B68     		ldr	r3, [r7, #4]
 6181 0034 1B68     		ldr	r3, [r3]
 6182              		.loc 1 3508 29
 6183 0036 C2F30802 		ubfx	r2, r2, #0, #9
 6184              		.loc 1 3508 27
 6185 003a 5A60     		str	r2, [r3, #4]
3509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6186              		.loc 1 3509 25
 6187 003c 7B68     		ldr	r3, [r7, #4]
 6188 003e 1B6A     		ldr	r3, [r3, #32]
 6189 0040 9A1C     		adds	r2, r3, #2
 6190 0042 7B68     		ldr	r3, [r7, #4]
 6191 0044 1A62     		str	r2, [r3, #32]
 6192 0046 08E0     		b	.L271
 6193              	.L270:
3510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 6194              		.loc 1 3513 45
 6195 0048 7B68     		ldr	r3, [r7, #4]
 6196 004a 1B6A     		ldr	r3, [r3, #32]
 6197              		.loc 1 3513 57
 6198 004c 591C     		adds	r1, r3, #1
 6199 004e 7A68     		ldr	r2, [r7, #4]
 6200 0050 1162     		str	r1, [r2, #32]
 6201              		.loc 1 3513 39
 6202 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6203              		.loc 1 3513 12
 6204 0054 7B68     		ldr	r3, [r7, #4]
 6205 0056 1B68     		ldr	r3, [r3]
 6206              		.loc 1 3513 27
 6207 0058 5A60     		str	r2, [r3, #4]
 6208              	.L271:
3514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 6209              		.loc 1 3516 16
 6210 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 170


 6211 005c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 6212 005e 9BB2     		uxth	r3, r3
 6213              		.loc 1 3516 9
 6214 0060 013B     		subs	r3, r3, #1
 6215 0062 9BB2     		uxth	r3, r3
 6216              		.loc 1 3516 8
 6217 0064 7A68     		ldr	r2, [r7, #4]
 6218 0066 1946     		mov	r1, r3	@ movhi
 6219 0068 D184     		strh	r1, [r2, #38]	@ movhi
 6220 006a 002B     		cmp	r3, #0
 6221 006c 0FD1     		bne	.L272
3517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
3519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 6222              		.loc 1 3519 7
 6223 006e 7B68     		ldr	r3, [r7, #4]
 6224 0070 1B68     		ldr	r3, [r3]
 6225 0072 DA68     		ldr	r2, [r3, #12]
 6226 0074 7B68     		ldr	r3, [r7, #4]
 6227 0076 1B68     		ldr	r3, [r3]
 6228 0078 22F08002 		bic	r2, r2, #128
 6229 007c DA60     		str	r2, [r3, #12]
3520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 6230              		.loc 1 3522 7
 6231 007e 7B68     		ldr	r3, [r7, #4]
 6232 0080 1B68     		ldr	r3, [r3]
 6233 0082 DA68     		ldr	r2, [r3, #12]
 6234 0084 7B68     		ldr	r3, [r7, #4]
 6235 0086 1B68     		ldr	r3, [r3]
 6236 0088 42F04002 		orr	r2, r2, #64
 6237 008c DA60     		str	r2, [r3, #12]
 6238              	.L272:
3523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6239              		.loc 1 3524 12
 6240 008e 0023     		movs	r3, #0
 6241 0090 00E0     		b	.L273
 6242              	.L269:
3525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 6243              		.loc 1 3528 12
 6244 0092 0223     		movs	r3, #2
 6245              	.L273:
3529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6246              		.loc 1 3530 1
 6247 0094 1846     		mov	r0, r3
 6248 0096 1437     		adds	r7, r7, #20
 6249              		.cfi_def_cfa_offset 4
 6250 0098 BD46     		mov	sp, r7
 6251              		.cfi_def_cfa_register 13
 6252              		@ sp needed
 6253 009a 80BC     		pop	{r7}
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 171


 6254              		.cfi_restore 7
 6255              		.cfi_def_cfa_offset 0
 6256 009c 7047     		bx	lr
 6257              		.cfi_endproc
 6258              	.LFE122:
 6260              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 6261              		.align	1
 6262              		.syntax unified
 6263              		.thumb
 6264              		.thumb_func
 6265              		.fpu softvfp
 6267              	UART_EndTransmit_IT:
 6268              	.LFB123:
3531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6269              		.loc 1 3539 1
 6270              		.cfi_startproc
 6271              		@ args = 0, pretend = 0, frame = 8
 6272              		@ frame_needed = 1, uses_anonymous_args = 0
 6273 0000 80B5     		push	{r7, lr}
 6274              		.cfi_def_cfa_offset 8
 6275              		.cfi_offset 7, -8
 6276              		.cfi_offset 14, -4
 6277 0002 82B0     		sub	sp, sp, #8
 6278              		.cfi_def_cfa_offset 16
 6279 0004 00AF     		add	r7, sp, #0
 6280              		.cfi_def_cfa_register 7
 6281 0006 7860     		str	r0, [r7, #4]
3540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 6282              		.loc 1 3541 3
 6283 0008 7B68     		ldr	r3, [r7, #4]
 6284 000a 1B68     		ldr	r3, [r3]
 6285 000c DA68     		ldr	r2, [r3, #12]
 6286 000e 7B68     		ldr	r3, [r7, #4]
 6287 0010 1B68     		ldr	r3, [r3]
 6288 0012 22F04002 		bic	r2, r2, #64
 6289 0016 DA60     		str	r2, [r3, #12]
3542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6290              		.loc 1 3544 17
 6291 0018 7B68     		ldr	r3, [r7, #4]
 6292 001a 2022     		movs	r2, #32
 6293 001c 83F83D20 		strb	r2, [r3, #61]
3545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 172


3550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 6294              		.loc 1 3551 3
 6295 0020 7868     		ldr	r0, [r7, #4]
 6296 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6297              		.loc 1 3554 10
 6298 0026 0023     		movs	r3, #0
3555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6299              		.loc 1 3555 1
 6300 0028 1846     		mov	r0, r3
 6301 002a 0837     		adds	r7, r7, #8
 6302              		.cfi_def_cfa_offset 8
 6303 002c BD46     		mov	sp, r7
 6304              		.cfi_def_cfa_register 13
 6305              		@ sp needed
 6306 002e 80BD     		pop	{r7, pc}
 6307              		.cfi_endproc
 6308              	.LFE123:
 6310              		.section	.text.UART_Receive_IT,"ax",%progbits
 6311              		.align	1
 6312              		.syntax unified
 6313              		.thumb
 6314              		.thumb_func
 6315              		.fpu softvfp
 6317              	UART_Receive_IT:
 6318              	.LFB124:
3556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6319              		.loc 1 3564 1
 6320              		.cfi_startproc
 6321              		@ args = 0, pretend = 0, frame = 24
 6322              		@ frame_needed = 1, uses_anonymous_args = 0
 6323 0000 80B5     		push	{r7, lr}
 6324              		.cfi_def_cfa_offset 8
 6325              		.cfi_offset 7, -8
 6326              		.cfi_offset 14, -4
 6327 0002 86B0     		sub	sp, sp, #24
 6328              		.cfi_def_cfa_offset 32
 6329 0004 00AF     		add	r7, sp, #0
 6330              		.cfi_def_cfa_register 7
 6331 0006 7860     		str	r0, [r7, #4]
3565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
3566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
3567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 6332              		.loc 1 3569 12
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 173


 6333 0008 7B68     		ldr	r3, [r7, #4]
 6334 000a 93F83E30 		ldrb	r3, [r3, #62]
 6335 000e DBB2     		uxtb	r3, r3
 6336              		.loc 1 3569 6
 6337 0010 222B     		cmp	r3, #34
 6338 0012 40F09980 		bne	.L277
3570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6339              		.loc 1 3571 21
 6340 0016 7B68     		ldr	r3, [r7, #4]
 6341 0018 9B68     		ldr	r3, [r3, #8]
 6342              		.loc 1 3571 8
 6343 001a B3F5805F 		cmp	r3, #4096
 6344 001e 17D1     		bne	.L278
 6345              		.loc 1 3571 71 discriminator 1
 6346 0020 7B68     		ldr	r3, [r7, #4]
 6347 0022 1B69     		ldr	r3, [r3, #16]
 6348              		.loc 1 3571 56 discriminator 1
 6349 0024 002B     		cmp	r3, #0
 6350 0026 13D1     		bne	.L278
3572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 6351              		.loc 1 3573 19
 6352 0028 0023     		movs	r3, #0
 6353 002a 7B61     		str	r3, [r7, #20]
3574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 6354              		.loc 1 3574 19
 6355 002c 7B68     		ldr	r3, [r7, #4]
 6356 002e 9B6A     		ldr	r3, [r3, #40]
 6357 0030 3B61     		str	r3, [r7, #16]
3575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 6358              		.loc 1 3575 38
 6359 0032 7B68     		ldr	r3, [r7, #4]
 6360 0034 1B68     		ldr	r3, [r3]
 6361              		.loc 1 3575 48
 6362 0036 5B68     		ldr	r3, [r3, #4]
 6363              		.loc 1 3575 22
 6364 0038 9BB2     		uxth	r3, r3
 6365 003a C3F30803 		ubfx	r3, r3, #0, #9
 6366 003e 9AB2     		uxth	r2, r3
 6367              		.loc 1 3575 20
 6368 0040 3B69     		ldr	r3, [r7, #16]
 6369 0042 1A80     		strh	r2, [r3]	@ movhi
3576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 6370              		.loc 1 3576 25
 6371 0044 7B68     		ldr	r3, [r7, #4]
 6372 0046 9B6A     		ldr	r3, [r3, #40]
 6373 0048 9A1C     		adds	r2, r3, #2
 6374 004a 7B68     		ldr	r3, [r7, #4]
 6375 004c 9A62     		str	r2, [r3, #40]
 6376 004e 26E0     		b	.L279
 6377              	.L278:
3577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 6378              		.loc 1 3580 18
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 174


 6379 0050 7B68     		ldr	r3, [r7, #4]
 6380 0052 9B6A     		ldr	r3, [r3, #40]
 6381 0054 7B61     		str	r3, [r7, #20]
3581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits  = NULL;
 6382              		.loc 1 3581 20
 6383 0056 0023     		movs	r3, #0
 6384 0058 3B61     		str	r3, [r7, #16]
3582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
 6385              		.loc 1 3583 23
 6386 005a 7B68     		ldr	r3, [r7, #4]
 6387 005c 9B68     		ldr	r3, [r3, #8]
 6388              		.loc 1 3583 10
 6389 005e B3F5805F 		cmp	r3, #4096
 6390 0062 07D0     		beq	.L280
 6391              		.loc 1 3583 74 discriminator 1
 6392 0064 7B68     		ldr	r3, [r7, #4]
 6393 0066 9B68     		ldr	r3, [r3, #8]
 6394              		.loc 1 3583 58 discriminator 1
 6395 0068 002B     		cmp	r3, #0
 6396 006a 0AD1     		bne	.L281
 6397              		.loc 1 3583 124 discriminator 2
 6398 006c 7B68     		ldr	r3, [r7, #4]
 6399 006e 1B69     		ldr	r3, [r3, #16]
 6400              		.loc 1 3583 109 discriminator 2
 6401 0070 002B     		cmp	r3, #0
 6402 0072 06D1     		bne	.L281
 6403              	.L280:
3584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 6404              		.loc 1 3585 38
 6405 0074 7B68     		ldr	r3, [r7, #4]
 6406 0076 1B68     		ldr	r3, [r3]
 6407              		.loc 1 3585 48
 6408 0078 5B68     		ldr	r3, [r3, #4]
 6409              		.loc 1 3585 23
 6410 007a DAB2     		uxtb	r2, r3
 6411              		.loc 1 3585 21
 6412 007c 7B69     		ldr	r3, [r7, #20]
 6413 007e 1A70     		strb	r2, [r3]
 6414 0080 08E0     		b	.L282
 6415              	.L281:
3586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 6416              		.loc 1 3589 38
 6417 0082 7B68     		ldr	r3, [r7, #4]
 6418 0084 1B68     		ldr	r3, [r3]
 6419              		.loc 1 3589 48
 6420 0086 5B68     		ldr	r3, [r3, #4]
 6421              		.loc 1 3589 23
 6422 0088 DBB2     		uxtb	r3, r3
 6423 008a 03F07F03 		and	r3, r3, #127
 6424 008e DAB2     		uxtb	r2, r3
 6425              		.loc 1 3589 21
 6426 0090 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 175


 6427 0092 1A70     		strb	r2, [r3]
 6428              	.L282:
3590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 6429              		.loc 1 3591 25
 6430 0094 7B68     		ldr	r3, [r7, #4]
 6431 0096 9B6A     		ldr	r3, [r3, #40]
 6432 0098 5A1C     		adds	r2, r3, #1
 6433 009a 7B68     		ldr	r3, [r7, #4]
 6434 009c 9A62     		str	r2, [r3, #40]
 6435              	.L279:
3592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 6436              		.loc 1 3594 16
 6437 009e 7B68     		ldr	r3, [r7, #4]
 6438 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6439 00a2 9BB2     		uxth	r3, r3
 6440              		.loc 1 3594 9
 6441 00a4 013B     		subs	r3, r3, #1
 6442 00a6 9BB2     		uxth	r3, r3
 6443              		.loc 1 3594 8
 6444 00a8 7A68     		ldr	r2, [r7, #4]
 6445 00aa 1946     		mov	r1, r3	@ movhi
 6446 00ac D185     		strh	r1, [r2, #46]	@ movhi
 6447 00ae 002B     		cmp	r3, #0
 6448 00b0 48D1     		bne	.L283
3595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 6449              		.loc 1 3597 7
 6450 00b2 7B68     		ldr	r3, [r7, #4]
 6451 00b4 1B68     		ldr	r3, [r3]
 6452 00b6 DA68     		ldr	r2, [r3, #12]
 6453 00b8 7B68     		ldr	r3, [r7, #4]
 6454 00ba 1B68     		ldr	r3, [r3]
 6455 00bc 22F02002 		bic	r2, r2, #32
 6456 00c0 DA60     		str	r2, [r3, #12]
3598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 6457              		.loc 1 3600 7
 6458 00c2 7B68     		ldr	r3, [r7, #4]
 6459 00c4 1B68     		ldr	r3, [r3]
 6460 00c6 DA68     		ldr	r2, [r3, #12]
 6461 00c8 7B68     		ldr	r3, [r7, #4]
 6462 00ca 1B68     		ldr	r3, [r3]
 6463 00cc 22F48072 		bic	r2, r2, #256
 6464 00d0 DA60     		str	r2, [r3, #12]
3601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 6465              		.loc 1 3603 7
 6466 00d2 7B68     		ldr	r3, [r7, #4]
 6467 00d4 1B68     		ldr	r3, [r3]
 6468 00d6 5A69     		ldr	r2, [r3, #20]
 6469 00d8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 176


 6470 00da 1B68     		ldr	r3, [r3]
 6471 00dc 22F00102 		bic	r2, r2, #1
 6472 00e0 5A61     		str	r2, [r3, #20]
3604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 6473              		.loc 1 3606 22
 6474 00e2 7B68     		ldr	r3, [r7, #4]
 6475 00e4 2022     		movs	r2, #32
 6476 00e6 83F83E20 		strb	r2, [r3, #62]
3607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check current reception Mode :
3609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6477              		.loc 1 3610 16
 6478 00ea 7B68     		ldr	r3, [r7, #4]
 6479 00ec 1B6B     		ldr	r3, [r3, #48]
 6480              		.loc 1 3610 10
 6481 00ee 012B     		cmp	r3, #1
 6482 00f0 23D1     		bne	.L284
3611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Set reception type to Standard */
3613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6483              		.loc 1 3613 30
 6484 00f2 7B68     		ldr	r3, [r7, #4]
 6485 00f4 0022     		movs	r2, #0
 6486 00f6 1A63     		str	r2, [r3, #48]
3614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable IDLE interrupt */
3616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6487              		.loc 1 3616 9
 6488 00f8 7B68     		ldr	r3, [r7, #4]
 6489 00fa 1B68     		ldr	r3, [r3]
 6490 00fc DA68     		ldr	r2, [r3, #12]
 6491 00fe 7B68     		ldr	r3, [r7, #4]
 6492 0100 1B68     		ldr	r3, [r3]
 6493 0102 22F01002 		bic	r2, r2, #16
 6494 0106 DA60     		str	r2, [r3, #12]
3617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Check if IDLE flag is set */
3619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 6495              		.loc 1 3619 13
 6496 0108 7B68     		ldr	r3, [r7, #4]
 6497 010a 1B68     		ldr	r3, [r3]
 6498 010c 1B68     		ldr	r3, [r3]
 6499 010e 03F01003 		and	r3, r3, #16
 6500              		.loc 1 3619 12
 6501 0112 102B     		cmp	r3, #16
 6502 0114 0AD1     		bne	.L285
 6503              	.LBB12:
3620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 6504              		.loc 1 3622 11
 6505 0116 0023     		movs	r3, #0
 6506 0118 FB60     		str	r3, [r7, #12]
 6507 011a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 177


 6508 011c 1B68     		ldr	r3, [r3]
 6509 011e 1B68     		ldr	r3, [r3]
 6510 0120 FB60     		str	r3, [r7, #12]
 6511 0122 7B68     		ldr	r3, [r7, #4]
 6512 0124 1B68     		ldr	r3, [r3]
 6513 0126 5B68     		ldr	r3, [r3, #4]
 6514 0128 FB60     		str	r3, [r7, #12]
 6515 012a FB68     		ldr	r3, [r7, #12]
 6516              	.L285:
 6517              	.LBE12:
3623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 6518              		.loc 1 3630 9
 6519 012c 7B68     		ldr	r3, [r7, #4]
 6520 012e 9B8D     		ldrh	r3, [r3, #44]
 6521 0130 1946     		mov	r1, r3
 6522 0132 7868     		ldr	r0, [r7, #4]
 6523 0134 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 6524 0138 02E0     		b	.L286
 6525              	.L284:
3631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
3632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /* Standard reception API called */
3636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
3637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call registered Rx complete callback*/
3638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        huart->RxCpltCallback(huart);
3639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call legacy weak Rx complete callback*/
3641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        HAL_UART_RxCpltCallback(huart);
 6526              		.loc 1 3641 8
 6527 013a 7868     		ldr	r0, [r7, #4]
 6528 013c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 6529              	.L286:
3642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 6530              		.loc 1 3645 14
 6531 0140 0023     		movs	r3, #0
 6532 0142 02E0     		b	.L287
 6533              	.L283:
3646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6534              		.loc 1 3647 12
 6535 0144 0023     		movs	r3, #0
 6536 0146 00E0     		b	.L287
 6537              	.L277:
3648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 178


3650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 6538              		.loc 1 3651 12
 6539 0148 0223     		movs	r3, #2
 6540              	.L287:
3652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6541              		.loc 1 3653 1
 6542 014a 1846     		mov	r0, r3
 6543 014c 1837     		adds	r7, r7, #24
 6544              		.cfi_def_cfa_offset 8
 6545 014e BD46     		mov	sp, r7
 6546              		.cfi_def_cfa_register 13
 6547              		@ sp needed
 6548 0150 80BD     		pop	{r7, pc}
 6549              		.cfi_endproc
 6550              	.LFE124:
 6552              		.section	.text.UART_SetConfig,"ax",%progbits
 6553              		.align	1
 6554              		.syntax unified
 6555              		.thumb
 6556              		.thumb_func
 6557              		.fpu softvfp
 6559              	UART_SetConfig:
 6560              	.LFB125:
3654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6561              		.loc 1 3662 1
 6562              		.cfi_startproc
 6563              		@ args = 0, pretend = 0, frame = 16
 6564              		@ frame_needed = 1, uses_anonymous_args = 0
 6565 0000 80B5     		push	{r7, lr}
 6566              		.cfi_def_cfa_offset 8
 6567              		.cfi_offset 7, -8
 6568              		.cfi_offset 14, -4
 6569 0002 84B0     		sub	sp, sp, #16
 6570              		.cfi_def_cfa_offset 24
 6571 0004 00AF     		add	r7, sp, #0
 6572              		.cfi_def_cfa_register 7
 6573 0006 7860     		str	r0, [r7, #4]
3663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 179


3673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 6574              		.loc 1 3675 3
 6575 0008 7B68     		ldr	r3, [r7, #4]
 6576 000a 1B68     		ldr	r3, [r3]
 6577 000c 1B69     		ldr	r3, [r3, #16]
 6578 000e 23F44051 		bic	r1, r3, #12288
 6579 0012 7B68     		ldr	r3, [r7, #4]
 6580 0014 DA68     		ldr	r2, [r3, #12]
 6581 0016 7B68     		ldr	r3, [r7, #4]
 6582 0018 1B68     		ldr	r3, [r3]
 6583 001a 0A43     		orrs	r2, r2, r1
 6584 001c 1A61     		str	r2, [r3, #16]
3676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 6585              		.loc 1 3690 33
 6586 001e 7B68     		ldr	r3, [r7, #4]
 6587 0020 9A68     		ldr	r2, [r3, #8]
 6588              		.loc 1 3690 58
 6589 0022 7B68     		ldr	r3, [r7, #4]
 6590 0024 1B69     		ldr	r3, [r3, #16]
 6591              		.loc 1 3690 45
 6592 0026 1A43     		orrs	r2, r2, r3
 6593              		.loc 1 3690 79
 6594 0028 7B68     		ldr	r3, [r7, #4]
 6595 002a 5B69     		ldr	r3, [r3, #20]
 6596              		.loc 1 3690 10
 6597 002c 1343     		orrs	r3, r3, r2
 6598 002e BB60     		str	r3, [r7, #8]
3691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 6599              		.loc 1 3691 3
 6600 0030 7B68     		ldr	r3, [r7, #4]
 6601 0032 1B68     		ldr	r3, [r3]
 6602 0034 DB68     		ldr	r3, [r3, #12]
 6603 0036 23F4B053 		bic	r3, r3, #5632
 6604 003a 23F00C03 		bic	r3, r3, #12
 6605 003e 7A68     		ldr	r2, [r7, #4]
 6606 0040 1268     		ldr	r2, [r2]
 6607 0042 B968     		ldr	r1, [r7, #8]
 6608 0044 0B43     		orrs	r3, r3, r1
 6609 0046 D360     		str	r3, [r2, #12]
3692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 180


3694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 6610              		.loc 1 3698 3
 6611 0048 7B68     		ldr	r3, [r7, #4]
 6612 004a 1B68     		ldr	r3, [r3]
 6613 004c 5B69     		ldr	r3, [r3, #20]
 6614 004e 23F44071 		bic	r1, r3, #768
 6615 0052 7B68     		ldr	r3, [r7, #4]
 6616 0054 9A69     		ldr	r2, [r3, #24]
 6617 0056 7B68     		ldr	r3, [r7, #4]
 6618 0058 1B68     		ldr	r3, [r3]
 6619 005a 0A43     		orrs	r2, r2, r1
 6620 005c 5A61     		str	r2, [r3, #20]
3699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 6621              		.loc 1 3701 11
 6622 005e 7B68     		ldr	r3, [r7, #4]
 6623 0060 1B68     		ldr	r3, [r3]
 6624              		.loc 1 3701 5
 6625 0062 2C4A     		ldr	r2, .L291
 6626 0064 9342     		cmp	r3, r2
 6627 0066 03D1     		bne	.L289
3702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 6628              		.loc 1 3703 12
 6629 0068 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 6630 006c F860     		str	r0, [r7, #12]
 6631 006e 02E0     		b	.L290
 6632              	.L289:
3704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 6633              		.loc 1 3707 12
 6634 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 6635 0074 F860     		str	r0, [r7, #12]
 6636              	.L290:
3708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 6637              		.loc 1 3721 26
 6638 0076 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 181


 6639 0078 1346     		mov	r3, r2
 6640 007a 9B00     		lsls	r3, r3, #2
 6641 007c 1344     		add	r3, r3, r2
 6642 007e 9A00     		lsls	r2, r3, #2
 6643 0080 1A44     		add	r2, r2, r3
 6644 0082 7B68     		ldr	r3, [r7, #4]
 6645 0084 5B68     		ldr	r3, [r3, #4]
 6646 0086 9B00     		lsls	r3, r3, #2
 6647 0088 B2FBF3F3 		udiv	r3, r2, r3
 6648 008c 224A     		ldr	r2, .L291+4
 6649 008e A2FB0323 		umull	r2, r3, r2, r3
 6650 0092 5B09     		lsrs	r3, r3, #5
 6651 0094 1901     		lsls	r1, r3, #4
 6652 0096 FA68     		ldr	r2, [r7, #12]
 6653 0098 1346     		mov	r3, r2
 6654 009a 9B00     		lsls	r3, r3, #2
 6655 009c 1344     		add	r3, r3, r2
 6656 009e 9A00     		lsls	r2, r3, #2
 6657 00a0 1A44     		add	r2, r2, r3
 6658 00a2 7B68     		ldr	r3, [r7, #4]
 6659 00a4 5B68     		ldr	r3, [r3, #4]
 6660 00a6 9B00     		lsls	r3, r3, #2
 6661 00a8 B2FBF3F2 		udiv	r2, r2, r3
 6662 00ac 1A4B     		ldr	r3, .L291+4
 6663 00ae A3FB0203 		umull	r0, r3, r3, r2
 6664 00b2 5B09     		lsrs	r3, r3, #5
 6665 00b4 6420     		movs	r0, #100
 6666 00b6 00FB03F3 		mul	r3, r0, r3
 6667 00ba D31A     		subs	r3, r2, r3
 6668 00bc 1B01     		lsls	r3, r3, #4
 6669 00be 3233     		adds	r3, r3, #50
 6670 00c0 154A     		ldr	r2, .L291+4
 6671 00c2 A2FB0323 		umull	r2, r3, r2, r3
 6672 00c6 5B09     		lsrs	r3, r3, #5
 6673 00c8 03F0F003 		and	r3, r3, #240
 6674 00cc 1944     		add	r1, r1, r3
 6675 00ce FA68     		ldr	r2, [r7, #12]
 6676 00d0 1346     		mov	r3, r2
 6677 00d2 9B00     		lsls	r3, r3, #2
 6678 00d4 1344     		add	r3, r3, r2
 6679 00d6 9A00     		lsls	r2, r3, #2
 6680 00d8 1A44     		add	r2, r2, r3
 6681 00da 7B68     		ldr	r3, [r7, #4]
 6682 00dc 5B68     		ldr	r3, [r3, #4]
 6683 00de 9B00     		lsls	r3, r3, #2
 6684 00e0 B2FBF3F2 		udiv	r2, r2, r3
 6685 00e4 0C4B     		ldr	r3, .L291+4
 6686 00e6 A3FB0203 		umull	r0, r3, r3, r2
 6687 00ea 5B09     		lsrs	r3, r3, #5
 6688 00ec 6420     		movs	r0, #100
 6689 00ee 00FB03F3 		mul	r3, r0, r3
 6690 00f2 D31A     		subs	r3, r2, r3
 6691 00f4 1B01     		lsls	r3, r3, #4
 6692 00f6 3233     		adds	r3, r3, #50
 6693 00f8 074A     		ldr	r2, .L291+4
 6694 00fa A2FB0323 		umull	r2, r3, r2, r3
 6695 00fe 5B09     		lsrs	r3, r3, #5
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 182


 6696 0100 03F00F02 		and	r2, r3, #15
 6697              		.loc 1 3721 8
 6698 0104 7B68     		ldr	r3, [r7, #4]
 6699 0106 1B68     		ldr	r3, [r3]
 6700              		.loc 1 3721 26
 6701 0108 0A44     		add	r2, r2, r1
 6702              		.loc 1 3721 24
 6703 010a 9A60     		str	r2, [r3, #8]
3722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6704              		.loc 1 3723 1
 6705 010c 00BF     		nop
 6706 010e 1037     		adds	r7, r7, #16
 6707              		.cfi_def_cfa_offset 8
 6708 0110 BD46     		mov	sp, r7
 6709              		.cfi_def_cfa_register 13
 6710              		@ sp needed
 6711 0112 80BD     		pop	{r7, pc}
 6712              	.L292:
 6713              		.align	2
 6714              	.L291:
 6715 0114 00380140 		.word	1073821696
 6716 0118 1F85EB51 		.word	1374389535
 6717              		.cfi_endproc
 6718              	.LFE125:
 6720              		.text
 6721              	.Letext0:
 6722              		.file 2 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 6723              		.file 3 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 6724              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 6725              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 6726              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 6727              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 6728              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 6729              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 6730              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 6731              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 183


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:16     .text.HAL_UART_Init:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:24     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:620    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6559   .text.UART_SetConfig:0000000000000000 UART_SetConfig
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:129    .text.HAL_HalfDuplex_Init:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:136    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:248    .text.HAL_LIN_Init:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:255    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:385    .text.HAL_MultiProcessor_Init:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:392    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:533    .text.HAL_UART_DeInit:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:540    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:657    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:613    .text.HAL_UART_MspInit:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:650    .text.HAL_UART_MspDeInit:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:687    .text.HAL_UART_Transmit:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:694    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5340   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:909    .text.HAL_UART_Receive:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:916    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1155   .text.HAL_UART_Transmit_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1162   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1267   .text.HAL_UART_Receive_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1274   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5454   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1353   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1360   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1508   .text.HAL_UART_Transmit_DMA:00000000000000cc $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4943   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5017   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5229   .text.UART_DMAError:0000000000000000 UART_DMAError
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1515   .text.HAL_UART_Receive_DMA:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1522   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5544   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1601   .text.HAL_UART_DMAPause:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1608   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1741   .text.HAL_UART_DMAResume:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1748   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1860   .text.HAL_UART_DMAStop:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1867   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5687   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5735   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:1993   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2000   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2315   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2322   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2442   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2449   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2569   .text.HAL_UART_Abort:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2576   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2769   .text.HAL_UART_AbortTransmit:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2776   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2876   .text.HAL_UART_AbortReceive:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:2883   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3010   .text.HAL_UART_Abort_IT:0000000000000000 $t
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 184


C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3017   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4299   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3258   .text.HAL_UART_Abort_IT:0000000000000160 $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5858   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5947   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3264   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3271   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4336   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3383   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6036   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3388   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3395   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4373   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3538   .text.HAL_UART_AbortReceive_IT:00000000000000d0 $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6084   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3543   .text.HAL_UART_IRQHandler:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:3550   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6317   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4262   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4410   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6136   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6267   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4102   .text.HAL_UART_IRQHandler:0000000000000350 $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5810   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4107   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4114   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4144   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4151   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4181   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4188   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4218   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4225   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4255   .text.HAL_UART_ErrorCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4292   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4329   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4366   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4403   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4442   .text.HAL_LIN_SendBreak:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4449   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4515   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4522   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4588   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4595   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4661   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4668   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4748   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4755   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4835   .text.HAL_UART_GetState:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4842   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4897   .text.HAL_UART_GetError:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4904   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:4937   .text.UART_DMATransmitCplt:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5011   .text.UART_DMATxHalfCplt:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5051   .text.UART_DMAReceiveCplt:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5057   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5164   .text.UART_DMARxHalfCplt:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5170   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 185


C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5223   .text.UART_DMAError:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5334   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5447   .text.UART_Start_Receive_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5537   .text.UART_Start_Receive_DMA:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5674   .text.UART_Start_Receive_DMA:00000000000000bc $d
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5681   .text.UART_EndTxTransfer:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5729   .text.UART_EndRxTransfer:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5804   .text.UART_DMAAbortOnError:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5852   .text.UART_DMATxAbortCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:5941   .text.UART_DMARxAbortCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6030   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6078   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6130   .text.UART_Transmit_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6261   .text.UART_EndTransmit_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6311   .text.UART_Receive_IT:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6553   .text.UART_SetConfig:0000000000000000 $t
C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s:6715   .text.UART_SetConfig:0000000000000114 $d
                           .group:0000000000000000 wm4.0.e890922d021f7fff2fbf219cb2b38f03
                           .group:0000000000000000 wm4.stm32f1xx_hal_conf.h.21.185fa7e4004c86f1f34627ab1091dd60
                           .group:0000000000000000 wm4.stm32f1xx.h.39.208bb8a61c892b7c37d899c49a031330
                           .group:0000000000000000 wm4.stm32f103xb.h.38.ec967d5ad9d3269cb0788eebda048e38
                           .group:0000000000000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm3.h.66.fc46cac19810db8f98d67da7ef88f42c
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.225e4f5469716fdeef823d1102f5b23e
                           .group:0000000000000000 wm4.core_cm3.h.127.f4474120f1a7524deb56f9d74ff175da
                           .group:0000000000000000 wm4.stm32f103xb.h.573.10249aa7473ca93be896fed94046a725
                           .group:0000000000000000 wm4.stm32f1xx.h.162.96b09079a093c34dbd7f0b85cbd0ddee
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.91ba5b544a4c2be2620a1e7ff0049e10
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32f1xx_hal_def.h.57.18d01ce1aa74e9fb44dbf16f821a574a
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.95.21591bbc513aaa813c0b8640c3b32517
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc_ex.h.22.8763f99bc1e3e2dcf0febe9161d81b37
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.1202.f8e5f9e0cf4eef7840facf5396029056
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.22.fa638d688dcc57ca806fe6a7831b0d04
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio_ex.h.22.51a50ef3512cd78017ce666a32d364bf
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.263.f5ebf2f545ade59412ab9261c8e35dc4
                           .group:0000000000000000 wm4.stm32f1xx_hal_exti.h.22.e26491d042c8079c3ca67eca341af862
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.22.3c14338534886827bf3aeaa2a7f412a1
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma_ex.h.22.001ac4d7f81ccbdcae49bd65c13858c8
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.409.cafcd2cfe701091535636be537c18293
                           .group:0000000000000000 wm4.stm32f1xx_hal_cortex.h.22.b5f4174bb6a50d95405567b8f50e0900
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash.h.22.5cea9a7210e6315b41724b47b5fdf203
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash_ex.h.22.d4e19c21f2a86fa2f8ec2c2d5f1ab2af
                           .group:0000000000000000 wm4.stm32f1xx_hal_pwr.h.22.3438c476faafc3240bf146f143df3fcd
                           .group:0000000000000000 wm4.stm32f1xx_hal_tim.h.22.a16e206564e97dbace9faae59a0d6008
                           .group:0000000000000000 wm4.stm32f1xx_hal_uart.h.22.5f7992e497faa36aa98f09f7214f4dbb
                           .group:0000000000000000 wm4.stm32f1xx_hal.h.88.91065c0692bed6019c34f1e9c00589fd

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
ARM GAS  C:\Users\nguye\AppData\Local\Temp\ccUjla8d.s 			page 186


HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
