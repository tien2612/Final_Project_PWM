
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b80  08004b80  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b80  08004b80  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b80  08004b80  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200000bc  08004c44  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08004c44  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6f  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fa  00000000  00000000  0002fb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00032250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019313  00000000  00000000  00033c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f20e  00000000  00000000  0004cfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b77d  00000000  00000000  0005c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e792e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000e7984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000bc 	.word	0x200000bc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b00 	.word	0x08004b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c0 	.word	0x200000c0
 800014c:	08004b00 	.word	0x08004b00

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <updateDisplay+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <updateDisplay+0x38>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	1192      	asrs	r2, r2, #6
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4909      	ldr	r1, [pc, #36]	; (8000a60 <updateDisplay+0x3c>)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <updateDisplay+0x40>)
 8000a3e:	f003 fc25 	bl	800428c <siprintf>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4906      	ldr	r1, [pc, #24]	; (8000a64 <updateDisplay+0x40>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <updateDisplay+0x44>)
 8000a4e:	f003 fa80 	bl	8003f52 <HAL_UART_Transmit>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	10624dd3 	.word	0x10624dd3
 8000a60:	08004b18 	.word	0x08004b18
 8000a64:	2000016c 	.word	0x2000016c
 8000a68:	20000230 	.word	0x20000230

08000a6c <WhichButtonIsPressed>:
#include "traffic_light.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb79 	bl	8001168 <is_button_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <WhichButtonIsPressed+0x14>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e010      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fb71 	bl	8001168 <is_button_pressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <WhichButtonIsPressed+0x24>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e008      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 8000a90:	2002      	movs	r0, #2
 8000a92:	f000 fb69 	bl	8001168 <is_button_pressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <WhichButtonIsPressed+0x34>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <clear_vertical>:

void clear_vertical() {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_1_LED);
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f001 fac4 	bl	8002038 <clear_led>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <clear_horizontal>:

void clear_horizontal() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_2_LED);
 8000ab8:	2029      	movs	r0, #41	; 0x29
 8000aba:	f001 fabd 	bl	8002038 <clear_led>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <vertical_processing>:

void vertical_processing() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	clear_vertical();
 8000ac8:	f7ff ffed 	bl	8000aa6 <clear_vertical>
	switch (CURRENT_STATE[0]) {
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <vertical_processing+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d010      	beq.n	8000af6 <vertical_processing+0x32>
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	dc13      	bgt.n	8000b00 <vertical_processing+0x3c>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <vertical_processing+0x1e>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <vertical_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000ae0:	e00e      	b.n	8000b00 <vertical_processing+0x3c>
		set_led_color(TRAFFIC_1_LED, RED_COLOR);
 8000ae2:	211e      	movs	r1, #30
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f001 f9e5 	bl	8001eb4 <set_led_color>
		break;
 8000aea:	e00a      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, AMBER_COLOR);
 8000aec:	211f      	movs	r1, #31
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f001 f9e0 	bl	8001eb4 <set_led_color>
		break;
 8000af4:	e005      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
 8000af6:	2120      	movs	r1, #32
 8000af8:	2028      	movs	r0, #40	; 0x28
 8000afa:	f001 f9db 	bl	8001eb4 <set_led_color>
		break;
 8000afe:	e000      	b.n	8000b02 <vertical_processing+0x3e>
		break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000004 	.word	0x20000004

08000b0c <horizontal_processing>:

void horizontal_processing() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	clear_horizontal();
 8000b10:	f7ff ffd0 	bl	8000ab4 <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <horizontal_processing+0x44>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d010      	beq.n	8000b3e <horizontal_processing+0x32>
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	dc13      	bgt.n	8000b48 <horizontal_processing+0x3c>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <horizontal_processing+0x1e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d005      	beq.n	8000b34 <horizontal_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000b28:	e00e      	b.n	8000b48 <horizontal_processing+0x3c>
		set_led_color(TRAFFIC_2_LED, RED_COLOR);
 8000b2a:	211e      	movs	r1, #30
 8000b2c:	2029      	movs	r0, #41	; 0x29
 8000b2e:	f001 f9c1 	bl	8001eb4 <set_led_color>
		break;
 8000b32:	e00a      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, AMBER_COLOR);
 8000b34:	211f      	movs	r1, #31
 8000b36:	2029      	movs	r0, #41	; 0x29
 8000b38:	f001 f9bc 	bl	8001eb4 <set_led_color>
		break;
 8000b3c:	e005      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
 8000b3e:	2120      	movs	r1, #32
 8000b40:	2029      	movs	r0, #41	; 0x29
 8000b42:	f001 f9b7 	bl	8001eb4 <set_led_color>
		break;
 8000b46:	e000      	b.n	8000b4a <horizontal_processing+0x3e>
		break;
 8000b48:	bf00      	nop
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000004 	.word	0x20000004

08000b54 <state_update>:

void state_update(int idx) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d11e      	bne.n	8000ba0 <state_update+0x4c>
		switch (CURRENT_STATE[idx]) {
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <state_update+0x94>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d012      	beq.n	8000b94 <state_update+0x40>
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	dc29      	bgt.n	8000bc6 <state_update+0x72>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <state_update+0x28>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d006      	beq.n	8000b88 <state_update+0x34>
			break;
		case 2:
			CURRENT_STATE[idx] = 1;
			break;
		default:
			break;
 8000b7a:	e024      	b.n	8000bc6 <state_update+0x72>
			CURRENT_STATE[idx] = 2;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <state_update+0x94>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2102      	movs	r1, #2
 8000b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b86:	e01f      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 0;
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <state_update+0x94>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b92:	e019      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 1;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <state_update+0x94>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b9e:	e013      	b.n	8000bc8 <state_update+0x74>
		}
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <state_update+0x94>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	1c99      	adds	r1, r3, #2
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <state_update+0x98>)
 8000bac:	fb83 3201 	smull	r3, r2, r3, r1
 8000bb0:	17cb      	asrs	r3, r1, #31
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <state_update+0x94>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bc4:	e000      	b.n	8000bc8 <state_update+0x74>
			break;
 8000bc6:	bf00      	nop
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <state_update+0x94>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <state_update+0x9c>)
 8000bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd6:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <state_update+0xa0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000004 	.word	0x20000004
 8000bec:	55555556 	.word	0x55555556
 8000bf0:	20000014 	.word	0x20000014
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <check_state>:

void check_state() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <check_state+0x2c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc04      	bgt.n	8000c0e <check_state+0x16>
		state_update(VER_LED);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ffa5 	bl	8000b54 <state_update>
		vertical_processing();
 8000c0a:	f7ff ff5b 	bl	8000ac4 <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <check_state+0x2c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dc04      	bgt.n	8000c20 <check_state+0x28>
		state_update(HOR_LED);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff9c 	bl	8000b54 <state_update>
		horizontal_processing();
 8000c1c:	f7ff ff76 	bl	8000b0c <horizontal_processing>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <update_clock>:

void update_clock() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <update_clock+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d113      	bne.n	8000c5c <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <update_clock+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <update_clock+0x3c>)
 8000c3e:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <update_clock+0x3c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <update_clock+0x3c>)
 8000c4a:	6053      	str	r3, [r2, #4]
		check_state();
 8000c4c:	f7ff ffd4 	bl	8000bf8 <check_state>
		updateDisplay();
 8000c50:	f7ff fee8 	bl	8000a24 <updateDisplay>
		setTimer2(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 ff12 	bl	8001a80 <setTimer2>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000013c 	.word	0x2000013c
 8000c64:	2000000c 	.word	0x2000000c

08000c68 <reset>:

void reset() {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED ;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <reset+0x4c>)
 8000c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c72:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <reset+0x4c>)
 8000c76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c7a:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <reset+0x4c>)
 8000c7e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000c82:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <reset+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <reset+0x50>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <reset+0x50>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <reset+0x4c>)
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <reset+0x54>)
 8000c9c:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <reset+0x50>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <reset+0x4c>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <reset+0x54>)
 8000caa:	6053      	str	r3, [r2, #4]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <restart>:

void restart(){
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	status = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <restart+0x14>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000d8 	.word	0x200000d8

08000cd8 <confirm_action>:

void confirm_action(int mode) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d82e      	bhi.n	8000d44 <confirm_action+0x6c>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <confirm_action+0x14>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d45 	.word	0x08000d45
 8000cf0:	08000cfd 	.word	0x08000cfd
 8000cf4:	08000d15 	.word	0x08000d15
 8000cf8:	08000d2d 	.word	0x08000d2d
	switch (mode) {
	case 0: //Normal mode -> do nothing
		return;
	case 1: // Inc red time mode
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (TIMES_INC * TIME_UNIT);
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <confirm_action+0x78>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <confirm_action+0x7c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d08:	fb01 f303 	mul.w	r3, r1, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <confirm_action+0x78>)
 8000d10:	6013      	str	r3, [r2, #0]
		break;
 8000d12:	e018      	b.n	8000d46 <confirm_action+0x6e>
	case 2: // Inc yellow time mode
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (TIMES_INC * TIME_UNIT);
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <confirm_action+0x78>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <confirm_action+0x7c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <confirm_action+0x78>)
 8000d28:	6053      	str	r3, [r2, #4]
		break;
 8000d2a:	e00c      	b.n	8000d46 <confirm_action+0x6e>
	case 3: // Inc green time
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (TIMES_INC * TIME_UNIT);
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <confirm_action+0x78>)
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <confirm_action+0x7c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	fb01 f303 	mul.w	r3, r1, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <confirm_action+0x78>)
 8000d40:	6093      	str	r3, [r2, #8]
		break;
 8000d42:	e000      	b.n	8000d46 <confirm_action+0x6e>
	default:
		break;
 8000d44:	bf00      	nop
	}

}
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000014 	.word	0x20000014
 8000d54:	200000e0 	.word	0x200000e0

08000d58 <state_handle>:

void state_handle() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000d5c:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <state_handle+0x12c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d05f      	beq.n	8000e24 <state_handle+0xcc>
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	f300 808a 	bgt.w	8000e7e <state_handle+0x126>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <state_handle+0x1c>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d02d      	beq.n	8000dce <state_handle+0x76>
		SEG7_CLOCK[VER_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
		SEG7_CLOCK[HOR_LED] = 0;
		updateDisplay();
		break;
	default:
		break;
 8000d72:	e084      	b.n	8000e7e <state_handle+0x126>
		if (timer1_flag == 1) {
 8000d74:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <state_handle+0x130>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d117      	bne.n	8000dac <state_handle+0x54>
			HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4842      	ldr	r0, [pc, #264]	; (8000e8c <state_handle+0x134>)
 8000d82:	f001 fcd8 	bl	8002736 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 8000d86:	2101      	movs	r1, #1
 8000d88:	4841      	ldr	r0, [pc, #260]	; (8000e90 <state_handle+0x138>)
 8000d8a:	f001 fcec 	bl	8002766 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	483e      	ldr	r0, [pc, #248]	; (8000e90 <state_handle+0x138>)
 8000d96:	f001 fcce 	bl	8002736 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	483c      	ldr	r0, [pc, #240]	; (8000e90 <state_handle+0x138>)
 8000da0:	f001 fce1 	bl	8002766 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da8:	f000 fe50 	bl	8001a4c <setTimer1>
		SEG7_CLOCK[VER_LED] = LED_TIME[0] + TIMES_INC * TIME_UNIT;
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <state_handle+0x13c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <state_handle+0x140>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db8:	fb01 f303 	mul.w	r3, r1, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <state_handle+0x144>)
 8000dc0:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <state_handle+0x144>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
		updateDisplay();
 8000dc8:	f7ff fe2c 	bl	8000a24 <updateDisplay>
		break;
 8000dcc:	e058      	b.n	8000e80 <state_handle+0x128>
		if (timer1_flag == 1) {
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <state_handle+0x130>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d115      	bne.n	8000e02 <state_handle+0xaa>
			HAL_GPIO_TogglePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <state_handle+0x138>)
 8000dda:	f001 fcc4 	bl	8002766 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
 8000dde:	2110      	movs	r1, #16
 8000de0:	482a      	ldr	r0, [pc, #168]	; (8000e8c <state_handle+0x134>)
 8000de2:	f001 fcc0 	bl	8002766 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	4829      	ldr	r0, [pc, #164]	; (8000e90 <state_handle+0x138>)
 8000dec:	f001 fcbb 	bl	8002766 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <state_handle+0x138>)
 8000df6:	f001 fcb6 	bl	8002766 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfe:	f000 fe25 	bl	8001a4c <setTimer1>
		SEG7_CLOCK[VER_LED] = LED_TIME[1] + TIMES_INC * TIME_UNIT;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <state_handle+0x13c>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <state_handle+0x140>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e0e:	fb01 f303 	mul.w	r3, r1, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <state_handle+0x144>)
 8000e16:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <state_handle+0x144>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
		updateDisplay();
 8000e1e:	f7ff fe01 	bl	8000a24 <updateDisplay>
		break;
 8000e22:	e02d      	b.n	8000e80 <state_handle+0x128>
		if (timer1_flag == 1) {
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <state_handle+0x130>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d117      	bne.n	8000e5c <state_handle+0x104>
			HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <state_handle+0x138>)
 8000e32:	f001 fc80 	bl	8002736 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
 8000e36:	2110      	movs	r1, #16
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <state_handle+0x134>)
 8000e3a:	f001 fc94 	bl	8002766 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <state_handle+0x138>)
 8000e46:	f001 fc76 	bl	8002736 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <state_handle+0x138>)
 8000e50:	f001 fc89 	bl	8002766 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e58:	f000 fdf8 	bl	8001a4c <setTimer1>
		SEG7_CLOCK[VER_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <state_handle+0x13c>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <state_handle+0x140>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <state_handle+0x144>)
 8000e70:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <state_handle+0x144>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
		updateDisplay();
 8000e78:	f7ff fdd4 	bl	8000a24 <updateDisplay>
		break;
 8000e7c:	e000      	b.n	8000e80 <state_handle+0x128>
		break;
 8000e7e:	bf00      	nop
	}
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000138 	.word	0x20000138
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	20000014 	.word	0x20000014
 8000e98:	200000e0 	.word	0x200000e0
 8000e9c:	2000000c 	.word	0x2000000c

08000ea0 <traffic_processing>:

void traffic_processing() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	switch (status) {
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <traffic_processing+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d027      	beq.n	8000efc <traffic_processing+0x5c>
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dc28      	bgt.n	8000f02 <traffic_processing+0x62>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <traffic_processing+0x1a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d01e      	beq.n	8000ef6 <traffic_processing+0x56>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 8000eb8:	e023      	b.n	8000f02 <traffic_processing+0x62>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <traffic_processing+0x6c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <traffic_processing+0x6c>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <traffic_processing+0x6c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <traffic_processing+0x70>)
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <traffic_processing+0x74>)
 8000ed2:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <traffic_processing+0x6c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <traffic_processing+0x70>)
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <traffic_processing+0x74>)
 8000ee0:	6053      	str	r3, [r2, #4]
		updateDisplay();
 8000ee2:	f7ff fd9f 	bl	8000a24 <updateDisplay>
		vertical_processing();
 8000ee6:	f7ff fded 	bl	8000ac4 <vertical_processing>
		horizontal_processing();
 8000eea:	f7ff fe0f 	bl	8000b0c <horizontal_processing>
		status = 1;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <traffic_processing+0x68>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
		break;
 8000ef4:	e006      	b.n	8000f04 <traffic_processing+0x64>
		update_clock();
 8000ef6:	f7ff fe97 	bl	8000c28 <update_clock>
		break;
 8000efa:	e003      	b.n	8000f04 <traffic_processing+0x64>
		state_handle();
 8000efc:	f7ff ff2c 	bl	8000d58 <state_handle>
		break;
 8000f00:	e000      	b.n	8000f04 <traffic_processing+0x64>
		break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000d8 	.word	0x200000d8
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	20000014 	.word	0x20000014
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <input_processing>:

void input_processing() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f923 	bl	8001168 <is_button_pressed>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d019      	beq.n	8000f5c <input_processing+0x44>
		clear_vertical();
 8000f28:	f7ff fdbd 	bl	8000aa6 <clear_vertical>
		clear_horizontal();
 8000f2c:	f7ff fdc2 	bl	8000ab4 <clear_horizontal>
		status = 2;
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <input_processing+0xb4>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1);
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <input_processing+0xb8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <input_processing+0xb8>)
 8000f3e:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <input_processing+0xbc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
		if (index_mode >= 3) {
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <input_processing+0xb8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	dd06      	ble.n	8000f5c <input_processing+0x44>
			status = 0;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <input_processing+0xb4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
			index_mode = -1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <input_processing+0xb8>)
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	601a      	str	r2, [r3, #0]
		}
	}

	// Add button
	if (is_button_pressed(1) && index_mode != -1) {
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 f903 	bl	8001168 <is_button_pressed>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <input_processing+0x64>
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <input_processing+0xb8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d004      	beq.n	8000f7c <input_processing+0x64>
		TIMES_INC++;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <input_processing+0xbc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <input_processing+0xbc>)
 8000f7a:	6013      	str	r3, [r2, #0]
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != -1) {
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f000 f8f3 	bl	8001168 <is_button_pressed>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d016      	beq.n	8000fb6 <input_processing+0x9e>
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <input_processing+0xb8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d011      	beq.n	8000fb6 <input_processing+0x9e>
		if (TIMES_INC != 0) {
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <input_processing+0xbc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <input_processing+0x8c>
			confirm_action(index_mode);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <input_processing+0xb8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe9a 	bl	8000cd8 <confirm_action>
		}
		TIMES_INC = 0;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <input_processing+0xbc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
		index_mode = -1;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <input_processing+0xb8>)
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	601a      	str	r2, [r3, #0]
		restart();
 8000fb2:	f7ff fe85 	bl	8000cc0 <restart>
	}

	// RESET when start
	if (start == 0) {
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <input_processing+0xc0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d104      	bne.n	8000fc8 <input_processing+0xb0>
		reset();
 8000fbe:	f7ff fe53 	bl	8000c68 <reset>
		start = 1;
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <input_processing+0xc0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200000d8 	.word	0x200000d8
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200000e0 	.word	0x200000e0
 8000fd8:	200000dc 	.word	0x200000dc

08000fdc <fsm_simple_button_run>:

void fsm_simple_button_run() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	switch (buttonState) {
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <fsm_simple_button_run+0x3c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <fsm_simple_button_run+0x12>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00a      	beq.n	8001002 <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 8000fec:	e011      	b.n	8001012 <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 8000fee:	f7ff fd3d 	bl	8000a6c <WhichButtonIsPressed>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <fsm_simple_button_run+0x3c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
			input_processing();
 8000ffe:	f7ff ff8b 	bl	8000f18 <input_processing>
		if (!WhichButtonIsPressed()) {
 8001002:	f7ff fd33 	bl	8000a6c <WhichButtonIsPressed>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <fsm_simple_button_run+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		break;
 8001012:	bf00      	nop
	}
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000f8 	.word	0x200000f8

0800101c <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e081      	b.n	800112c <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <button_reading+0x124>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	7819      	ldrb	r1, [r3, #0]
 8001030:	4a44      	ldr	r2, [pc, #272]	; (8001144 <button_reading+0x128>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	460a      	mov	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800103a:	4a43      	ldr	r2, [pc, #268]	; (8001148 <button_reading+0x12c>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001042:	4942      	ldr	r1, [pc, #264]	; (800114c <button_reading+0x130>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f001 fb5b 	bl	8002708 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	4a3a      	ldr	r2, [pc, #232]	; (8001140 <button_reading+0x124>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	460a      	mov	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8001060:	4a37      	ldr	r2, [pc, #220]	; (8001140 <button_reading+0x124>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4936      	ldr	r1, [pc, #216]	; (8001144 <button_reading+0x128>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	440b      	add	r3, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d158      	bne.n	8001126 <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <button_reading+0x124>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	7819      	ldrb	r1, [r3, #0]
 800107c:	4a34      	ldr	r2, [pc, #208]	; (8001150 <button_reading+0x134>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <button_reading+0x134>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d135      	bne.n	80010fe <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 8001092:	4a30      	ldr	r2, [pc, #192]	; (8001154 <button_reading+0x138>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109a:	2b18      	cmp	r3, #24
 800109c:	d80e      	bhi.n	80010bc <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <button_reading+0x13c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 80010a6:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <button_reading+0x138>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b299      	uxth	r1, r3
 80010b2:	4a28      	ldr	r2, [pc, #160]	; (8001154 <button_reading+0x138>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010ba:	e009      	b.n	80010d0 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <button_reading+0x138>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2100      	movs	r1, #0
 80010c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <button_reading+0x140>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2101      	movs	r1, #1
 80010cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <button_reading+0x144>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d8:	2b63      	cmp	r3, #99	; 0x63
 80010da:	d80a      	bhi.n	80010f2 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 80010dc:	4a20      	ldr	r2, [pc, #128]	; (8001160 <button_reading+0x144>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b299      	uxth	r1, r3
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <button_reading+0x144>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010f0:	e019      	b.n	8001126 <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <button_reading+0x148>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e013      	b.n	8001126 <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <button_reading+0x144>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2100      	movs	r1, #0
 8001104:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <button_reading+0x138>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2100      	movs	r1, #0
 800110e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <button_reading+0x148>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 800111c:	4a0f      	ldr	r2, [pc, #60]	; (800115c <button_reading+0x140>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2100      	movs	r1, #0
 8001122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b03      	cmp	r3, #3
 8001130:	f77f af7a 	ble.w	8001028 <button_reading+0xc>
			}
		}
	}
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000100 	.word	0x20000100
 8001144:	20000104 	.word	0x20000104
 8001148:	20000020 	.word	0x20000020
 800114c:	20000030 	.word	0x20000030
 8001150:	200000fc 	.word	0x200000fc
 8001154:	20000114 	.word	0x20000114
 8001158:	200000e4 	.word	0x200000e4
 800115c:	200000e8 	.word	0x200000e8
 8001160:	2000010c 	.word	0x2000010c
 8001164:	20000108 	.word	0x20000108

08001168 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d901      	bls.n	800117c <is_button_pressed+0x14>
 8001178:	2300      	movs	r3, #0
 800117a:	e007      	b.n	800118c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <is_button_pressed+0x30>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf0c      	ite	eq
 8001186:	2301      	moveq	r3, #1
 8001188:	2300      	movne	r3, #0
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200000fc 	.word	0x200000fc

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 ff9a 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f82c 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f958 	bl	800145c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ac:	f000 f92c 	bl	8001408 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011b0:	f000 f868 	bl	8001284 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011b4:	f000 f8b2 	bl	800131c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <main+0x58>)
 80011bc:	f002 f818 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <main+0x5c>)
 80011c2:	f001 ff6b 	bl	800309c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <main+0x58>)
 80011c8:	f001 ff68 	bl	800309c <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(fsm_simple_button_run, 0, 10);
//  SCH_Add_Task(traffic_processing, 0, 1000);
//  SCH_Add_Task(button_reading, 40, 10);
//  SCH_Add_Task(pedestrian_scramble, 30, 10);
//  find_new_min_task();
  setTimer1(500);
 80011cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d0:	f000 fc3c 	bl	8001a4c <setTimer1>
  setTimer2(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f000 fc52 	bl	8001a80 <setTimer2>
//	  SCH_Go_To_Sleep();
//	  turn of LED for indicate while MCU is sleeping.
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011dc:	2120      	movs	r1, #32
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <main+0x60>)
 80011e0:	f001 fac1 	bl	8002766 <HAL_GPIO_TogglePin>
	  fsm_simple_button_run();
 80011e4:	f7ff fefa 	bl	8000fdc <fsm_simple_button_run>
	  traffic_processing();
 80011e8:	f7ff fe5a 	bl	8000ea0 <traffic_processing>
	  pedestrian_scramble();
 80011ec:	f000 fa0c 	bl	8001608 <pedestrian_scramble>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011f0:	e7f4      	b.n	80011dc <main+0x40>
 80011f2:	bf00      	nop
 80011f4:	200001a0 	.word	0x200001a0
 80011f8:	200001e8 	.word	0x200001e8
 80011fc:	40010800 	.word	0x40010800

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f834 	bl	800427c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fac1 	bl	80027c8 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800124c:	f000 f9d5 	bl	80015fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fd2c 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001276:	f000 f9c0 	bl	80015fa <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	; 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b8:	2213      	movs	r2, #19
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM2_Init+0x94>)
 80012ca:	f001 fe97 	bl	8002ffc <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d4:	f000 f991 	bl	80015fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM2_Init+0x94>)
 80012e6:	f002 f9eb 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 f983 	bl	80015fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM2_Init+0x94>)
 8001302:	f002 fd69 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f975 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001e8 	.word	0x200001e8

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_TIM3_Init+0xe4>)
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001350:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001354:	223f      	movs	r2, #63	; 0x3f
 8001356:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_TIM3_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001364:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_TIM3_Init+0xe4>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001372:	4823      	ldr	r0, [pc, #140]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001374:	f001 fe42 	bl	8002ffc <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800137e:	f000 f93c 	bl	80015fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138c:	4619      	mov	r1, r3
 800138e:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001390:	f002 f996 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800139a:	f000 f92e 	bl	80015fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013a0:	f001 fece 	bl	8003140 <HAL_TIM_PWM_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013aa:	f000 f926 	bl	80015fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4619      	mov	r1, r3
 80013bc:	4810      	ldr	r0, [pc, #64]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013be:	f002 fd0b 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013c8:	f000 f917 	bl	80015fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013cc:	2360      	movs	r3, #96	; 0x60
 80013ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013e4:	f002 f8ae 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ee:	f000 f904 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013f4:	f000 fc3a 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3738      	adds	r7, #56	; 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200001a0 	.word	0x200001a0
 8001404:	40000400 	.word	0x40000400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f002 fd3a 	bl	8003eb8 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 f8d6 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000230 	.word	0x20000230
 8001458:	40004400 	.word	0x40004400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b4e      	ldr	r3, [pc, #312]	; (80015ac <MX_GPIO_Init+0x150>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <MX_GPIO_Init+0x150>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <MX_GPIO_Init+0x150>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <MX_GPIO_Init+0x150>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a47      	ldr	r2, [pc, #284]	; (80015ac <MX_GPIO_Init+0x150>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MX_GPIO_Init+0x150>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <MX_GPIO_Init+0x150>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a41      	ldr	r2, [pc, #260]	; (80015ac <MX_GPIO_Init+0x150>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <MX_GPIO_Init+0x150>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <MX_GPIO_Init+0x150>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <MX_GPIO_Init+0x150>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <MX_GPIO_Init+0x150>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Traffic_1_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2130      	movs	r1, #48	; 0x30
 80014d4:	4836      	ldr	r0, [pc, #216]	; (80015b0 <MX_GPIO_Init+0x154>)
 80014d6:	f001 f92e 	bl	8002736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f240 3101 	movw	r1, #769	; 0x301
 80014e0:	4834      	ldr	r0, [pc, #208]	; (80015b4 <MX_GPIO_Init+0x158>)
 80014e2:	f001 f928 	bl	8002736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x15c>)
 80014ee:	f001 f922 	bl	8002736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <MX_GPIO_Init+0x160>)
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	482c      	ldr	r0, [pc, #176]	; (80015b8 <MX_GPIO_Init+0x15c>)
 8001508:	f000 ff7a 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin;
 800150c:	2303      	movs	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	4824      	ldr	r0, [pc, #144]	; (80015b0 <MX_GPIO_Init+0x154>)
 8001520:	f000 ff6e 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Traffic_1_2_Pin|LD2_Pin;
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	481d      	ldr	r0, [pc, #116]	; (80015b0 <MX_GPIO_Init+0x154>)
 800153c:	f000 ff60 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_1_1_Pin Traffic_2_2_Pin Traffic_2_1_Pin */
  GPIO_InitStruct.Pin = Traffic_1_1_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin;
 8001540:	f240 3301 	movw	r3, #769	; 0x301
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2302      	movs	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	4816      	ldr	r0, [pc, #88]	; (80015b4 <MX_GPIO_Init+0x158>)
 800155a:	f000 ff51 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_Pedes_1_Pin Traffic_Pedes_2_Pin */
  GPIO_InitStruct.Pin = Traffic_Pedes_1_Pin|Traffic_Pedes_2_Pin;
 800155e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <MX_GPIO_Init+0x15c>)
 8001578:	f000 ff42 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_2_Pin B_3_Pin */
  GPIO_InitStruct.Pin = B_2_Pin|B_3_Pin;
 800157c:	2318      	movs	r3, #24
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_GPIO_Init+0x158>)
 8001590:	f000 ff36 	bl	8002400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2028      	movs	r0, #40	; 0x28
 800159a:	f000 fefa 	bl	8002392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800159e:	2028      	movs	r0, #40	; 0x28
 80015a0:	f000 ff13 	bl	80023ca <HAL_NVIC_EnableIRQ>

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	10110000 	.word	0x10110000

080015c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d105      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x1e>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 80015d2:	f000 fa6f 	bl	8001ab4 <timerRun>
		SCH_Update();
 80015d6:	f000 f9e3 	bl	80019a0 <SCH_Update>
		button_reading();
 80015da:	f7ff fd1f 	bl	800101c <button_reading>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	80fb      	strh	r3, [r7, #6]

}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001602:	e7fe      	b.n	8001602 <Error_Handler+0x8>
 8001604:	0000      	movs	r0, r0
	...

08001608 <pedestrian_scramble>:
int pedestrian_wanna_go = 0;
extern TIM_HandleTypeDef htim3;

float extra_step = 1;

void pedestrian_scramble() {
 8001608:	b598      	push	{r3, r4, r7, lr}
 800160a:	af00      	add	r7, sp, #0
		if (is_button_pressed(3)) {
 800160c:	2003      	movs	r0, #3
 800160e:	f7ff fdab 	bl	8001168 <is_button_pressed>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <pedestrian_scramble+0x2e>
			pedestrian_wanna_go = 1;
 8001618:	4ba1      	ldr	r3, [pc, #644]	; (80018a0 <pedestrian_scramble+0x298>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
			if (get_led_color(TRAFFIC_1_LED) == RED_COLOR) {
 800161e:	2028      	movs	r0, #40	; 0x28
 8001620:	f000 fcc2 	bl	8001fa8 <get_led_color>
 8001624:	4603      	mov	r3, r0
 8001626:	2b1e      	cmp	r3, #30
 8001628:	d105      	bne.n	8001636 <pedestrian_scramble+0x2e>
				pedestrian_active = 1;
 800162a:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <pedestrian_scramble+0x29c>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
				flag_button = 1;
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <pedestrian_scramble+0x2a0>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
			}
		}

		if ( get_led_color(TRAFFIC_1_LED) == RED_COLOR && (flag_button || pedestrian_wanna_go) ) {
 8001636:	2028      	movs	r0, #40	; 0x28
 8001638:	f000 fcb6 	bl	8001fa8 <get_led_color>
 800163c:	4603      	mov	r3, r0
 800163e:	2b1e      	cmp	r3, #30
 8001640:	d12a      	bne.n	8001698 <pedestrian_scramble+0x90>
 8001642:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <pedestrian_scramble+0x2a0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <pedestrian_scramble+0x4a>
 800164a:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <pedestrian_scramble+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d022      	beq.n	8001698 <pedestrian_scramble+0x90>
			pedestrian_active = 1;
 8001652:	4b94      	ldr	r3, [pc, #592]	; (80018a4 <pedestrian_scramble+0x29c>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
			/* Calculate number of step for increase frequency and decrease delay time */
			FREQ_STEP = 120 / (SEG7_CLOCK[0] / TIME_UNIT);
 8001658:	4b94      	ldr	r3, [pc, #592]	; (80018ac <pedestrian_scramble+0x2a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a94      	ldr	r2, [pc, #592]	; (80018b0 <pedestrian_scramble+0x2a8>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1192      	asrs	r2, r2, #6
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2278      	movs	r2, #120	; 0x78
 800166a:	fb92 f3f3 	sdiv	r3, r2, r3
 800166e:	4a91      	ldr	r2, [pc, #580]	; (80018b4 <pedestrian_scramble+0x2ac>)
 8001670:	6013      	str	r3, [r2, #0]
			DELAY_STEP = 400 / (SEG7_CLOCK[0] / TIME_UNIT);
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <pedestrian_scramble+0x2a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a8e      	ldr	r2, [pc, #568]	; (80018b0 <pedestrian_scramble+0x2a8>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	1192      	asrs	r2, r2, #6
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001686:	fb92 f3f3 	sdiv	r3, r2, r3
 800168a:	4a8b      	ldr	r2, [pc, #556]	; (80018b8 <pedestrian_scramble+0x2b0>)
 800168c:	6013      	str	r3, [r2, #0]
			time_allow_pedestrian = SEG7_CLOCK[0];
 800168e:	4b87      	ldr	r3, [pc, #540]	; (80018ac <pedestrian_scramble+0x2a4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <pedestrian_scramble+0x2b4>)
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e006      	b.n	80016a6 <pedestrian_scramble+0x9e>
		}
		else {
			pedestrian_active = 0;
 8001698:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <pedestrian_scramble+0x29c>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 800169e:	211e      	movs	r1, #30
 80016a0:	202a      	movs	r0, #42	; 0x2a
 80016a2:	f000 fc07 	bl	8001eb4 <set_led_color>
		}

		if (pedestrian_active) {
 80016a6:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <pedestrian_scramble+0x29c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8144 	beq.w	8001938 <pedestrian_scramble+0x330>
			set_led_color(PEDESTRIAN_LED, GREEN_COLOR);
 80016b0:	2120      	movs	r1, #32
 80016b2:	202a      	movs	r0, #42	; 0x2a
 80016b4:	f000 fbfe 	bl	8001eb4 <set_led_color>
			/* Buzzer frequency */
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80016b8:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <pedestrian_scramble+0x2b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(delay);
 80016c0:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <pedestrian_scramble+0x2bc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fd69 	bl	800219c <HAL_Delay>

			/* If 2/3 time has passed, need more extra step*/
			if (SEG7_CLOCK[0] >= 2 * time_allow_pedestrian / 3) {
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <pedestrian_scramble+0x2a4>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <pedestrian_scramble+0x2b4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	497c      	ldr	r1, [pc, #496]	; (80018c8 <pedestrian_scramble+0x2c0>)
 80016d6:	fb81 0103 	smull	r0, r1, r1, r3
 80016da:	17db      	asrs	r3, r3, #31
 80016dc:	1acb      	subs	r3, r1, r3
 80016de:	429a      	cmp	r2, r3
 80016e0:	db62      	blt.n	80017a8 <pedestrian_scramble+0x1a0>
				extra_step += 0.09;
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <pedestrian_scramble+0x2c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff4a 	bl	8000580 <__aeabi_f2d>
 80016ec:	a368      	add	r3, pc, #416	; (adr r3, 8001890 <pedestrian_scramble+0x288>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fde7 	bl	80002c4 <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7fe ff97 	bl	8000630 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	4a71      	ldr	r2, [pc, #452]	; (80018cc <pedestrian_scramble+0x2c4>)
 8001706:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += FREQ_STEP);
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <pedestrian_scramble+0x2c8>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <pedestrian_scramble+0x2ac>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <pedestrian_scramble+0x2c8>)
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <pedestrian_scramble+0x2c8>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <pedestrian_scramble+0x2b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f88d 	bl	8000844 <__aeabi_i2f>
 800172a:	4604      	mov	r4, r0
 800172c:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <pedestrian_scramble+0x2b0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f887 	bl	8000844 <__aeabi_i2f>
 8001736:	4602      	mov	r2, r0
 8001738:	4b64      	ldr	r3, [pc, #400]	; (80018cc <pedestrian_scramble+0x2c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7fe fd06 	bl	8000150 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4619      	mov	r1, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff f93b 	bl	80009c4 <__aeabi_fcmpgt>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <pedestrian_scramble+0x194>
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f873 	bl	8000844 <__aeabi_i2f>
 800175e:	4604      	mov	r4, r0
 8001760:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <pedestrian_scramble+0x2b0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f86d 	bl	8000844 <__aeabi_i2f>
 800176a:	4602      	mov	r2, r0
 800176c:	4b57      	ldr	r3, [pc, #348]	; (80018cc <pedestrian_scramble+0x2c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f7fe fcec 	bl	8000150 <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	4619      	mov	r1, r3
 800177c:	4620      	mov	r0, r4
 800177e:	f7fe ffab 	bl	80006d8 <__aeabi_fsub>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f927 	bl	80009d8 <__aeabi_f2iz>
 800178a:	4603      	mov	r3, r0
 800178c:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <pedestrian_scramble+0x2bc>)
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fd01 	bl	800219c <HAL_Delay>
 800179a:	e0c9      	b.n	8001930 <pedestrian_scramble+0x328>
				else HAL_Delay(delay);
 800179c:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <pedestrian_scramble+0x2bc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fcfb 	bl	800219c <HAL_Delay>
 80017a6:	e0c3      	b.n	8001930 <pedestrian_scramble+0x328>
			} else {
				extra_step += 0.3;
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <pedestrian_scramble+0x2c4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fee7 	bl	8000580 <__aeabi_f2d>
 80017b2:	a339      	add	r3, pc, #228	; (adr r3, 8001898 <pedestrian_scramble+0x290>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe fd84 	bl	80002c4 <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7fe ff34 	bl	8000630 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <pedestrian_scramble+0x2c4>)
 80017cc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += extra_step * FREQ_STEP);
 80017ce:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <pedestrian_scramble+0x2c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f836 	bl	8000844 <__aeabi_i2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <pedestrian_scramble+0x2ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f830 	bl	8000844 <__aeabi_i2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <pedestrian_scramble+0x2c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7fe fcaf 	bl	8000150 <__aeabi_fmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7fe ff70 	bl	80006dc <__addsf3>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8ea 	bl	80009d8 <__aeabi_f2iz>
 8001804:	4603      	mov	r3, r0
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <pedestrian_scramble+0x2c8>)
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <pedestrian_scramble+0x2c8>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <pedestrian_scramble+0x2b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f813 	bl	8000844 <__aeabi_i2f>
 800181e:	4604      	mov	r4, r0
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <pedestrian_scramble+0x2b0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f80d 	bl	8000844 <__aeabi_i2f>
 800182a:	4602      	mov	r2, r0
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <pedestrian_scramble+0x2c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7fe fc8c 	bl	8000150 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff f8c1 	bl	80009c4 <__aeabi_fcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d045      	beq.n	80018d4 <pedestrian_scramble+0x2cc>
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <pedestrian_scramble+0x2bc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fff9 	bl	8000844 <__aeabi_i2f>
 8001852:	4604      	mov	r4, r0
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <pedestrian_scramble+0x2b0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fff3 	bl	8000844 <__aeabi_i2f>
 800185e:	4602      	mov	r2, r0
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <pedestrian_scramble+0x2c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7fe fc72 	bl	8000150 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f7fe ff31 	bl	80006d8 <__aeabi_fsub>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f8ad 	bl	80009d8 <__aeabi_f2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <pedestrian_scramble+0x2bc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fc87 	bl	800219c <HAL_Delay>
 800188e:	e04f      	b.n	8001930 <pedestrian_scramble+0x328>
 8001890:	70a3d70a 	.word	0x70a3d70a
 8001894:	3fb70a3d 	.word	0x3fb70a3d
 8001898:	33333333 	.word	0x33333333
 800189c:	3fd33333 	.word	0x3fd33333
 80018a0:	20000130 	.word	0x20000130
 80018a4:	2000011c 	.word	0x2000011c
 80018a8:	20000128 	.word	0x20000128
 80018ac:	2000000c 	.word	0x2000000c
 80018b0:	10624dd3 	.word	0x10624dd3
 80018b4:	20000120 	.word	0x20000120
 80018b8:	20000040 	.word	0x20000040
 80018bc:	20000124 	.word	0x20000124
 80018c0:	200001a0 	.word	0x200001a0
 80018c4:	20000038 	.word	0x20000038
 80018c8:	55555556 	.word	0x55555556
 80018cc:	20000044 	.word	0x20000044
 80018d0:	2000003c 	.word	0x2000003c
				else if (delay > extra_step * 10) HAL_Delay(delay = - extra_step * 20);
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <pedestrian_scramble+0x374>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe ffb3 	bl	8000844 <__aeabi_i2f>
 80018de:	4604      	mov	r4, r0
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <pedestrian_scramble+0x378>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4927      	ldr	r1, [pc, #156]	; (8001984 <pedestrian_scramble+0x37c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fc32 	bl	8000150 <__aeabi_fmul>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff f867 	bl	80009c4 <__aeabi_fcmpgt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d014      	beq.n	8001926 <pedestrian_scramble+0x31e>
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <pedestrian_scramble+0x378>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001904:	4920      	ldr	r1, [pc, #128]	; (8001988 <pedestrian_scramble+0x380>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fc22 	bl	8000150 <__aeabi_fmul>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f862 	bl	80009d8 <__aeabi_f2iz>
 8001914:	4603      	mov	r3, r0
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <pedestrian_scramble+0x374>)
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <pedestrian_scramble+0x374>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fc3c 	bl	800219c <HAL_Delay>
 8001924:	e004      	b.n	8001930 <pedestrian_scramble+0x328>
				else HAL_Delay(delay);
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <pedestrian_scramble+0x374>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fc36 	bl	800219c <HAL_Delay>
			}
			trigger_pedestrian_func = 1;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <pedestrian_scramble+0x384>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
			if (trigger_pedestrian_func) {
				pedestrian_wanna_go = 0;
				trigger_pedestrian_func = 0;
			}
		}
}
 8001936:	e01f      	b.n	8001978 <pedestrian_scramble+0x370>
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 8001938:	211e      	movs	r1, #30
 800193a:	202a      	movs	r0, #42	; 0x2a
 800193c:	f000 faba 	bl	8001eb4 <set_led_color>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <pedestrian_scramble+0x388>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
			delay = TIME_UNIT;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <pedestrian_scramble+0x374>)
 800194a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194e:	601a      	str	r2, [r3, #0]
			FREQ = 10;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <pedestrian_scramble+0x38c>)
 8001952:	220a      	movs	r2, #10
 8001954:	601a      	str	r2, [r3, #0]
			extra_step = 1;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <pedestrian_scramble+0x378>)
 8001958:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800195c:	601a      	str	r2, [r3, #0]
			flag_button = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <pedestrian_scramble+0x390>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
			if (trigger_pedestrian_func) {
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <pedestrian_scramble+0x384>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <pedestrian_scramble+0x370>
				pedestrian_wanna_go = 0;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <pedestrian_scramble+0x394>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
				trigger_pedestrian_func = 0;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <pedestrian_scramble+0x384>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	bd98      	pop	{r3, r4, r7, pc}
 800197c:	20000038 	.word	0x20000038
 8001980:	20000044 	.word	0x20000044
 8001984:	41200000 	.word	0x41200000
 8001988:	41a00000 	.word	0x41a00000
 800198c:	2000012c 	.word	0x2000012c
 8001990:	200001a0 	.word	0x200001a0
 8001994:	2000003c 	.word	0x2000003c
 8001998:	20000128 	.word	0x20000128
 800199c:	20000130 	.word	0x20000130

080019a0 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <SCH_Update+0xa4>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4927      	ldr	r1, [pc, #156]	; (8001a48 <SCH_Update+0xa8>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	3304      	adds	r3, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <SCH_Update+0x44>
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <SCH_Update+0xa4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4921      	ldr	r1, [pc, #132]	; (8001a48 <SCH_Update+0xa8>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	3304      	adds	r3, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1e59      	subs	r1, r3, #1
 80019d2:	481d      	ldr	r0, [pc, #116]	; (8001a48 <SCH_Update+0xa8>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4403      	add	r3, r0
 80019de:	3304      	adds	r3, #4
 80019e0:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 80019e2:	e02a      	b.n	8001a3a <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <SCH_Update+0xa4>)
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <SCH_Update+0xa4>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4816      	ldr	r0, [pc, #88]	; (8001a48 <SCH_Update+0xa8>)
 80019ee:	460b      	mov	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	3308      	adds	r3, #8
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <SCH_Update+0xa8>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4403      	add	r3, r0
 8001a08:	3304      	adds	r3, #4
 8001a0a:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <SCH_Update+0xa4>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	490d      	ldr	r1, [pc, #52]	; (8001a48 <SCH_Update+0xa8>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <SCH_Update+0xa4>)
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2d8      	uxtb	r0, r3
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <SCH_Update+0xa8>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	330c      	adds	r3, #12
 8001a36:	4602      	mov	r2, r0
 8001a38:	701a      	strb	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000134 	.word	0x20000134
 8001a48:	20000274 	.word	0x20000274

08001a4c <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <setTimer1+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a5e:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <setTimer1+0x2c>)
 8001a60:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <setTimer1+0x30>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000048 	.word	0x20000048
 8001a78:	2000014c 	.word	0x2000014c
 8001a7c:	20000138 	.word	0x20000138

08001a80 <setTimer2>:
void setTimer2(int duration) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <setTimer2+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a92:	4a06      	ldr	r2, [pc, #24]	; (8001aac <setTimer2+0x2c>)
 8001a94:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <setTimer2+0x30>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000048 	.word	0x20000048
 8001aac:	20000150 	.word	0x20000150
 8001ab0:	2000013c 	.word	0x2000013c

08001ab4 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <timerRun+0xac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dd0b      	ble.n	8001ad8 <timerRun+0x24>
		timer1_counter--;
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <timerRun+0xac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <timerRun+0xac>)
 8001ac8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <timerRun+0xac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dc02      	bgt.n	8001ad8 <timerRun+0x24>
			timer1_flag = 1;
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <timerRun+0xb0>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <timerRun+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dd0b      	ble.n	8001af8 <timerRun+0x44>
		timer2_counter--;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <timerRun+0xb4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <timerRun+0xb4>)
 8001ae8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <timerRun+0xb4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	dc02      	bgt.n	8001af8 <timerRun+0x44>
			timer2_flag = 1;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <timerRun+0xb8>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <timerRun+0xbc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd0b      	ble.n	8001b18 <timerRun+0x64>
		timer3_counter--;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <timerRun+0xbc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <timerRun+0xbc>)
 8001b08:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <timerRun+0xbc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	dc02      	bgt.n	8001b18 <timerRun+0x64>
			timer3_flag = 1;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <timerRun+0xc0>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <timerRun+0xc4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dd0b      	ble.n	8001b38 <timerRun+0x84>
		timer4_counter--;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <timerRun+0xc4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <timerRun+0xc4>)
 8001b28:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <timerRun+0xc4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dc02      	bgt.n	8001b38 <timerRun+0x84>
			timer4_flag = 1;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <timerRun+0xc8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <timerRun+0xcc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dd0b      	ble.n	8001b58 <timerRun+0xa4>
		timer5_counter--;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <timerRun+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <timerRun+0xcc>)
 8001b48:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <timerRun+0xcc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	dc02      	bgt.n	8001b58 <timerRun+0xa4>
			timer5_flag = 1;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <timerRun+0xd0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	2000014c 	.word	0x2000014c
 8001b64:	20000138 	.word	0x20000138
 8001b68:	20000150 	.word	0x20000150
 8001b6c:	2000013c 	.word	0x2000013c
 8001b70:	20000154 	.word	0x20000154
 8001b74:	20000140 	.word	0x20000140
 8001b78:	20000158 	.word	0x20000158
 8001b7c:	20000144 	.word	0x20000144
 8001b80:	2000015c 	.word	0x2000015c
 8001b84:	20000148 	.word	0x20000148

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x5c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_MspInit+0x60>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_MspInit+0x60>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d114      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 fbb9 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f000 fbd2 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c26:	e018      	b.n	8001c5a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_TIM_Base_MspInit+0x7c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d113      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201d      	movs	r0, #29
 8001c50:	f000 fb9f 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c54:	201d      	movs	r0, #29
 8001c56:	f000 fbb8 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40000400 	.word	0x40000400

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_TIM_MspPostInit+0x58>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d117      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ca4:	2340      	movs	r3, #64	; 0x40
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_MspPostInit+0x60>)
 8001cb8:	f000 fba2 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <HAL_UART_MspInit+0x70>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d123      	bne.n	8001d38 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_UART_MspInit+0x74>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d20:	230c      	movs	r3, #12
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_UART_MspInit+0x78>)
 8001d34:	f000 fb64 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40004400 	.word	0x40004400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f9e7 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM2_IRQHandler+0x10>)
 8001da2:	f001 fac7 	bl	8003334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001e8 	.word	0x200001e8

08001db0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM3_IRQHandler+0x10>)
 8001db6:	f001 fabd 	bl	8003334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200001a0 	.word	0x200001a0

08001dc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001dc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dcc:	f000 fce4 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f002 fa10 	bl	8004228 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20005000 	.word	0x20005000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000160 	.word	0x20000160
 8001e3c:	200005a8 	.word	0x200005a8

08001e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <helper_set_led_color>:
 */


#include "traffic_light.h"

void helper_set_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2, int COLOR) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	817b      	strh	r3, [r7, #10]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	813b      	strh	r3, [r7, #8]
	switch (COLOR) {
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d018      	beq.n	8001e98 <helper_set_led_color+0x4c>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	dc1d      	bgt.n	8001ea8 <helper_set_led_color+0x5c>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b1e      	cmp	r3, #30
 8001e70:	d003      	beq.n	8001e7a <helper_set_led_color+0x2e>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b1f      	cmp	r3, #31
 8001e76:	d008      	beq.n	8001e8a <helper_set_led_color+0x3e>
		case GREEN_COLOR:
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
			GPIOy->BSRR = GPIO_Pin2;
			break;
	}
}
 8001e78:	e016      	b.n	8001ea8 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001e7a:	897a      	ldrh	r2, [r7, #10]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = (uint32_t)GPIO_Pin2 << 16u;
 8001e80:	893b      	ldrh	r3, [r7, #8]
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
			break;
 8001e88:	e00e      	b.n	8001ea8 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001e8a:	897a      	ldrh	r2, [r7, #10]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001e90:	893a      	ldrh	r2, [r7, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]
			break;
 8001e96:	e007      	b.n	8001ea8 <helper_set_led_color+0x5c>
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	041a      	lsls	r2, r3, #16
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001ea0:	893a      	ldrh	r2, [r7, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
			break;
 8001ea6:	bf00      	nop
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <set_led_color>:

void set_led_color(int led, int color) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	switch (led) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ec2:	d01d      	beq.n	8001f00 <set_led_color+0x4c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ec8:	dc25      	bgt.n	8001f16 <set_led_color+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b28      	cmp	r3, #40	; 0x28
 8001ece:	d003      	beq.n	8001ed8 <set_led_color+0x24>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b29      	cmp	r3, #41	; 0x29
 8001ed4:	d009      	beq.n	8001eea <set_led_color+0x36>
		case PEDESTRIAN_LED:
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
					Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin, color);
			break;
	}
}
 8001ed6:	e01e      	b.n	8001f16 <set_led_color+0x62>
			helper_set_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2310      	movs	r3, #16
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <set_led_color+0x6c>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <set_led_color+0x70>)
 8001ee4:	f7ff ffb2 	bl	8001e4c <helper_set_led_color>
			break;
 8001ee8:	e015      	b.n	8001f16 <set_led_color+0x62>
			helper_set_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <set_led_color+0x70>)
 8001ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef8:	480a      	ldr	r0, [pc, #40]	; (8001f24 <set_led_color+0x70>)
 8001efa:	f7ff ffa7 	bl	8001e4c <helper_set_led_color>
			break;
 8001efe:	e00a      	b.n	8001f16 <set_led_color+0x62>
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <set_led_color+0x74>)
 8001f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <set_led_color+0x74>)
 8001f10:	f7ff ff9c 	bl	8001e4c <helper_set_led_color>
			break;
 8001f14:	bf00      	nop
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40011000 	.word	0x40011000

08001f2c <helper_get_led_color>:

int helper_get_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
	GPIO_PinState bitstatus1;
	GPIO_PinState bitstatus2;

	if ((GPIOx->IDR & GPIO_Pin1) != (uint32_t)GPIO_PIN_RESET) bitstatus1 = GPIO_PIN_SET;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	897b      	ldrh	r3, [r7, #10]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <helper_get_led_color+0x26>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
 8001f50:	e001      	b.n	8001f56 <helper_get_led_color+0x2a>
	else bitstatus1 = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]

	if ((GPIOy->IDR & GPIO_Pin2) != (uint32_t)GPIO_PIN_RESET) bitstatus2 = GPIO_PIN_SET;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	893b      	ldrh	r3, [r7, #8]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <helper_get_led_color+0x3c>
 8001f62:	2301      	movs	r3, #1
 8001f64:	75bb      	strb	r3, [r7, #22]
 8001f66:	e001      	b.n	8001f6c <helper_get_led_color+0x40>
	else bitstatus2 = GPIO_PIN_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75bb      	strb	r3, [r7, #22]

	if (!bitstatus1 && bitstatus2) return GREEN_COLOR;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <helper_get_led_color+0x50>
 8001f72:	7dbb      	ldrb	r3, [r7, #22]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <helper_get_led_color+0x50>
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e010      	b.n	8001f9e <helper_get_led_color+0x72>
	else if (bitstatus1 && !bitstatus2) return RED_COLOR;
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <helper_get_led_color+0x60>
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <helper_get_led_color+0x60>
 8001f88:	231e      	movs	r3, #30
 8001f8a:	e008      	b.n	8001f9e <helper_get_led_color+0x72>
	else if (bitstatus1 && bitstatus2) return AMBER_COLOR;
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <helper_get_led_color+0x70>
 8001f92:	7dbb      	ldrb	r3, [r7, #22]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <helper_get_led_color+0x70>
 8001f98:	231f      	movs	r3, #31
 8001f9a:	e000      	b.n	8001f9e <helper_get_led_color+0x72>

	return UNDEFINED_COLOR;
 8001f9c:	231d      	movs	r3, #29
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <get_led_color>:

int get_led_color(int led) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	switch(led) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001fb4:	d01b      	beq.n	8001fee <get_led_color+0x46>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fba:	dc22      	bgt.n	8002002 <get_led_color+0x5a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b28      	cmp	r3, #40	; 0x28
 8001fc0:	d003      	beq.n	8001fca <get_led_color+0x22>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b29      	cmp	r3, #41	; 0x29
 8001fc6:	d008      	beq.n	8001fda <get_led_color+0x32>
 8001fc8:	e01b      	b.n	8002002 <get_led_color+0x5a>
	case TRAFFIC_1_LED:
		return helper_get_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 8001fca:	2310      	movs	r3, #16
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	; (800200c <get_led_color+0x64>)
 8001fce:	2101      	movs	r1, #1
 8001fd0:	480f      	ldr	r0, [pc, #60]	; (8002010 <get_led_color+0x68>)
 8001fd2:	f7ff ffab 	bl	8001f2c <helper_get_led_color>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	e014      	b.n	8002004 <get_led_color+0x5c>
				Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
		break;
	case TRAFFIC_2_LED:
		return helper_get_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8001fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fde:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <get_led_color+0x68>)
 8001fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe4:	480a      	ldr	r0, [pc, #40]	; (8002010 <get_led_color+0x68>)
 8001fe6:	f7ff ffa1 	bl	8001f2c <helper_get_led_color>
 8001fea:	4603      	mov	r3, r0
 8001fec:	e00a      	b.n	8002004 <get_led_color+0x5c>
				Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
		break;
	case PEDESTRIAN_LED:
		return helper_get_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <get_led_color+0x6c>)
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <get_led_color+0x6c>)
 8001ffa:	f7ff ff97 	bl	8001f2c <helper_get_led_color>
 8001ffe:	4603      	mov	r3, r0
 8002000:	e000      	b.n	8002004 <get_led_color+0x5c>
				Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin);
		break;
	default:
		return UNDEFINED_COLOR;
 8002002:	231d      	movs	r3, #29
		break;
	}

	return UNDEFINED_COLOR;
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	40011000 	.word	0x40011000

08002018 <helper_clear_led>:

void helper_clear_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	041a      	lsls	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <clear_led>:
void clear_led(int led) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	switch(led) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b2a      	cmp	r3, #42	; 0x2a
 8002044:	d014      	beq.n	8002070 <clear_led+0x38>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b2a      	cmp	r3, #42	; 0x2a
 800204a:	dc17      	bgt.n	800207c <clear_led+0x44>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b28      	cmp	r3, #40	; 0x28
 8002050:	d003      	beq.n	800205a <clear_led+0x22>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b29      	cmp	r3, #41	; 0x29
 8002056:	d005      	beq.n	8002064 <clear_led+0x2c>
		break;
	case PEDESTRIAN_LED:
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
		break;
	}
}
 8002058:	e010      	b.n	800207c <clear_led+0x44>
		helper_clear_led(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 800205a:	2101      	movs	r1, #1
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <clear_led+0x4c>)
 800205e:	f7ff ffdb 	bl	8002018 <helper_clear_led>
		break;
 8002062:	e00b      	b.n	800207c <clear_led+0x44>
		helper_clear_led(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8002064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <clear_led+0x4c>)
 800206a:	f7ff ffd5 	bl	8002018 <helper_clear_led>
		break;
 800206e:	e005      	b.n	800207c <clear_led+0x44>
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
 8002070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <clear_led+0x50>)
 8002076:	f7ff ffcf 	bl	8002018 <helper_clear_led>
		break;
 800207a:	bf00      	nop
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40010c00 	.word	0x40010c00
 8002088:	40011000 	.word	0x40011000

0800208c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a4:	4c0a      	ldr	r4, [pc, #40]	; (80020d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b2:	f7ff fec5 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f002 f8bd 	bl	8004234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ba:	f7ff f86f 	bl	800119c <main>
  bx lr
 80020be:	4770      	bx	lr
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80020c8:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 80020cc:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80020d0:	200005a8 	.word	0x200005a8

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x28>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x28>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f947 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fd48 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f95f 	bl	80023e6 <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f927 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000004c 	.word	0x2000004c
 800215c:	20000054 	.word	0x20000054
 8002160:	20000050 	.word	0x20000050

08002164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x1c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_IncTick+0x20>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000054 	.word	0x20000054
 8002184:	20000594 	.word	0x20000594

08002188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_GetTick+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000594 	.word	0x20000594

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fff0 	bl	8002188 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffe0 	bl	8002188 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000054 	.word	0x20000054

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4906      	ldr	r1, [pc, #24]	; (800227c <__NVIC_EnableIRQ+0x34>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff90 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff2d 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff42 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff90 	bl	80022d4 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5f 	bl	8002280 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff35 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b08b      	sub	sp, #44	; 0x2c
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	e169      	b.n	80026e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002414:	2201      	movs	r2, #1
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8158 	bne.w	80026e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a9a      	ldr	r2, [pc, #616]	; (80026a0 <HAL_GPIO_Init+0x2a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d05e      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
 800243c:	4a98      	ldr	r2, [pc, #608]	; (80026a0 <HAL_GPIO_Init+0x2a0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d875      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 8002442:	4a98      	ldr	r2, [pc, #608]	; (80026a4 <HAL_GPIO_Init+0x2a4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d058      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
 8002448:	4a96      	ldr	r2, [pc, #600]	; (80026a4 <HAL_GPIO_Init+0x2a4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d86f      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 800244e:	4a96      	ldr	r2, [pc, #600]	; (80026a8 <HAL_GPIO_Init+0x2a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d052      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
 8002454:	4a94      	ldr	r2, [pc, #592]	; (80026a8 <HAL_GPIO_Init+0x2a8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d869      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 800245a:	4a94      	ldr	r2, [pc, #592]	; (80026ac <HAL_GPIO_Init+0x2ac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04c      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
 8002460:	4a92      	ldr	r2, [pc, #584]	; (80026ac <HAL_GPIO_Init+0x2ac>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d863      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 8002466:	4a92      	ldr	r2, [pc, #584]	; (80026b0 <HAL_GPIO_Init+0x2b0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d046      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
 800246c:	4a90      	ldr	r2, [pc, #576]	; (80026b0 <HAL_GPIO_Init+0x2b0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d85d      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 8002472:	2b12      	cmp	r3, #18
 8002474:	d82a      	bhi.n	80024cc <HAL_GPIO_Init+0xcc>
 8002476:	2b12      	cmp	r3, #18
 8002478:	d859      	bhi.n	800252e <HAL_GPIO_Init+0x12e>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <HAL_GPIO_Init+0x80>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024fb 	.word	0x080024fb
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080024e7 	.word	0x080024e7
 800248c:	08002529 	.word	0x08002529
 8002490:	0800252f 	.word	0x0800252f
 8002494:	0800252f 	.word	0x0800252f
 8002498:	0800252f 	.word	0x0800252f
 800249c:	0800252f 	.word	0x0800252f
 80024a0:	0800252f 	.word	0x0800252f
 80024a4:	0800252f 	.word	0x0800252f
 80024a8:	0800252f 	.word	0x0800252f
 80024ac:	0800252f 	.word	0x0800252f
 80024b0:	0800252f 	.word	0x0800252f
 80024b4:	0800252f 	.word	0x0800252f
 80024b8:	0800252f 	.word	0x0800252f
 80024bc:	0800252f 	.word	0x0800252f
 80024c0:	0800252f 	.word	0x0800252f
 80024c4:	080024dd 	.word	0x080024dd
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	4a79      	ldr	r2, [pc, #484]	; (80026b4 <HAL_GPIO_Init+0x2b4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024d2:	e02c      	b.n	800252e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	623b      	str	r3, [r7, #32]
          break;
 80024da:	e029      	b.n	8002530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	3304      	adds	r3, #4
 80024e2:	623b      	str	r3, [r7, #32]
          break;
 80024e4:	e024      	b.n	8002530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	3308      	adds	r3, #8
 80024ec:	623b      	str	r3, [r7, #32]
          break;
 80024ee:	e01f      	b.n	8002530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	330c      	adds	r3, #12
 80024f6:	623b      	str	r3, [r7, #32]
          break;
 80024f8:	e01a      	b.n	8002530 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002502:	2304      	movs	r3, #4
 8002504:	623b      	str	r3, [r7, #32]
          break;
 8002506:	e013      	b.n	8002530 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002510:	2308      	movs	r3, #8
 8002512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	611a      	str	r2, [r3, #16]
          break;
 800251a:	e009      	b.n	8002530 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800251c:	2308      	movs	r3, #8
 800251e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	615a      	str	r2, [r3, #20]
          break;
 8002526:	e003      	b.n	8002530 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
          break;
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x130>
          break;
 800252e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2bff      	cmp	r3, #255	; 0xff
 8002534:	d801      	bhi.n	800253a <HAL_GPIO_Init+0x13a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	e001      	b.n	800253e <HAL_GPIO_Init+0x13e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2bff      	cmp	r3, #255	; 0xff
 8002544:	d802      	bhi.n	800254c <HAL_GPIO_Init+0x14c>
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x152>
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	3b08      	subs	r3, #8
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	210f      	movs	r1, #15
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	431a      	orrs	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80b1 	beq.w	80026e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002580:	4b4d      	ldr	r3, [pc, #308]	; (80026b8 <HAL_GPIO_Init+0x2b8>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a4c      	ldr	r2, [pc, #304]	; (80026b8 <HAL_GPIO_Init+0x2b8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x2b8>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002598:	4a48      	ldr	r2, [pc, #288]	; (80026bc <HAL_GPIO_Init+0x2bc>)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <HAL_GPIO_Init+0x2c0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <HAL_GPIO_Init+0x1ec>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_Init+0x1e8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <HAL_GPIO_Init+0x2c8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1e4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3d      	ldr	r2, [pc, #244]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_Init+0x1e0>
 80025dc:	2303      	movs	r3, #3
 80025de:	e006      	b.n	80025ee <HAL_GPIO_Init+0x1ee>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e004      	b.n	80025ee <HAL_GPIO_Init+0x1ee>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_Init+0x1ee>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_GPIO_Init+0x1ee>
 80025ec:	2300      	movs	r3, #0
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025fe:	492f      	ldr	r1, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x2bc>)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002618:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	492c      	ldr	r1, [pc, #176]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	43db      	mvns	r3, r3
 800262e:	4928      	ldr	r1, [pc, #160]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002630:	4013      	ands	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4922      	ldr	r1, [pc, #136]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	43db      	mvns	r3, r3
 8002656:	491e      	ldr	r1, [pc, #120]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002658:	4013      	ands	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4918      	ldr	r1, [pc, #96]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	43db      	mvns	r3, r3
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002680:	4013      	ands	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d021      	beq.n	80026d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
 800269c:	e021      	b.n	80026e2 <HAL_GPIO_Init+0x2e2>
 800269e:	bf00      	nop
 80026a0:	10320000 	.word	0x10320000
 80026a4:	10310000 	.word	0x10310000
 80026a8:	10220000 	.word	0x10220000
 80026ac:	10210000 	.word	0x10210000
 80026b0:	10120000 	.word	0x10120000
 80026b4:	10110000 	.word	0x10110000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40010800 	.word	0x40010800
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40011400 	.word	0x40011400
 80026d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_GPIO_Init+0x304>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	43db      	mvns	r3, r3
 80026dc:	4909      	ldr	r1, [pc, #36]	; (8002704 <HAL_GPIO_Init+0x304>)
 80026de:	4013      	ands	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f ae8e 	bne.w	8002414 <HAL_GPIO_Init+0x14>
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	372c      	adds	r7, #44	; 0x2c
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e001      	b.n	800272a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
 8002742:	4613      	mov	r3, r2
 8002744:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002746:	787b      	ldrb	r3, [r7, #1]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274c:	887a      	ldrh	r2, [r7, #2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002752:	e003      	b.n	800275c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	611a      	str	r2, [r3, #16]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	041a      	lsls	r2, r3, #16
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43d9      	mvns	r1, r3
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	400b      	ands	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe ff15 	bl	80015e6 <HAL_GPIO_EXTI_Callback>
  }
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40010400 	.word	0x40010400

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e26c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e8:	4b92      	ldr	r3, [pc, #584]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d00c      	beq.n	800280e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027f4:	4b8f      	ldr	r3, [pc, #572]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d112      	bne.n	8002826 <HAL_RCC_OscConfig+0x5e>
 8002800:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d10b      	bne.n	8002826 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280e:	4b89      	ldr	r3, [pc, #548]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d06c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x12c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d168      	bne.n	80028f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e246      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x76>
 8002830:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7f      	ldr	r2, [pc, #508]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	e02e      	b.n	800289c <HAL_RCC_OscConfig+0xd4>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x98>
 8002846:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a7a      	ldr	r2, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a77      	ldr	r2, [pc, #476]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xd4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0xbc>
 800286a:	4b72      	ldr	r3, [pc, #456]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xd4>
 8002884:	4b6b      	ldr	r3, [pc, #428]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6a      	ldr	r2, [pc, #424]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a67      	ldr	r2, [pc, #412]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fc70 	bl	8002188 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fc6c 	bl	8002188 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1fa      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xe4>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fc5c 	bl	8002188 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fc58 	bl	8002188 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1e6      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x10c>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002902:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x18c>
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x176>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1ba      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4939      	ldr	r1, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7ff fc11 	bl	8002188 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fc0d 	bl	8002188 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e19b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4927      	ldr	r1, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fbf0 	bl	8002188 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff fbec 	bl	8002188 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e17a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d03a      	beq.n	8002a4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d019      	beq.n	8002a12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_RCC_OscConfig+0x274>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7ff fbd0 	bl	8002188 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff fbcc 	bl	8002188 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e15a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f000 fad8 	bl	8002fc0 <RCC_Delay>
 8002a10:	e01c      	b.n	8002a4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_OscConfig+0x274>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7ff fbb6 	bl	8002188 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1e:	e00f      	b.n	8002a40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff fbb2 	bl	8002188 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d908      	bls.n	8002a40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e140      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	42420000 	.word	0x42420000
 8002a3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e9      	bne.n	8002a20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a6 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b97      	ldr	r3, [pc, #604]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b94      	ldr	r3, [pc, #592]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a93      	ldr	r2, [pc, #588]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b91      	ldr	r3, [pc, #580]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b8e      	ldr	r3, [pc, #568]	; (8002cc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a8a      	ldr	r2, [pc, #552]	; (8002cc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff fb73 	bl	8002188 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7ff fb6f 	bl	8002188 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0fd      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x4f8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x312>
 8002acc:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a7a      	ldr	r2, [pc, #488]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e02d      	b.n	8002b36 <HAL_RCC_OscConfig+0x36e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x334>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6213      	str	r3, [r2, #32]
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a72      	ldr	r2, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x36e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x356>
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x36e>
 8002b1e:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fb23 	bl	8002188 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7ff fb1f 	bl	8002188 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0ab      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <HAL_RCC_OscConfig+0x37e>
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff fb0d 	bl	8002188 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7ff fb09 	bl	8002188 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e095      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8081 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d061      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d146      	bne.n	8002c52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x4fc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff fadd 	bl	8002188 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7ff fad9 	bl	8002188 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e067      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bfa:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	492d      	ldr	r1, [pc, #180]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a19      	ldr	r1, [r3, #32]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	4927      	ldr	r1, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x4fc>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7ff faad 	bl	8002188 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7ff faa9 	bl	8002188 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e037      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46a>
 8002c50:	e02f      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_RCC_OscConfig+0x4fc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff fa96 	bl	8002188 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff fa92 	bl	8002188 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e020      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x498>
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x4f4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420060 	.word	0x42420060

08002cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d0      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d910      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4965      	ldr	r1, [pc, #404]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0b8      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d3c:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a52      	ldr	r2, [pc, #328]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	494d      	ldr	r1, [pc, #308]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d040      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e073      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e06b      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4936      	ldr	r1, [pc, #216]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7ff f9e6 	bl	8002188 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7ff f9e2 	bl	8002188 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e053      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d210      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4922      	ldr	r1, [pc, #136]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e032      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4916      	ldr	r1, [pc, #88]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	490e      	ldr	r1, [pc, #56]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e56:	f000 f821 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	490a      	ldr	r1, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	5ccb      	ldrb	r3, [r1, r3]
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1cc>)
 8002e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f944 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08004b34 	.word	0x08004b34
 8002e94:	2000004c 	.word	0x2000004c
 8002e98:	20000050 	.word	0x20000050

08002e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b490      	push	{r4, r7}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ea4:	1d3c      	adds	r4, r7, #4
 8002ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eac:	f240 2301 	movw	r3, #513	; 0x201
 8002eb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x40>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eda:	e02d      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ede:	623b      	str	r3, [r7, #32]
      break;
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eee:	4413      	add	r3, r2
 8002ef0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ef4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c5b      	lsrs	r3, r3, #17
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f0e:	4413      	add	r3, r2
 8002f10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	fb02 f203 	mul.w	r2, r2, r3
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e004      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	623b      	str	r3, [r7, #32]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3a:	623b      	str	r3, [r7, #32]
      break;
 8002f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc90      	pop	{r4, r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	08004b24 	.word	0x08004b24
 8002f50:	40021000 	.word	0x40021000
 8002f54:	007a1200 	.word	0x007a1200
 8002f58:	003d0900 	.word	0x003d0900

08002f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	2000004c 	.word	0x2000004c

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f74:	f7ff fff2 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08004b44 	.word	0x08004b44

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0adb      	lsrs	r3, r3, #11
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08004b44 	.word	0x08004b44

08002fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <RCC_Delay+0x34>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <RCC_Delay+0x38>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a5b      	lsrs	r3, r3, #9
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fdc:	bf00      	nop
  }
  while (Delay --);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <RCC_Delay+0x1c>
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	2000004c 	.word	0x2000004c
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e041      	b.n	8003092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fde2 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 fc28 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e03a      	b.n	800312a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_TIM_Base_Start_IT+0x98>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x58>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d009      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x58>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_TIM_Base_Start_IT+0x9c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x58>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_TIM_Base_Start_IT+0xa0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d010      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	e007      	b.n	8003128 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800

08003140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e041      	b.n	80031d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f839 	bl	80031de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fb86 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x24>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e022      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HAL_TIM_PWM_Start+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e015      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e008      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e05e      	b.n	8003320 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0x82>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x92>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	e003      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd74 	bl	8003d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_TIM_PWM_Start+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_TIM_PWM_Start+0x138>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIM_PWM_Start+0xfa>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d009      	beq.n	80032ea <HAL_TIM_PWM_Start+0xfa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_TIM_PWM_Start+0x13c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIM_PWM_Start+0xfa>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_TIM_PWM_Start+0x140>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	d010      	beq.n	800331e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	e007      	b.n	800331e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800

08003334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0202 	mvn.w	r2, #2
 8003360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa6f 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa62 	bl	8003848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fa71 	bl	800386c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d122      	bne.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0204 	mvn.w	r2, #4
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa45 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa38 	bl	8003848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa47 	bl	800386c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d122      	bne.n	8003438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d11b      	bne.n	8003438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0208 	mvn.w	r2, #8
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2204      	movs	r2, #4
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa1b 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa0e 	bl	8003848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa1d 	bl	800386c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b10      	cmp	r3, #16
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b10      	cmp	r3, #16
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0210 	mvn.w	r2, #16
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2208      	movs	r2, #8
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9f1 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9e4 	bl	8003848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9f3 	bl	800386c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0201 	mvn.w	r2, #1
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f884 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fce1 	bl	8003ea6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9b7 	bl	800387e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b20      	cmp	r3, #32
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b20      	cmp	r3, #32
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fcac 	bl	8003e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e0ac      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	f200 809f 	bhi.w	80036ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080036ad 	.word	0x080036ad
 800357c:	080036ad 	.word	0x080036ad
 8003580:	080036ad 	.word	0x080036ad
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080036ad 	.word	0x080036ad
 800358c:	080036ad 	.word	0x080036ad
 8003590:	080036ad 	.word	0x080036ad
 8003594:	0800362b 	.word	0x0800362b
 8003598:	080036ad 	.word	0x080036ad
 800359c:	080036ad 	.word	0x080036ad
 80035a0:	080036ad 	.word	0x080036ad
 80035a4:	0800366b 	.word	0x0800366b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f9d0 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	619a      	str	r2, [r3, #24]
      break;
 80035e6:	e062      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fa16 	bl	8003a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
      break;
 8003628:	e041      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa5f 	bl	8003af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0204 	bic.w	r2, r2, #4
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
      break;
 8003668:	e021      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 faa9 	bl	8003bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b3      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x180>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd0>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x168>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8085 	beq.w	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa2>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x116>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xf6>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x136>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f000 faee 	bl	8003d52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04e      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 fad7 	bl	8003d52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 fa4e 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 faa5 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 fa6c 	bl	8003cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fa95 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa2e 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa85 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003814:	e00b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 fa7c 	bl	8003d1e <TIM_ITRx_SetConfig>
        break;
 8003826:	e002      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003828:	bf00      	nop
 800382a:	e000      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800382c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0302 	bic.w	r3, r3, #2
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <TIM_OC1_SetConfig+0xc8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10c      	bne.n	80039ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0308 	bic.w	r3, r3, #8
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <TIM_OC1_SetConfig+0xc8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00

08003a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f023 0210 	bic.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0320 	bic.w	r3, r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <TIM_OC2_SetConfig+0xd0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10d      	bne.n	8003a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC2_SetConfig+0xd0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d113      	bne.n	8003acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00

08003af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d113      	bne.n	8003b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00

08003bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <TIM_OC4_SetConfig+0x98>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 030a 	bic.w	r3, r3, #10
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0210 	bic.w	r2, r3, #16
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	031b      	lsls	r3, r3, #12
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e046      	b.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10c      	bne.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800

08003e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e03f      	b.n	8003f4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fef6 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f905 	bl	800410c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	; 0x28
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d17c      	bne.n	800406c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_Transmit+0x2c>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e075      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x3e>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e06e      	b.n	800406e <HAL_UART_Transmit+0x11c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2221      	movs	r2, #33	; 0x21
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fe f8ef 	bl	8002188 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe4:	e02a      	b.n	800403c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f840 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3302      	adds	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e007      	b.n	800402e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1cf      	bne.n	8003fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f810 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	e02c      	b.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d028      	beq.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004096:	f7fe f877 	bl	8002188 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d21d      	bcs.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e00f      	b.n	8004102 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d0c3      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004146:	f023 030c 	bic.w	r3, r3, #12
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	430b      	orrs	r3, r1
 8004152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <UART_SetConfig+0x114>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d103      	bne.n	800417c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7fe ff10 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	e002      	b.n	8004182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe fef8 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8004180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <UART_SetConfig+0x118>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	0119      	lsls	r1, r3, #4
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009a      	lsls	r2, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b8:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <UART_SetConfig+0x118>)
 80041ba:	fba3 0302 	umull	r0, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2064      	movs	r0, #100	; 0x64
 80041c2:	fb00 f303 	mul.w	r3, r0, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <UART_SetConfig+0x118>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d8:	4419      	add	r1, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009a      	lsls	r2, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <UART_SetConfig+0x118>)
 80041f2:	fba3 0302 	umull	r0, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2064      	movs	r0, #100	; 0x64
 80041fa:	fb00 f303 	mul.w	r3, r0, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a07      	ldr	r2, [pc, #28]	; (8004224 <UART_SetConfig+0x118>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	440a      	add	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40013800 	.word	0x40013800
 8004224:	51eb851f 	.word	0x51eb851f

08004228 <__errno>:
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <__errno+0x8>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000058 	.word	0x20000058

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	2600      	movs	r6, #0
 8004238:	4d0c      	ldr	r5, [pc, #48]	; (800426c <__libc_init_array+0x38>)
 800423a:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <__libc_init_array+0x3c>)
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	42a6      	cmp	r6, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	f000 fc5c 	bl	8004b00 <_init>
 8004248:	2600      	movs	r6, #0
 800424a:	4d0a      	ldr	r5, [pc, #40]	; (8004274 <__libc_init_array+0x40>)
 800424c:	4c0a      	ldr	r4, [pc, #40]	; (8004278 <__libc_init_array+0x44>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	42a6      	cmp	r6, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f855 3b04 	ldr.w	r3, [r5], #4
 800425c:	4798      	blx	r3
 800425e:	3601      	adds	r6, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	f855 3b04 	ldr.w	r3, [r5], #4
 8004266:	4798      	blx	r3
 8004268:	3601      	adds	r6, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08004b80 	.word	0x08004b80
 8004270:	08004b80 	.word	0x08004b80
 8004274:	08004b80 	.word	0x08004b80
 8004278:	08004b84 	.word	0x08004b84

0800427c <memset>:
 800427c:	4603      	mov	r3, r0
 800427e:	4402      	add	r2, r0
 8004280:	4293      	cmp	r3, r2
 8004282:	d100      	bne.n	8004286 <memset+0xa>
 8004284:	4770      	bx	lr
 8004286:	f803 1b01 	strb.w	r1, [r3], #1
 800428a:	e7f9      	b.n	8004280 <memset+0x4>

0800428c <siprintf>:
 800428c:	b40e      	push	{r1, r2, r3}
 800428e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004292:	b500      	push	{lr}
 8004294:	b09c      	sub	sp, #112	; 0x70
 8004296:	ab1d      	add	r3, sp, #116	; 0x74
 8004298:	9002      	str	r0, [sp, #8]
 800429a:	9006      	str	r0, [sp, #24]
 800429c:	9107      	str	r1, [sp, #28]
 800429e:	9104      	str	r1, [sp, #16]
 80042a0:	4808      	ldr	r0, [pc, #32]	; (80042c4 <siprintf+0x38>)
 80042a2:	4909      	ldr	r1, [pc, #36]	; (80042c8 <siprintf+0x3c>)
 80042a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a8:	9105      	str	r1, [sp, #20]
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	a902      	add	r1, sp, #8
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	f000 f868 	bl	8004384 <_svfiprintf_r>
 80042b4:	2200      	movs	r2, #0
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	b01c      	add	sp, #112	; 0x70
 80042bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80042c0:	b003      	add	sp, #12
 80042c2:	4770      	bx	lr
 80042c4:	20000058 	.word	0x20000058
 80042c8:	ffff0208 	.word	0xffff0208

080042cc <__ssputs_r>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	688e      	ldr	r6, [r1, #8]
 80042d2:	4682      	mov	sl, r0
 80042d4:	429e      	cmp	r6, r3
 80042d6:	460c      	mov	r4, r1
 80042d8:	4690      	mov	r8, r2
 80042da:	461f      	mov	r7, r3
 80042dc:	d838      	bhi.n	8004350 <__ssputs_r+0x84>
 80042de:	898a      	ldrh	r2, [r1, #12]
 80042e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042e4:	d032      	beq.n	800434c <__ssputs_r+0x80>
 80042e6:	6825      	ldr	r5, [r4, #0]
 80042e8:	6909      	ldr	r1, [r1, #16]
 80042ea:	3301      	adds	r3, #1
 80042ec:	eba5 0901 	sub.w	r9, r5, r1
 80042f0:	6965      	ldr	r5, [r4, #20]
 80042f2:	444b      	add	r3, r9
 80042f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042fc:	106d      	asrs	r5, r5, #1
 80042fe:	429d      	cmp	r5, r3
 8004300:	bf38      	it	cc
 8004302:	461d      	movcc	r5, r3
 8004304:	0553      	lsls	r3, r2, #21
 8004306:	d531      	bpl.n	800436c <__ssputs_r+0xa0>
 8004308:	4629      	mov	r1, r5
 800430a:	f000 fb53 	bl	80049b4 <_malloc_r>
 800430e:	4606      	mov	r6, r0
 8004310:	b950      	cbnz	r0, 8004328 <__ssputs_r+0x5c>
 8004312:	230c      	movs	r3, #12
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	f8ca 3000 	str.w	r3, [sl]
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004328:	464a      	mov	r2, r9
 800432a:	6921      	ldr	r1, [r4, #16]
 800432c:	f000 face 	bl	80048cc <memcpy>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	6126      	str	r6, [r4, #16]
 800433e:	444e      	add	r6, r9
 8004340:	6026      	str	r6, [r4, #0]
 8004342:	463e      	mov	r6, r7
 8004344:	6165      	str	r5, [r4, #20]
 8004346:	eba5 0509 	sub.w	r5, r5, r9
 800434a:	60a5      	str	r5, [r4, #8]
 800434c:	42be      	cmp	r6, r7
 800434e:	d900      	bls.n	8004352 <__ssputs_r+0x86>
 8004350:	463e      	mov	r6, r7
 8004352:	4632      	mov	r2, r6
 8004354:	4641      	mov	r1, r8
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	f000 fac6 	bl	80048e8 <memmove>
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	1b9b      	subs	r3, r3, r6
 8004362:	4432      	add	r2, r6
 8004364:	2000      	movs	r0, #0
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	e7db      	b.n	8004324 <__ssputs_r+0x58>
 800436c:	462a      	mov	r2, r5
 800436e:	f000 fb7b 	bl	8004a68 <_realloc_r>
 8004372:	4606      	mov	r6, r0
 8004374:	2800      	cmp	r0, #0
 8004376:	d1e1      	bne.n	800433c <__ssputs_r+0x70>
 8004378:	4650      	mov	r0, sl
 800437a:	6921      	ldr	r1, [r4, #16]
 800437c:	f000 face 	bl	800491c <_free_r>
 8004380:	e7c7      	b.n	8004312 <__ssputs_r+0x46>
	...

08004384 <_svfiprintf_r>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	4698      	mov	r8, r3
 800438a:	898b      	ldrh	r3, [r1, #12]
 800438c:	4607      	mov	r7, r0
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	460d      	mov	r5, r1
 8004392:	4614      	mov	r4, r2
 8004394:	b09d      	sub	sp, #116	; 0x74
 8004396:	d50e      	bpl.n	80043b6 <_svfiprintf_r+0x32>
 8004398:	690b      	ldr	r3, [r1, #16]
 800439a:	b963      	cbnz	r3, 80043b6 <_svfiprintf_r+0x32>
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	f000 fb09 	bl	80049b4 <_malloc_r>
 80043a2:	6028      	str	r0, [r5, #0]
 80043a4:	6128      	str	r0, [r5, #16]
 80043a6:	b920      	cbnz	r0, 80043b2 <_svfiprintf_r+0x2e>
 80043a8:	230c      	movs	r3, #12
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e0d1      	b.n	8004556 <_svfiprintf_r+0x1d2>
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	616b      	str	r3, [r5, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ba:	2320      	movs	r3, #32
 80043bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043c0:	2330      	movs	r3, #48	; 0x30
 80043c2:	f04f 0901 	mov.w	r9, #1
 80043c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004570 <_svfiprintf_r+0x1ec>
 80043ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043d2:	4623      	mov	r3, r4
 80043d4:	469a      	mov	sl, r3
 80043d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043da:	b10a      	cbz	r2, 80043e0 <_svfiprintf_r+0x5c>
 80043dc:	2a25      	cmp	r2, #37	; 0x25
 80043de:	d1f9      	bne.n	80043d4 <_svfiprintf_r+0x50>
 80043e0:	ebba 0b04 	subs.w	fp, sl, r4
 80043e4:	d00b      	beq.n	80043fe <_svfiprintf_r+0x7a>
 80043e6:	465b      	mov	r3, fp
 80043e8:	4622      	mov	r2, r4
 80043ea:	4629      	mov	r1, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff6d 	bl	80042cc <__ssputs_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	f000 80aa 	beq.w	800454c <_svfiprintf_r+0x1c8>
 80043f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043fa:	445a      	add	r2, fp
 80043fc:	9209      	str	r2, [sp, #36]	; 0x24
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80a2 	beq.w	800454c <_svfiprintf_r+0x1c8>
 8004408:	2300      	movs	r3, #0
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004412:	f10a 0a01 	add.w	sl, sl, #1
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	9307      	str	r3, [sp, #28]
 800441a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800441e:	931a      	str	r3, [sp, #104]	; 0x68
 8004420:	4654      	mov	r4, sl
 8004422:	2205      	movs	r2, #5
 8004424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004428:	4851      	ldr	r0, [pc, #324]	; (8004570 <_svfiprintf_r+0x1ec>)
 800442a:	f000 fa41 	bl	80048b0 <memchr>
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	b9d8      	cbnz	r0, 800446a <_svfiprintf_r+0xe6>
 8004432:	06d0      	lsls	r0, r2, #27
 8004434:	bf44      	itt	mi
 8004436:	2320      	movmi	r3, #32
 8004438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800443c:	0711      	lsls	r1, r2, #28
 800443e:	bf44      	itt	mi
 8004440:	232b      	movmi	r3, #43	; 0x2b
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004446:	f89a 3000 	ldrb.w	r3, [sl]
 800444a:	2b2a      	cmp	r3, #42	; 0x2a
 800444c:	d015      	beq.n	800447a <_svfiprintf_r+0xf6>
 800444e:	4654      	mov	r4, sl
 8004450:	2000      	movs	r0, #0
 8004452:	f04f 0c0a 	mov.w	ip, #10
 8004456:	9a07      	ldr	r2, [sp, #28]
 8004458:	4621      	mov	r1, r4
 800445a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445e:	3b30      	subs	r3, #48	; 0x30
 8004460:	2b09      	cmp	r3, #9
 8004462:	d94e      	bls.n	8004502 <_svfiprintf_r+0x17e>
 8004464:	b1b0      	cbz	r0, 8004494 <_svfiprintf_r+0x110>
 8004466:	9207      	str	r2, [sp, #28]
 8004468:	e014      	b.n	8004494 <_svfiprintf_r+0x110>
 800446a:	eba0 0308 	sub.w	r3, r0, r8
 800446e:	fa09 f303 	lsl.w	r3, r9, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	46a2      	mov	sl, r4
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	e7d2      	b.n	8004420 <_svfiprintf_r+0x9c>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	1d19      	adds	r1, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	9103      	str	r1, [sp, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbb      	ittet	lt
 8004486:	425b      	neglt	r3, r3
 8004488:	f042 0202 	orrlt.w	r2, r2, #2
 800448c:	9307      	strge	r3, [sp, #28]
 800448e:	9307      	strlt	r3, [sp, #28]
 8004490:	bfb8      	it	lt
 8004492:	9204      	strlt	r2, [sp, #16]
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b2e      	cmp	r3, #46	; 0x2e
 8004498:	d10c      	bne.n	80044b4 <_svfiprintf_r+0x130>
 800449a:	7863      	ldrb	r3, [r4, #1]
 800449c:	2b2a      	cmp	r3, #42	; 0x2a
 800449e:	d135      	bne.n	800450c <_svfiprintf_r+0x188>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	3402      	adds	r4, #2
 80044a4:	1d1a      	adds	r2, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	9203      	str	r2, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfb8      	it	lt
 80044ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004580 <_svfiprintf_r+0x1fc>
 80044b8:	2203      	movs	r2, #3
 80044ba:	4650      	mov	r0, sl
 80044bc:	7821      	ldrb	r1, [r4, #0]
 80044be:	f000 f9f7 	bl	80048b0 <memchr>
 80044c2:	b140      	cbz	r0, 80044d6 <_svfiprintf_r+0x152>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	eba0 000a 	sub.w	r0, r0, sl
 80044ca:	fa03 f000 	lsl.w	r0, r3, r0
 80044ce:	9b04      	ldr	r3, [sp, #16]
 80044d0:	3401      	adds	r4, #1
 80044d2:	4303      	orrs	r3, r0
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044da:	2206      	movs	r2, #6
 80044dc:	4825      	ldr	r0, [pc, #148]	; (8004574 <_svfiprintf_r+0x1f0>)
 80044de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e2:	f000 f9e5 	bl	80048b0 <memchr>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d038      	beq.n	800455c <_svfiprintf_r+0x1d8>
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <_svfiprintf_r+0x1f4>)
 80044ec:	bb1b      	cbnz	r3, 8004536 <_svfiprintf_r+0x1b2>
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	3307      	adds	r3, #7
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	3308      	adds	r3, #8
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044fc:	4433      	add	r3, r6
 80044fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004500:	e767      	b.n	80043d2 <_svfiprintf_r+0x4e>
 8004502:	460c      	mov	r4, r1
 8004504:	2001      	movs	r0, #1
 8004506:	fb0c 3202 	mla	r2, ip, r2, r3
 800450a:	e7a5      	b.n	8004458 <_svfiprintf_r+0xd4>
 800450c:	2300      	movs	r3, #0
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	4619      	mov	r1, r3
 8004514:	3401      	adds	r4, #1
 8004516:	9305      	str	r3, [sp, #20]
 8004518:	4620      	mov	r0, r4
 800451a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800451e:	3a30      	subs	r2, #48	; 0x30
 8004520:	2a09      	cmp	r2, #9
 8004522:	d903      	bls.n	800452c <_svfiprintf_r+0x1a8>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0c5      	beq.n	80044b4 <_svfiprintf_r+0x130>
 8004528:	9105      	str	r1, [sp, #20]
 800452a:	e7c3      	b.n	80044b4 <_svfiprintf_r+0x130>
 800452c:	4604      	mov	r4, r0
 800452e:	2301      	movs	r3, #1
 8004530:	fb0c 2101 	mla	r1, ip, r1, r2
 8004534:	e7f0      	b.n	8004518 <_svfiprintf_r+0x194>
 8004536:	ab03      	add	r3, sp, #12
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	462a      	mov	r2, r5
 800453c:	4638      	mov	r0, r7
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <_svfiprintf_r+0x1f8>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	f3af 8000 	nop.w
 8004546:	1c42      	adds	r2, r0, #1
 8004548:	4606      	mov	r6, r0
 800454a:	d1d6      	bne.n	80044fa <_svfiprintf_r+0x176>
 800454c:	89ab      	ldrh	r3, [r5, #12]
 800454e:	065b      	lsls	r3, r3, #25
 8004550:	f53f af2c 	bmi.w	80043ac <_svfiprintf_r+0x28>
 8004554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004556:	b01d      	add	sp, #116	; 0x74
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455c:	ab03      	add	r3, sp, #12
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	462a      	mov	r2, r5
 8004562:	4638      	mov	r0, r7
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <_svfiprintf_r+0x1f8>)
 8004566:	a904      	add	r1, sp, #16
 8004568:	f000 f87c 	bl	8004664 <_printf_i>
 800456c:	e7eb      	b.n	8004546 <_svfiprintf_r+0x1c2>
 800456e:	bf00      	nop
 8004570:	08004b4c 	.word	0x08004b4c
 8004574:	08004b56 	.word	0x08004b56
 8004578:	00000000 	.word	0x00000000
 800457c:	080042cd 	.word	0x080042cd
 8004580:	08004b52 	.word	0x08004b52

08004584 <_printf_common>:
 8004584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	4616      	mov	r6, r2
 800458a:	4699      	mov	r9, r3
 800458c:	688a      	ldr	r2, [r1, #8]
 800458e:	690b      	ldr	r3, [r1, #16]
 8004590:	4607      	mov	r7, r0
 8004592:	4293      	cmp	r3, r2
 8004594:	bfb8      	it	lt
 8004596:	4613      	movlt	r3, r2
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800459e:	460c      	mov	r4, r1
 80045a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a4:	b10a      	cbz	r2, 80045aa <_printf_common+0x26>
 80045a6:	3301      	adds	r3, #1
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	0699      	lsls	r1, r3, #26
 80045ae:	bf42      	ittt	mi
 80045b0:	6833      	ldrmi	r3, [r6, #0]
 80045b2:	3302      	addmi	r3, #2
 80045b4:	6033      	strmi	r3, [r6, #0]
 80045b6:	6825      	ldr	r5, [r4, #0]
 80045b8:	f015 0506 	ands.w	r5, r5, #6
 80045bc:	d106      	bne.n	80045cc <_printf_common+0x48>
 80045be:	f104 0a19 	add.w	sl, r4, #25
 80045c2:	68e3      	ldr	r3, [r4, #12]
 80045c4:	6832      	ldr	r2, [r6, #0]
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	42ab      	cmp	r3, r5
 80045ca:	dc28      	bgt.n	800461e <_printf_common+0x9a>
 80045cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d0:	1e13      	subs	r3, r2, #0
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	bf18      	it	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	0692      	lsls	r2, r2, #26
 80045da:	d42d      	bmi.n	8004638 <_printf_common+0xb4>
 80045dc:	4649      	mov	r1, r9
 80045de:	4638      	mov	r0, r7
 80045e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d020      	beq.n	800462c <_printf_common+0xa8>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	68e5      	ldr	r5, [r4, #12]
 80045ee:	f003 0306 	and.w	r3, r3, #6
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	bf18      	it	ne
 80045f6:	2500      	movne	r5, #0
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	f04f 0600 	mov.w	r6, #0
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	bf08      	it	eq
 8004602:	1aad      	subeq	r5, r5, r2
 8004604:	6922      	ldr	r2, [r4, #16]
 8004606:	bf08      	it	eq
 8004608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800460c:	4293      	cmp	r3, r2
 800460e:	bfc4      	itt	gt
 8004610:	1a9b      	subgt	r3, r3, r2
 8004612:	18ed      	addgt	r5, r5, r3
 8004614:	341a      	adds	r4, #26
 8004616:	42b5      	cmp	r5, r6
 8004618:	d11a      	bne.n	8004650 <_printf_common+0xcc>
 800461a:	2000      	movs	r0, #0
 800461c:	e008      	b.n	8004630 <_printf_common+0xac>
 800461e:	2301      	movs	r3, #1
 8004620:	4652      	mov	r2, sl
 8004622:	4649      	mov	r1, r9
 8004624:	4638      	mov	r0, r7
 8004626:	47c0      	blx	r8
 8004628:	3001      	adds	r0, #1
 800462a:	d103      	bne.n	8004634 <_printf_common+0xb0>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004634:	3501      	adds	r5, #1
 8004636:	e7c4      	b.n	80045c2 <_printf_common+0x3e>
 8004638:	2030      	movs	r0, #48	; 0x30
 800463a:	18e1      	adds	r1, r4, r3
 800463c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004646:	4422      	add	r2, r4
 8004648:	3302      	adds	r3, #2
 800464a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800464e:	e7c5      	b.n	80045dc <_printf_common+0x58>
 8004650:	2301      	movs	r3, #1
 8004652:	4622      	mov	r2, r4
 8004654:	4649      	mov	r1, r9
 8004656:	4638      	mov	r0, r7
 8004658:	47c0      	blx	r8
 800465a:	3001      	adds	r0, #1
 800465c:	d0e6      	beq.n	800462c <_printf_common+0xa8>
 800465e:	3601      	adds	r6, #1
 8004660:	e7d9      	b.n	8004616 <_printf_common+0x92>
	...

08004664 <_printf_i>:
 8004664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	7e27      	ldrb	r7, [r4, #24]
 800466c:	4691      	mov	r9, r2
 800466e:	2f78      	cmp	r7, #120	; 0x78
 8004670:	4680      	mov	r8, r0
 8004672:	469a      	mov	sl, r3
 8004674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467a:	d807      	bhi.n	800468c <_printf_i+0x28>
 800467c:	2f62      	cmp	r7, #98	; 0x62
 800467e:	d80a      	bhi.n	8004696 <_printf_i+0x32>
 8004680:	2f00      	cmp	r7, #0
 8004682:	f000 80d9 	beq.w	8004838 <_printf_i+0x1d4>
 8004686:	2f58      	cmp	r7, #88	; 0x58
 8004688:	f000 80a4 	beq.w	80047d4 <_printf_i+0x170>
 800468c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004694:	e03a      	b.n	800470c <_printf_i+0xa8>
 8004696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800469a:	2b15      	cmp	r3, #21
 800469c:	d8f6      	bhi.n	800468c <_printf_i+0x28>
 800469e:	a001      	add	r0, pc, #4	; (adr r0, 80046a4 <_printf_i+0x40>)
 80046a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046a4:	080046fd 	.word	0x080046fd
 80046a8:	08004711 	.word	0x08004711
 80046ac:	0800468d 	.word	0x0800468d
 80046b0:	0800468d 	.word	0x0800468d
 80046b4:	0800468d 	.word	0x0800468d
 80046b8:	0800468d 	.word	0x0800468d
 80046bc:	08004711 	.word	0x08004711
 80046c0:	0800468d 	.word	0x0800468d
 80046c4:	0800468d 	.word	0x0800468d
 80046c8:	0800468d 	.word	0x0800468d
 80046cc:	0800468d 	.word	0x0800468d
 80046d0:	0800481f 	.word	0x0800481f
 80046d4:	08004741 	.word	0x08004741
 80046d8:	08004801 	.word	0x08004801
 80046dc:	0800468d 	.word	0x0800468d
 80046e0:	0800468d 	.word	0x0800468d
 80046e4:	08004841 	.word	0x08004841
 80046e8:	0800468d 	.word	0x0800468d
 80046ec:	08004741 	.word	0x08004741
 80046f0:	0800468d 	.word	0x0800468d
 80046f4:	0800468d 	.word	0x0800468d
 80046f8:	08004809 	.word	0x08004809
 80046fc:	680b      	ldr	r3, [r1, #0]
 80046fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004702:	1d1a      	adds	r2, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	600a      	str	r2, [r1, #0]
 8004708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800470c:	2301      	movs	r3, #1
 800470e:	e0a4      	b.n	800485a <_printf_i+0x1f6>
 8004710:	6825      	ldr	r5, [r4, #0]
 8004712:	6808      	ldr	r0, [r1, #0]
 8004714:	062e      	lsls	r6, r5, #24
 8004716:	f100 0304 	add.w	r3, r0, #4
 800471a:	d50a      	bpl.n	8004732 <_printf_i+0xce>
 800471c:	6805      	ldr	r5, [r0, #0]
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	2d00      	cmp	r5, #0
 8004722:	da03      	bge.n	800472c <_printf_i+0xc8>
 8004724:	232d      	movs	r3, #45	; 0x2d
 8004726:	426d      	negs	r5, r5
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472c:	230a      	movs	r3, #10
 800472e:	485e      	ldr	r0, [pc, #376]	; (80048a8 <_printf_i+0x244>)
 8004730:	e019      	b.n	8004766 <_printf_i+0x102>
 8004732:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004736:	6805      	ldr	r5, [r0, #0]
 8004738:	600b      	str	r3, [r1, #0]
 800473a:	bf18      	it	ne
 800473c:	b22d      	sxthne	r5, r5
 800473e:	e7ef      	b.n	8004720 <_printf_i+0xbc>
 8004740:	680b      	ldr	r3, [r1, #0]
 8004742:	6825      	ldr	r5, [r4, #0]
 8004744:	1d18      	adds	r0, r3, #4
 8004746:	6008      	str	r0, [r1, #0]
 8004748:	0628      	lsls	r0, r5, #24
 800474a:	d501      	bpl.n	8004750 <_printf_i+0xec>
 800474c:	681d      	ldr	r5, [r3, #0]
 800474e:	e002      	b.n	8004756 <_printf_i+0xf2>
 8004750:	0669      	lsls	r1, r5, #25
 8004752:	d5fb      	bpl.n	800474c <_printf_i+0xe8>
 8004754:	881d      	ldrh	r5, [r3, #0]
 8004756:	2f6f      	cmp	r7, #111	; 0x6f
 8004758:	bf0c      	ite	eq
 800475a:	2308      	moveq	r3, #8
 800475c:	230a      	movne	r3, #10
 800475e:	4852      	ldr	r0, [pc, #328]	; (80048a8 <_printf_i+0x244>)
 8004760:	2100      	movs	r1, #0
 8004762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004766:	6866      	ldr	r6, [r4, #4]
 8004768:	2e00      	cmp	r6, #0
 800476a:	bfa8      	it	ge
 800476c:	6821      	ldrge	r1, [r4, #0]
 800476e:	60a6      	str	r6, [r4, #8]
 8004770:	bfa4      	itt	ge
 8004772:	f021 0104 	bicge.w	r1, r1, #4
 8004776:	6021      	strge	r1, [r4, #0]
 8004778:	b90d      	cbnz	r5, 800477e <_printf_i+0x11a>
 800477a:	2e00      	cmp	r6, #0
 800477c:	d04d      	beq.n	800481a <_printf_i+0x1b6>
 800477e:	4616      	mov	r6, r2
 8004780:	fbb5 f1f3 	udiv	r1, r5, r3
 8004784:	fb03 5711 	mls	r7, r3, r1, r5
 8004788:	5dc7      	ldrb	r7, [r0, r7]
 800478a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800478e:	462f      	mov	r7, r5
 8004790:	42bb      	cmp	r3, r7
 8004792:	460d      	mov	r5, r1
 8004794:	d9f4      	bls.n	8004780 <_printf_i+0x11c>
 8004796:	2b08      	cmp	r3, #8
 8004798:	d10b      	bne.n	80047b2 <_printf_i+0x14e>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	07df      	lsls	r7, r3, #31
 800479e:	d508      	bpl.n	80047b2 <_printf_i+0x14e>
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	6861      	ldr	r1, [r4, #4]
 80047a4:	4299      	cmp	r1, r3
 80047a6:	bfde      	ittt	le
 80047a8:	2330      	movle	r3, #48	; 0x30
 80047aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047b2:	1b92      	subs	r2, r2, r6
 80047b4:	6122      	str	r2, [r4, #16]
 80047b6:	464b      	mov	r3, r9
 80047b8:	4621      	mov	r1, r4
 80047ba:	4640      	mov	r0, r8
 80047bc:	f8cd a000 	str.w	sl, [sp]
 80047c0:	aa03      	add	r2, sp, #12
 80047c2:	f7ff fedf 	bl	8004584 <_printf_common>
 80047c6:	3001      	adds	r0, #1
 80047c8:	d14c      	bne.n	8004864 <_printf_i+0x200>
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	b004      	add	sp, #16
 80047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d4:	4834      	ldr	r0, [pc, #208]	; (80048a8 <_printf_i+0x244>)
 80047d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047da:	680e      	ldr	r6, [r1, #0]
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f856 5b04 	ldr.w	r5, [r6], #4
 80047e2:	061f      	lsls	r7, r3, #24
 80047e4:	600e      	str	r6, [r1, #0]
 80047e6:	d514      	bpl.n	8004812 <_printf_i+0x1ae>
 80047e8:	07d9      	lsls	r1, r3, #31
 80047ea:	bf44      	itt	mi
 80047ec:	f043 0320 	orrmi.w	r3, r3, #32
 80047f0:	6023      	strmi	r3, [r4, #0]
 80047f2:	b91d      	cbnz	r5, 80047fc <_printf_i+0x198>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f023 0320 	bic.w	r3, r3, #32
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	2310      	movs	r3, #16
 80047fe:	e7af      	b.n	8004760 <_printf_i+0xfc>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	f043 0320 	orr.w	r3, r3, #32
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	2378      	movs	r3, #120	; 0x78
 800480a:	4828      	ldr	r0, [pc, #160]	; (80048ac <_printf_i+0x248>)
 800480c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004810:	e7e3      	b.n	80047da <_printf_i+0x176>
 8004812:	065e      	lsls	r6, r3, #25
 8004814:	bf48      	it	mi
 8004816:	b2ad      	uxthmi	r5, r5
 8004818:	e7e6      	b.n	80047e8 <_printf_i+0x184>
 800481a:	4616      	mov	r6, r2
 800481c:	e7bb      	b.n	8004796 <_printf_i+0x132>
 800481e:	680b      	ldr	r3, [r1, #0]
 8004820:	6826      	ldr	r6, [r4, #0]
 8004822:	1d1d      	adds	r5, r3, #4
 8004824:	6960      	ldr	r0, [r4, #20]
 8004826:	600d      	str	r5, [r1, #0]
 8004828:	0635      	lsls	r5, r6, #24
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	d501      	bpl.n	8004832 <_printf_i+0x1ce>
 800482e:	6018      	str	r0, [r3, #0]
 8004830:	e002      	b.n	8004838 <_printf_i+0x1d4>
 8004832:	0671      	lsls	r1, r6, #25
 8004834:	d5fb      	bpl.n	800482e <_printf_i+0x1ca>
 8004836:	8018      	strh	r0, [r3, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	4616      	mov	r6, r2
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	e7ba      	b.n	80047b6 <_printf_i+0x152>
 8004840:	680b      	ldr	r3, [r1, #0]
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	600a      	str	r2, [r1, #0]
 8004846:	681e      	ldr	r6, [r3, #0]
 8004848:	2100      	movs	r1, #0
 800484a:	4630      	mov	r0, r6
 800484c:	6862      	ldr	r2, [r4, #4]
 800484e:	f000 f82f 	bl	80048b0 <memchr>
 8004852:	b108      	cbz	r0, 8004858 <_printf_i+0x1f4>
 8004854:	1b80      	subs	r0, r0, r6
 8004856:	6060      	str	r0, [r4, #4]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	6123      	str	r3, [r4, #16]
 800485c:	2300      	movs	r3, #0
 800485e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004862:	e7a8      	b.n	80047b6 <_printf_i+0x152>
 8004864:	4632      	mov	r2, r6
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	47d0      	blx	sl
 800486e:	3001      	adds	r0, #1
 8004870:	d0ab      	beq.n	80047ca <_printf_i+0x166>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	079b      	lsls	r3, r3, #30
 8004876:	d413      	bmi.n	80048a0 <_printf_i+0x23c>
 8004878:	68e0      	ldr	r0, [r4, #12]
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	4298      	cmp	r0, r3
 800487e:	bfb8      	it	lt
 8004880:	4618      	movlt	r0, r3
 8004882:	e7a4      	b.n	80047ce <_printf_i+0x16a>
 8004884:	2301      	movs	r3, #1
 8004886:	4632      	mov	r2, r6
 8004888:	4649      	mov	r1, r9
 800488a:	4640      	mov	r0, r8
 800488c:	47d0      	blx	sl
 800488e:	3001      	adds	r0, #1
 8004890:	d09b      	beq.n	80047ca <_printf_i+0x166>
 8004892:	3501      	adds	r5, #1
 8004894:	68e3      	ldr	r3, [r4, #12]
 8004896:	9903      	ldr	r1, [sp, #12]
 8004898:	1a5b      	subs	r3, r3, r1
 800489a:	42ab      	cmp	r3, r5
 800489c:	dcf2      	bgt.n	8004884 <_printf_i+0x220>
 800489e:	e7eb      	b.n	8004878 <_printf_i+0x214>
 80048a0:	2500      	movs	r5, #0
 80048a2:	f104 0619 	add.w	r6, r4, #25
 80048a6:	e7f5      	b.n	8004894 <_printf_i+0x230>
 80048a8:	08004b5d 	.word	0x08004b5d
 80048ac:	08004b6e 	.word	0x08004b6e

080048b0 <memchr>:
 80048b0:	4603      	mov	r3, r0
 80048b2:	b510      	push	{r4, lr}
 80048b4:	b2c9      	uxtb	r1, r1
 80048b6:	4402      	add	r2, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	d101      	bne.n	80048c2 <memchr+0x12>
 80048be:	2000      	movs	r0, #0
 80048c0:	e003      	b.n	80048ca <memchr+0x1a>
 80048c2:	7804      	ldrb	r4, [r0, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	428c      	cmp	r4, r1
 80048c8:	d1f6      	bne.n	80048b8 <memchr+0x8>
 80048ca:	bd10      	pop	{r4, pc}

080048cc <memcpy>:
 80048cc:	440a      	add	r2, r1
 80048ce:	4291      	cmp	r1, r2
 80048d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d4:	d100      	bne.n	80048d8 <memcpy+0xc>
 80048d6:	4770      	bx	lr
 80048d8:	b510      	push	{r4, lr}
 80048da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048de:	4291      	cmp	r1, r2
 80048e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e4:	d1f9      	bne.n	80048da <memcpy+0xe>
 80048e6:	bd10      	pop	{r4, pc}

080048e8 <memmove>:
 80048e8:	4288      	cmp	r0, r1
 80048ea:	b510      	push	{r4, lr}
 80048ec:	eb01 0402 	add.w	r4, r1, r2
 80048f0:	d902      	bls.n	80048f8 <memmove+0x10>
 80048f2:	4284      	cmp	r4, r0
 80048f4:	4623      	mov	r3, r4
 80048f6:	d807      	bhi.n	8004908 <memmove+0x20>
 80048f8:	1e43      	subs	r3, r0, #1
 80048fa:	42a1      	cmp	r1, r4
 80048fc:	d008      	beq.n	8004910 <memmove+0x28>
 80048fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004906:	e7f8      	b.n	80048fa <memmove+0x12>
 8004908:	4601      	mov	r1, r0
 800490a:	4402      	add	r2, r0
 800490c:	428a      	cmp	r2, r1
 800490e:	d100      	bne.n	8004912 <memmove+0x2a>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800491a:	e7f7      	b.n	800490c <memmove+0x24>

0800491c <_free_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4605      	mov	r5, r0
 8004920:	2900      	cmp	r1, #0
 8004922:	d043      	beq.n	80049ac <_free_r+0x90>
 8004924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004928:	1f0c      	subs	r4, r1, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfb8      	it	lt
 800492e:	18e4      	addlt	r4, r4, r3
 8004930:	f000 f8d0 	bl	8004ad4 <__malloc_lock>
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <_free_r+0x94>)
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	4610      	mov	r0, r2
 800493a:	b933      	cbnz	r3, 800494a <_free_r+0x2e>
 800493c:	6063      	str	r3, [r4, #4]
 800493e:	6014      	str	r4, [r2, #0]
 8004940:	4628      	mov	r0, r5
 8004942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004946:	f000 b8cb 	b.w	8004ae0 <__malloc_unlock>
 800494a:	42a3      	cmp	r3, r4
 800494c:	d90a      	bls.n	8004964 <_free_r+0x48>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1862      	adds	r2, r4, r1
 8004952:	4293      	cmp	r3, r2
 8004954:	bf01      	itttt	eq
 8004956:	681a      	ldreq	r2, [r3, #0]
 8004958:	685b      	ldreq	r3, [r3, #4]
 800495a:	1852      	addeq	r2, r2, r1
 800495c:	6022      	streq	r2, [r4, #0]
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6004      	str	r4, [r0, #0]
 8004962:	e7ed      	b.n	8004940 <_free_r+0x24>
 8004964:	461a      	mov	r2, r3
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b10b      	cbz	r3, 800496e <_free_r+0x52>
 800496a:	42a3      	cmp	r3, r4
 800496c:	d9fa      	bls.n	8004964 <_free_r+0x48>
 800496e:	6811      	ldr	r1, [r2, #0]
 8004970:	1850      	adds	r0, r2, r1
 8004972:	42a0      	cmp	r0, r4
 8004974:	d10b      	bne.n	800498e <_free_r+0x72>
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	4401      	add	r1, r0
 800497a:	1850      	adds	r0, r2, r1
 800497c:	4283      	cmp	r3, r0
 800497e:	6011      	str	r1, [r2, #0]
 8004980:	d1de      	bne.n	8004940 <_free_r+0x24>
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4401      	add	r1, r0
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	6053      	str	r3, [r2, #4]
 800498c:	e7d8      	b.n	8004940 <_free_r+0x24>
 800498e:	d902      	bls.n	8004996 <_free_r+0x7a>
 8004990:	230c      	movs	r3, #12
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	e7d4      	b.n	8004940 <_free_r+0x24>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	1821      	adds	r1, r4, r0
 800499a:	428b      	cmp	r3, r1
 800499c:	bf01      	itttt	eq
 800499e:	6819      	ldreq	r1, [r3, #0]
 80049a0:	685b      	ldreq	r3, [r3, #4]
 80049a2:	1809      	addeq	r1, r1, r0
 80049a4:	6021      	streq	r1, [r4, #0]
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	6054      	str	r4, [r2, #4]
 80049aa:	e7c9      	b.n	8004940 <_free_r+0x24>
 80049ac:	bd38      	pop	{r3, r4, r5, pc}
 80049ae:	bf00      	nop
 80049b0:	20000164 	.word	0x20000164

080049b4 <_malloc_r>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	1ccd      	adds	r5, r1, #3
 80049b8:	f025 0503 	bic.w	r5, r5, #3
 80049bc:	3508      	adds	r5, #8
 80049be:	2d0c      	cmp	r5, #12
 80049c0:	bf38      	it	cc
 80049c2:	250c      	movcc	r5, #12
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	4606      	mov	r6, r0
 80049c8:	db01      	blt.n	80049ce <_malloc_r+0x1a>
 80049ca:	42a9      	cmp	r1, r5
 80049cc:	d903      	bls.n	80049d6 <_malloc_r+0x22>
 80049ce:	230c      	movs	r3, #12
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	2000      	movs	r0, #0
 80049d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d6:	f000 f87d 	bl	8004ad4 <__malloc_lock>
 80049da:	4921      	ldr	r1, [pc, #132]	; (8004a60 <_malloc_r+0xac>)
 80049dc:	680a      	ldr	r2, [r1, #0]
 80049de:	4614      	mov	r4, r2
 80049e0:	b99c      	cbnz	r4, 8004a0a <_malloc_r+0x56>
 80049e2:	4f20      	ldr	r7, [pc, #128]	; (8004a64 <_malloc_r+0xb0>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	b923      	cbnz	r3, 80049f2 <_malloc_r+0x3e>
 80049e8:	4621      	mov	r1, r4
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f862 	bl	8004ab4 <_sbrk_r>
 80049f0:	6038      	str	r0, [r7, #0]
 80049f2:	4629      	mov	r1, r5
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f85d 	bl	8004ab4 <_sbrk_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d123      	bne.n	8004a46 <_malloc_r+0x92>
 80049fe:	230c      	movs	r3, #12
 8004a00:	4630      	mov	r0, r6
 8004a02:	6033      	str	r3, [r6, #0]
 8004a04:	f000 f86c 	bl	8004ae0 <__malloc_unlock>
 8004a08:	e7e3      	b.n	80049d2 <_malloc_r+0x1e>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	1b5b      	subs	r3, r3, r5
 8004a0e:	d417      	bmi.n	8004a40 <_malloc_r+0x8c>
 8004a10:	2b0b      	cmp	r3, #11
 8004a12:	d903      	bls.n	8004a1c <_malloc_r+0x68>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	441c      	add	r4, r3
 8004a18:	6025      	str	r5, [r4, #0]
 8004a1a:	e004      	b.n	8004a26 <_malloc_r+0x72>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	42a2      	cmp	r2, r4
 8004a20:	bf0c      	ite	eq
 8004a22:	600b      	streq	r3, [r1, #0]
 8004a24:	6053      	strne	r3, [r2, #4]
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f85a 	bl	8004ae0 <__malloc_unlock>
 8004a2c:	f104 000b 	add.w	r0, r4, #11
 8004a30:	1d23      	adds	r3, r4, #4
 8004a32:	f020 0007 	bic.w	r0, r0, #7
 8004a36:	1ac2      	subs	r2, r0, r3
 8004a38:	d0cc      	beq.n	80049d4 <_malloc_r+0x20>
 8004a3a:	1a1b      	subs	r3, r3, r0
 8004a3c:	50a3      	str	r3, [r4, r2]
 8004a3e:	e7c9      	b.n	80049d4 <_malloc_r+0x20>
 8004a40:	4622      	mov	r2, r4
 8004a42:	6864      	ldr	r4, [r4, #4]
 8004a44:	e7cc      	b.n	80049e0 <_malloc_r+0x2c>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d0e3      	beq.n	8004a18 <_malloc_r+0x64>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 f82e 	bl	8004ab4 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d1dd      	bne.n	8004a18 <_malloc_r+0x64>
 8004a5c:	e7cf      	b.n	80049fe <_malloc_r+0x4a>
 8004a5e:	bf00      	nop
 8004a60:	20000164 	.word	0x20000164
 8004a64:	20000168 	.word	0x20000168

08004a68 <_realloc_r>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	460e      	mov	r6, r1
 8004a70:	b921      	cbnz	r1, 8004a7c <_realloc_r+0x14>
 8004a72:	4611      	mov	r1, r2
 8004a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a78:	f7ff bf9c 	b.w	80049b4 <_malloc_r>
 8004a7c:	b922      	cbnz	r2, 8004a88 <_realloc_r+0x20>
 8004a7e:	f7ff ff4d 	bl	800491c <_free_r>
 8004a82:	4625      	mov	r5, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a88:	f000 f830 	bl	8004aec <_malloc_usable_size_r>
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d20f      	bcs.n	8004ab0 <_realloc_r+0x48>
 8004a90:	4621      	mov	r1, r4
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff ff8e 	bl	80049b4 <_malloc_r>
 8004a98:	4605      	mov	r5, r0
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d0f2      	beq.n	8004a84 <_realloc_r+0x1c>
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	f7ff ff13 	bl	80048cc <memcpy>
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	f7ff ff37 	bl	800491c <_free_r>
 8004aae:	e7e9      	b.n	8004a84 <_realloc_r+0x1c>
 8004ab0:	4635      	mov	r5, r6
 8004ab2:	e7e7      	b.n	8004a84 <_realloc_r+0x1c>

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4d05      	ldr	r5, [pc, #20]	; (8004ad0 <_sbrk_r+0x1c>)
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fd f988 	bl	8001dd4 <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000598 	.word	0x20000598

08004ad4 <__malloc_lock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__malloc_lock+0x8>)
 8004ad6:	f000 b811 	b.w	8004afc <__retarget_lock_acquire_recursive>
 8004ada:	bf00      	nop
 8004adc:	200005a0 	.word	0x200005a0

08004ae0 <__malloc_unlock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__malloc_unlock+0x8>)
 8004ae2:	f000 b80c 	b.w	8004afe <__retarget_lock_release_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200005a0 	.word	0x200005a0

08004aec <_malloc_usable_size_r>:
 8004aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af0:	1f18      	subs	r0, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfbc      	itt	lt
 8004af6:	580b      	ldrlt	r3, [r1, r0]
 8004af8:	18c0      	addlt	r0, r0, r3
 8004afa:	4770      	bx	lr

08004afc <__retarget_lock_acquire_recursive>:
 8004afc:	4770      	bx	lr

08004afe <__retarget_lock_release_recursive>:
 8004afe:	4770      	bx	lr

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
