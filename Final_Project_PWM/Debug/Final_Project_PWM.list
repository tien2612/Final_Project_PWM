
Final_Project_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf0  08004bf0  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf0  08004bf0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200000bc  08004cb4  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08004cb4  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff0a  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002776  00000000  00000000  0002ffef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00032768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019305  00000000  00000000  00034198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f249  00000000  00000000  0004d49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b715  00000000  00000000  0005c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca8  00000000  00000000  000e7e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000bc 	.word	0x200000bc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b70 	.word	0x08004b70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c0 	.word	0x200000c0
 800014c:	08004b70 	.word	0x08004b70

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <updateDisplay>:
#include <stdio.h>

extern UART_HandleTypeDef huart2;
char str[50];

void updateDisplay(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!7SEG:%d#\r\n",SEG7_CLOCK[0] / TIME_UNIT), 1000);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <updateDisplay+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <updateDisplay+0x38>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	1192      	asrs	r2, r2, #6
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4909      	ldr	r1, [pc, #36]	; (8000a60 <updateDisplay+0x3c>)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <updateDisplay+0x40>)
 8000a3e:	f003 fc5d 	bl	80042fc <siprintf>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4906      	ldr	r1, [pc, #24]	; (8000a64 <updateDisplay+0x40>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <updateDisplay+0x44>)
 8000a4e:	f003 fab8 	bl	8003fc2 <HAL_UART_Transmit>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	10624dd3 	.word	0x10624dd3
 8000a60:	08004b88 	.word	0x08004b88
 8000a64:	2000016c 	.word	0x2000016c
 8000a68:	20000230 	.word	0x20000230

08000a6c <WhichButtonIsPressed>:
enum ButtonState buttonState = BUTTON_RELEASED;

extern UART_HandleTypeDef huart2;
char str[50];

int WhichButtonIsPressed() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return 1;
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fba3 	bl	80011bc <is_button_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <WhichButtonIsPressed+0x14>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e010      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(1)) return 2;
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fb9b 	bl	80011bc <is_button_pressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <WhichButtonIsPressed+0x24>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e008      	b.n	8000aa2 <WhichButtonIsPressed+0x36>
	if (is_button_pressed(2)) return 3;
 8000a90:	2002      	movs	r0, #2
 8000a92:	f000 fb93 	bl	80011bc <is_button_pressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <WhichButtonIsPressed+0x34>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <WhichButtonIsPressed+0x36>

	return 0; // None of these buttons are pressed
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <clear_vertical>:

void clear_vertical() {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_1_LED);
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f001 fafc 	bl	80020a8 <clear_led>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <clear_horizontal>:

void clear_horizontal() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	clear_led(TRAFFIC_2_LED);
 8000ab8:	2029      	movs	r0, #41	; 0x29
 8000aba:	f001 faf5 	bl	80020a8 <clear_led>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <vertical_processing>:

void vertical_processing() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	clear_vertical();
 8000ac8:	f7ff ffed 	bl	8000aa6 <clear_vertical>
	switch (CURRENT_STATE[0]) {
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <vertical_processing+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d010      	beq.n	8000af6 <vertical_processing+0x32>
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	dc13      	bgt.n	8000b00 <vertical_processing+0x3c>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <vertical_processing+0x1e>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <vertical_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000ae0:	e00e      	b.n	8000b00 <vertical_processing+0x3c>
		set_led_color(TRAFFIC_1_LED, RED_COLOR);
 8000ae2:	211e      	movs	r1, #30
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f001 fa23 	bl	8001f30 <set_led_color>
		break;
 8000aea:	e00a      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, AMBER_COLOR);
 8000aec:	211f      	movs	r1, #31
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f001 fa1e 	bl	8001f30 <set_led_color>
		break;
 8000af4:	e005      	b.n	8000b02 <vertical_processing+0x3e>
		set_led_color(TRAFFIC_1_LED, GREEN_COLOR);
 8000af6:	2120      	movs	r1, #32
 8000af8:	2028      	movs	r0, #40	; 0x28
 8000afa:	f001 fa19 	bl	8001f30 <set_led_color>
		break;
 8000afe:	e000      	b.n	8000b02 <vertical_processing+0x3e>
		break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000004 	.word	0x20000004

08000b0c <horizontal_processing>:

void horizontal_processing() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	clear_horizontal();
 8000b10:	f7ff ffd0 	bl	8000ab4 <clear_horizontal>
	switch (CURRENT_STATE[1]) {
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <horizontal_processing+0x44>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d010      	beq.n	8000b3e <horizontal_processing+0x32>
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	dc13      	bgt.n	8000b48 <horizontal_processing+0x3c>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <horizontal_processing+0x1e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d005      	beq.n	8000b34 <horizontal_processing+0x28>
		break;
	case 2:
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
		break;
	default:
		break;
 8000b28:	e00e      	b.n	8000b48 <horizontal_processing+0x3c>
		set_led_color(TRAFFIC_2_LED, RED_COLOR);
 8000b2a:	211e      	movs	r1, #30
 8000b2c:	2029      	movs	r0, #41	; 0x29
 8000b2e:	f001 f9ff 	bl	8001f30 <set_led_color>
		break;
 8000b32:	e00a      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, AMBER_COLOR);
 8000b34:	211f      	movs	r1, #31
 8000b36:	2029      	movs	r0, #41	; 0x29
 8000b38:	f001 f9fa 	bl	8001f30 <set_led_color>
		break;
 8000b3c:	e005      	b.n	8000b4a <horizontal_processing+0x3e>
		set_led_color(TRAFFIC_2_LED, GREEN_COLOR);
 8000b3e:	2120      	movs	r1, #32
 8000b40:	2029      	movs	r0, #41	; 0x29
 8000b42:	f001 f9f5 	bl	8001f30 <set_led_color>
		break;
 8000b46:	e000      	b.n	8000b4a <horizontal_processing+0x3e>
		break;
 8000b48:	bf00      	nop
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000004 	.word	0x20000004

08000b54 <state_update>:

void state_update(int idx) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (idx == 0) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d11e      	bne.n	8000ba0 <state_update+0x4c>
		switch (CURRENT_STATE[idx]) {
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <state_update+0x94>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d012      	beq.n	8000b94 <state_update+0x40>
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	dc29      	bgt.n	8000bc6 <state_update+0x72>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <state_update+0x28>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d006      	beq.n	8000b88 <state_update+0x34>
			break;
		case 2:
			CURRENT_STATE[idx] = 1;
			break;
		default:
			break;
 8000b7a:	e024      	b.n	8000bc6 <state_update+0x72>
			CURRENT_STATE[idx] = 2;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <state_update+0x94>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2102      	movs	r1, #2
 8000b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b86:	e01f      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 0;
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <state_update+0x94>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b92:	e019      	b.n	8000bc8 <state_update+0x74>
			CURRENT_STATE[idx] = 1;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <state_update+0x94>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000b9e:	e013      	b.n	8000bc8 <state_update+0x74>
		}
	} else {
		CURRENT_STATE[idx] = (CURRENT_STATE[idx] - 1 + 3) % 3;
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <state_update+0x94>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	1c99      	adds	r1, r3, #2
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <state_update+0x98>)
 8000bac:	fb83 3201 	smull	r3, r2, r3, r1
 8000bb0:	17cb      	asrs	r3, r1, #31
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <state_update+0x94>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bc4:	e000      	b.n	8000bc8 <state_update+0x74>
			break;
 8000bc6:	bf00      	nop
	}
	SEG7_CLOCK[idx] = LED_TIME[CURRENT_STATE[idx]];
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <state_update+0x94>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <state_update+0x9c>)
 8000bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd6:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <state_update+0xa0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000004 	.word	0x20000004
 8000bec:	55555556 	.word	0x55555556
 8000bf0:	20000014 	.word	0x20000014
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <check_state>:

void check_state() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (SEG7_CLOCK[VER_LED] <= 0) {
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <check_state+0x2c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc04      	bgt.n	8000c0e <check_state+0x16>
		state_update(VER_LED);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ffa5 	bl	8000b54 <state_update>
		vertical_processing();
 8000c0a:	f7ff ff5b 	bl	8000ac4 <vertical_processing>
	}

	if (SEG7_CLOCK[HOR_LED] <= 0) {
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <check_state+0x2c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dc04      	bgt.n	8000c20 <check_state+0x28>
		state_update(HOR_LED);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff9c 	bl	8000b54 <state_update>
		horizontal_processing();
 8000c1c:	f7ff ff76 	bl	8000b0c <horizontal_processing>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <update_clock>:

void update_clock() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <update_clock+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d113      	bne.n	8000c5c <update_clock+0x34>
		SEG7_CLOCK[VER_LED] = SEG7_CLOCK[VER_LED] - TIME_UNIT;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <update_clock+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <update_clock+0x3c>)
 8000c3e:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = SEG7_CLOCK[HOR_LED] - TIME_UNIT;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <update_clock+0x3c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <update_clock+0x3c>)
 8000c4a:	6053      	str	r3, [r2, #4]
		check_state();
 8000c4c:	f7ff ffd4 	bl	8000bf8 <check_state>
		updateDisplay();
 8000c50:	f7ff fee8 	bl	8000a24 <updateDisplay>
		setTimer2(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 ff2a 	bl	8001ab0 <setTimer2>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000013c 	.word	0x2000013c
 8000c64:	2000000c 	.word	0x2000000c

08000c68 <reset>:

void reset() {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	LED_TIME[RED_STATUS] = NORMAL_RED ;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <reset+0x4c>)
 8000c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c72:	601a      	str	r2, [r3, #0]
	LED_TIME[YELLOW_STATUS] = NORMAL_YELLOW;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <reset+0x4c>)
 8000c76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c7a:	605a      	str	r2, [r3, #4]
	LED_TIME[GREEN_STATUS] = NORMAL_GREEN;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <reset+0x4c>)
 8000c7e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000c82:	609a      	str	r2, [r3, #8]
	CURRENT_STATE[VER_LED] = RED_STATUS;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <reset+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <reset+0x50>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
	SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <reset+0x50>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <reset+0x4c>)
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <reset+0x54>)
 8000c9c:	6013      	str	r3, [r2, #0]
	SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <reset+0x50>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <reset+0x4c>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <reset+0x54>)
 8000caa:	6053      	str	r3, [r2, #4]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <confirm_action>:


void confirm_action(int mode, int time_inc) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!7SEG:%d#\r\n",TIMES_INC), 1000);
	switch (mode) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d01f      	beq.n	8000d10 <confirm_action+0x50>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dc27      	bgt.n	8000d26 <confirm_action+0x66>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <confirm_action+0x24>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00b      	beq.n	8000cfa <confirm_action+0x3a>
		break;
	case 2: // Inc green time
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (time_inc * TIME_UNIT);
		break;
	default:
		break;
 8000ce2:	e020      	b.n	8000d26 <confirm_action+0x66>
		LED_TIME[RED_STATUS] = LED_TIME[RED_STATUS] + (time_inc * TIME_UNIT);
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <confirm_action+0x74>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <confirm_action+0x74>)
 8000cf6:	6013      	str	r3, [r2, #0]
		break;
 8000cf8:	e016      	b.n	8000d28 <confirm_action+0x68>
		LED_TIME[YELLOW_STATUS] = LED_TIME[YELLOW_STATUS] + (time_inc * TIME_UNIT);
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <confirm_action+0x74>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	fb01 f303 	mul.w	r3, r1, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <confirm_action+0x74>)
 8000d0c:	6053      	str	r3, [r2, #4]
		break;
 8000d0e:	e00b      	b.n	8000d28 <confirm_action+0x68>
		LED_TIME [GREEN_STATUS] = LED_TIME[GREEN_STATUS] + (time_inc * TIME_UNIT);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <confirm_action+0x74>)
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d1a:	fb01 f303 	mul.w	r3, r1, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <confirm_action+0x74>)
 8000d22:	6093      	str	r3, [r2, #8]
		break;
 8000d24:	e000      	b.n	8000d28 <confirm_action+0x68>
		break;
 8000d26:	bf00      	nop
	}

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000014 	.word	0x20000014

08000d38 <state_handle>:

void state_handle() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	switch (index_mode) {
 8000d3c:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <state_handle+0x174>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d077      	beq.n	8000e34 <state_handle+0xfc>
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	f300 80ae 	bgt.w	8000ea6 <state_handle+0x16e>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <state_handle+0x1c>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d039      	beq.n	8000dc6 <state_handle+0x8e>
		}
		SEG7_CLOCK[VER_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
		SEG7_CLOCK[HOR_LED] = 0;
		break;
	default:
		break;
 8000d52:	e0a8      	b.n	8000ea6 <state_handle+0x16e>
		if (timer1_flag == 1) {
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <state_handle+0x178>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d116      	bne.n	8000d8a <state_handle+0x52>
			HAL_GPIO_WritePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2108      	movs	r1, #8
 8000d60:	4854      	ldr	r0, [pc, #336]	; (8000eb4 <state_handle+0x17c>)
 8000d62:	f001 fd20 	bl	80027a6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	4853      	ldr	r0, [pc, #332]	; (8000eb8 <state_handle+0x180>)
 8000d6c:	f001 fd33 	bl	80027d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	484f      	ldr	r0, [pc, #316]	; (8000eb4 <state_handle+0x17c>)
 8000d76:	f001 fd16 	bl	80027a6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	484d      	ldr	r0, [pc, #308]	; (8000eb4 <state_handle+0x17c>)
 8000d7e:	f001 fd2a 	bl	80027d6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d86:	f000 fe79 	bl	8001a7c <setTimer1>
		if (LED_TIME[0] + TIMES_INC * TIME_UNIT > 99000) {
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <state_handle+0x184>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <state_handle+0x188>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d96:	fb01 f303 	mul.w	r3, r1, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <state_handle+0x18c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	dd02      	ble.n	8000da8 <state_handle+0x70>
			TIMES_INC = 0;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <state_handle+0x188>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[VER_LED] = LED_TIME[0] + TIMES_INC * TIME_UNIT;
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <state_handle+0x184>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <state_handle+0x188>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <state_handle+0x190>)
 8000dbc:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <state_handle+0x190>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
		break;
 8000dc4:	e070      	b.n	8000ea8 <state_handle+0x170>
		if (timer1_flag == 1) {
 8000dc6:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <state_handle+0x178>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d114      	bne.n	8000df8 <state_handle+0xc0>
			HAL_GPIO_TogglePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 8000dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd2:	4839      	ldr	r0, [pc, #228]	; (8000eb8 <state_handle+0x180>)
 8000dd4:	f001 fcff 	bl	80027d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4836      	ldr	r0, [pc, #216]	; (8000eb4 <state_handle+0x17c>)
 8000ddc:	f001 fcfb 	bl	80027d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 8000de0:	2120      	movs	r1, #32
 8000de2:	4834      	ldr	r0, [pc, #208]	; (8000eb4 <state_handle+0x17c>)
 8000de4:	f001 fcf7 	bl	80027d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
 8000de8:	2110      	movs	r1, #16
 8000dea:	4832      	ldr	r0, [pc, #200]	; (8000eb4 <state_handle+0x17c>)
 8000dec:	f001 fcf3 	bl	80027d6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f000 fe42 	bl	8001a7c <setTimer1>
		if (LED_TIME[1] + TIMES_INC * TIME_UNIT > 99000) {
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <state_handle+0x184>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <state_handle+0x188>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e04:	fb01 f303 	mul.w	r3, r1, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <state_handle+0x18c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	dd02      	ble.n	8000e16 <state_handle+0xde>
			TIMES_INC = 0;
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <state_handle+0x188>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[VER_LED] = LED_TIME[1] + TIMES_INC * TIME_UNIT;
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <state_handle+0x184>)
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <state_handle+0x188>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <state_handle+0x190>)
 8000e2a:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <state_handle+0x190>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
		break;
 8000e32:	e039      	b.n	8000ea8 <state_handle+0x170>
		if (timer1_flag == 1) {
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <state_handle+0x178>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d116      	bne.n	8000e6a <state_handle+0x132>
			HAL_GPIO_WritePin(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <state_handle+0x180>)
 8000e44:	f001 fcaf 	bl	80027a6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
 8000e48:	2108      	movs	r1, #8
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <state_handle+0x17c>)
 8000e4c:	f001 fcc3 	bl	80027d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <state_handle+0x17c>)
 8000e56:	f001 fca6 	bl	80027a6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <state_handle+0x17c>)
 8000e5e:	f001 fcba 	bl	80027d6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e66:	f000 fe09 	bl	8001a7c <setTimer1>
		if (LED_TIME[2] + TIMES_INC * TIME_UNIT > 99000) {
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <state_handle+0x184>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <state_handle+0x188>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e76:	fb01 f303 	mul.w	r3, r1, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <state_handle+0x18c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	dd02      	ble.n	8000e88 <state_handle+0x150>
			TIMES_INC = 0;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <state_handle+0x188>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
		SEG7_CLOCK[VER_LED] = LED_TIME[2] + TIMES_INC * TIME_UNIT;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <state_handle+0x184>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <state_handle+0x188>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <state_handle+0x190>)
 8000e9c:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = 0;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <state_handle+0x190>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
		break;
 8000ea4:	e000      	b.n	8000ea8 <state_handle+0x170>
		break;
 8000ea6:	bf00      	nop
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000138 	.word	0x20000138
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	20000014 	.word	0x20000014
 8000ec0:	200000e0 	.word	0x200000e0
 8000ec4:	000182b8 	.word	0x000182b8
 8000ec8:	2000000c 	.word	0x2000000c

08000ecc <traffic_processing>:

void traffic_processing() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	switch (status) {
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <traffic_processing+0x70>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d02b      	beq.n	8000f30 <traffic_processing+0x64>
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	dc2c      	bgt.n	8000f36 <traffic_processing+0x6a>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <traffic_processing+0x1a>
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d022      	beq.n	8000f2a <traffic_processing+0x5e>
		break;
	case 2: // Modify state
		state_handle();
		break;
	default:
		break;
 8000ee4:	e027      	b.n	8000f36 <traffic_processing+0x6a>
		CURRENT_STATE[VER_LED] = RED_STATUS;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <traffic_processing+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		CURRENT_STATE[HOR_LED] = GREEN_STATUS;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <traffic_processing+0x74>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	605a      	str	r2, [r3, #4]
		SEG7_CLOCK[VER_LED] = LED_TIME[CURRENT_STATE[VER_LED]];
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <traffic_processing+0x74>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <traffic_processing+0x78>)
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <traffic_processing+0x7c>)
 8000efe:	6013      	str	r3, [r2, #0]
		SEG7_CLOCK[HOR_LED] = LED_TIME[CURRENT_STATE[HOR_LED]];
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <traffic_processing+0x74>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <traffic_processing+0x78>)
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <traffic_processing+0x7c>)
 8000f0c:	6053      	str	r3, [r2, #4]
		updateDisplay();
 8000f0e:	f7ff fd89 	bl	8000a24 <updateDisplay>
		vertical_processing();
 8000f12:	f7ff fdd7 	bl	8000ac4 <vertical_processing>
		horizontal_processing();
 8000f16:	f7ff fdf9 	bl	8000b0c <horizontal_processing>
		status = 1;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <traffic_processing+0x70>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
	    setTimer2(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f24:	f000 fdc4 	bl	8001ab0 <setTimer2>
		break;
 8000f28:	e006      	b.n	8000f38 <traffic_processing+0x6c>
		update_clock();
 8000f2a:	f7ff fe7d 	bl	8000c28 <update_clock>
		break;
 8000f2e:	e003      	b.n	8000f38 <traffic_processing+0x6c>
		state_handle();
 8000f30:	f7ff ff02 	bl	8000d38 <state_handle>
		break;
 8000f34:	e000      	b.n	8000f38 <traffic_processing+0x6c>
		break;
 8000f36:	bf00      	nop
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000d8 	.word	0x200000d8
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000014 	.word	0x20000014
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <input_processing>:

void input_processing() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	// Switch button
	if (is_button_pressed(0)) {
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f933 	bl	80011bc <is_button_pressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01d      	beq.n	8000f98 <input_processing+0x4c>
		clear_vertical();
 8000f5c:	f7ff fda3 	bl	8000aa6 <clear_vertical>
		clear_horizontal();
 8000f60:	f7ff fda8 	bl	8000ab4 <clear_horizontal>
		status = 2;
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <input_processing+0xd4>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
		index_mode = (index_mode + 1);
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <input_processing+0xd8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <input_processing+0xd8>)
 8000f72:	6013      	str	r3, [r2, #0]
		TIMES_INC = 0;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <input_processing+0xdc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		if (index_mode >= 3) {
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <input_processing+0xd8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	dd06      	ble.n	8000f90 <input_processing+0x44>
			status = 0;
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <input_processing+0xd4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
			index_mode = -1;
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <input_processing+0xd8>)
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	601a      	str	r2, [r3, #0]
		}
		state_handle();
 8000f90:	f7ff fed2 	bl	8000d38 <state_handle>
		updateDisplay();
 8000f94:	f7ff fd46 	bl	8000a24 <updateDisplay>
	}

	// Add button
	if (is_button_pressed(1) && index_mode != -1) {
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 f90f 	bl	80011bc <is_button_pressed>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d011      	beq.n	8000fc8 <input_processing+0x7c>
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <input_processing+0xd8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d00c      	beq.n	8000fc8 <input_processing+0x7c>
		TIMES_INC = TIMES_INC + 1;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <input_processing+0xdc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <input_processing+0xdc>)
 8000fb6:	6013      	str	r3, [r2, #0]
		if (start != 0) {
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <input_processing+0xe0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <input_processing+0x7c>
			state_handle();
 8000fc0:	f7ff feba 	bl	8000d38 <state_handle>
			updateDisplay();
 8000fc4:	f7ff fd2e 	bl	8000a24 <updateDisplay>
		}
	}

	// Confirm button
	if (is_button_pressed(2) && index_mode != -1) {
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f000 f8f7 	bl	80011bc <is_button_pressed>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01a      	beq.n	800100a <input_processing+0xbe>
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <input_processing+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d015      	beq.n	800100a <input_processing+0xbe>
		if (TIMES_INC != 0) {
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <input_processing+0xdc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <input_processing+0xaa>
			confirm_action(index_mode, TIMES_INC);
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <input_processing+0xd8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <input_processing+0xdc>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe65 	bl	8000cc0 <confirm_action>
		}
		TIMES_INC = 0;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <input_processing+0xdc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
		index_mode = -1;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <input_processing+0xd8>)
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	601a      	str	r2, [r3, #0]
		status = 0;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <input_processing+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	}

	// RESET when start
	if (start == 0) {
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <input_processing+0xe0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <input_processing+0xd0>
		reset();
 8001012:	f7ff fe29 	bl	8000c68 <reset>
		start = 1;
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <input_processing+0xe0>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
	}
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000d8 	.word	0x200000d8
 8001024:	20000000 	.word	0x20000000
 8001028:	200000e0 	.word	0x200000e0
 800102c:	200000dc 	.word	0x200000dc

08001030 <fsm_simple_button_run>:

void fsm_simple_button_run() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	switch (buttonState) {
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <fsm_simple_button_run+0x3c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <fsm_simple_button_run+0x12>
 800103c:	2b01      	cmp	r3, #1
 800103e:	d00a      	beq.n	8001056 <fsm_simple_button_run+0x26>
	case BUTTON_PRESSED:
		if (!WhichButtonIsPressed()) {
			buttonState = BUTTON_RELEASED;
		}
	default:
		break;
 8001040:	e011      	b.n	8001066 <fsm_simple_button_run+0x36>
		if (WhichButtonIsPressed()) {
 8001042:	f7ff fd13 	bl	8000a6c <WhichButtonIsPressed>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <fsm_simple_button_run+0x26>
			buttonState = BUTTON_PRESSED;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <fsm_simple_button_run+0x3c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
			input_processing();
 8001052:	f7ff ff7b 	bl	8000f4c <input_processing>
		if (!WhichButtonIsPressed()) {
 8001056:	f7ff fd09 	bl	8000a6c <WhichButtonIsPressed>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <fsm_simple_button_run+0x36>
			buttonState = BUTTON_RELEASED;
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <fsm_simple_button_run+0x3c>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
		break;
 8001066:	bf00      	nop
	}
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000f8 	.word	0x200000f8

08001070 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e081      	b.n	8001180 <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <button_reading+0x124>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	7819      	ldrb	r1, [r3, #0]
 8001084:	4a44      	ldr	r2, [pc, #272]	; (8001198 <button_reading+0x128>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	460a      	mov	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <button_reading+0x12c>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001096:	4942      	ldr	r1, [pc, #264]	; (80011a0 <button_reading+0x130>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f001 fb69 	bl	8002778 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <button_reading+0x124>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	460a      	mov	r2, r1
 80010b2:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80010b4:	4a37      	ldr	r2, [pc, #220]	; (8001194 <button_reading+0x124>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4936      	ldr	r1, [pc, #216]	; (8001198 <button_reading+0x128>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	440b      	add	r3, r1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d158      	bne.n	800117a <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80010c8:	4a32      	ldr	r2, [pc, #200]	; (8001194 <button_reading+0x124>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	7819      	ldrb	r1, [r3, #0]
 80010d0:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <button_reading+0x134>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80010da:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <button_reading+0x134>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d135      	bne.n	8001152 <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <button_reading+0x138>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ee:	2b18      	cmp	r3, #24
 80010f0:	d80e      	bhi.n	8001110 <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <button_reading+0x13c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 80010fa:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <button_reading+0x138>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001102:	3301      	adds	r3, #1
 8001104:	b299      	uxth	r1, r3
 8001106:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <button_reading+0x138>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800110e:	e009      	b.n	8001124 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <button_reading+0x138>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2100      	movs	r1, #0
 8001116:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 800111a:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <button_reading+0x140>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2101      	movs	r1, #1
 8001120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <button_reading+0x144>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800112c:	2b63      	cmp	r3, #99	; 0x63
 800112e:	d80a      	bhi.n	8001146 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <button_reading+0x144>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001138:	3301      	adds	r3, #1
 800113a:	b299      	uxth	r1, r3
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <button_reading+0x144>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001144:	e019      	b.n	800117a <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <button_reading+0x148>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e013      	b.n	800117a <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <button_reading+0x144>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2100      	movs	r1, #0
 8001158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <button_reading+0x138>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2100      	movs	r1, #0
 8001162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <button_reading+0x148>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <button_reading+0x140>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2100      	movs	r1, #0
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b03      	cmp	r3, #3
 8001184:	f77f af7a 	ble.w	800107c <button_reading+0xc>
			}
		}
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000100 	.word	0x20000100
 8001198:	20000104 	.word	0x20000104
 800119c:	20000020 	.word	0x20000020
 80011a0:	20000030 	.word	0x20000030
 80011a4:	200000fc 	.word	0x200000fc
 80011a8:	20000114 	.word	0x20000114
 80011ac:	200000e4 	.word	0x200000e4
 80011b0:	200000e8 	.word	0x200000e8
 80011b4:	2000010c 	.word	0x2000010c
 80011b8:	20000108 	.word	0x20000108

080011bc <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d901      	bls.n	80011d0 <is_button_pressed+0x14>
 80011cc:	2300      	movs	r3, #0
 80011ce:	e007      	b.n	80011e0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <is_button_pressed+0x30>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200000fc 	.word	0x200000fc

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f4:	f000 ffa8 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f8:	f000 f82e 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f000 f95a 	bl	80014b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001200:	f000 f92e 	bl	8001460 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001204:	f000 f86a 	bl	80012dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001208:	f000 f8b4 	bl	8001374 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <main+0x5c>)
 8001210:	f002 f826 	bl	8003260 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <main+0x60>)
 8001216:	f001 ff79 	bl	800310c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <main+0x5c>)
 800121c:	f001 ff76 	bl	800310c <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(fsm_simple_button_run, 0, 10);
//  SCH_Add_Task(traffic_processing, 0, 1000);
//  SCH_Add_Task(button_reading, 40, 10);
//  SCH_Add_Task(pedestrian_scramble, 30, 10);
//  find_new_min_task();
  setTimer1(500);
 8001220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001224:	f000 fc2a 	bl	8001a7c <setTimer1>
  setTimer2(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f000 fc40 	bl	8001ab0 <setTimer2>
  setTimer3(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 fc57 	bl	8001ae4 <setTimer3>
    /* USER CODE BEGIN 3 */
//	  if (timer3_flag == 1) {
//		updateDisplay();
//		setTimer3(200);
//	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001236:	2120      	movs	r1, #32
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <main+0x64>)
 800123a:	f001 facc 	bl	80027d6 <HAL_GPIO_TogglePin>
	  fsm_simple_button_run();
 800123e:	f7ff fef7 	bl	8001030 <fsm_simple_button_run>
	  traffic_processing();
 8001242:	f7ff fe43 	bl	8000ecc <traffic_processing>
	  pedestrian_scramble();
 8001246:	f000 f9f7 	bl	8001638 <pedestrian_scramble>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800124a:	e7f4      	b.n	8001236 <main+0x46>
 800124c:	200001a0 	.word	0x200001a0
 8001250:	200001e8 	.word	0x200001e8
 8001254:	40010800 	.word	0x40010800

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b090      	sub	sp, #64	; 0x40
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	2228      	movs	r2, #40	; 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 f840 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	2310      	movs	r3, #16
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800128e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f001 facd 	bl	8002838 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012a4:	f000 f9c3 	bl	800162e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fd38 	bl	8002d38 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012ce:	f000 f9ae 	bl	800162e <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM2_Init+0x94>)
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM2_Init+0x94>)
 8001302:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM2_Init+0x94>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM2_Init+0x94>)
 8001310:	2213      	movs	r2, #19
 8001312:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_TIM2_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM2_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_TIM2_Init+0x94>)
 8001322:	f001 fea3 	bl	800306c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800132c:	f000 f97f 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM2_Init+0x94>)
 800133e:	f002 f9f7 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001348:	f000 f971 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM2_Init+0x94>)
 800135a:	f002 fd75 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001364:	f000 f963 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200001e8 	.word	0x200001e8

08001374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <MX_TIM3_Init+0xe8>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013ac:	223f      	movs	r2, #63	; 0x3f
 80013ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ca:	4823      	ldr	r0, [pc, #140]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013cc:	f001 fe4e 	bl	800306c <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013d6:	f000 f92a 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e4:	4619      	mov	r1, r3
 80013e6:	481c      	ldr	r0, [pc, #112]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013e8:	f002 f9a2 	bl	8003730 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013f2:	f000 f91c 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013f6:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_TIM3_Init+0xe4>)
 80013f8:	f001 feda 	bl	80031b0 <HAL_TIM_PWM_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001402:	f000 f914 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	4619      	mov	r1, r3
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <MX_TIM3_Init+0xe4>)
 8001416:	f002 fd17 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001420:	f000 f905 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001424:	2360      	movs	r3, #96	; 0x60
 8001426:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM3_Init+0xe4>)
 800143c:	f002 f8ba 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001446:	f000 f8f2 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <MX_TIM3_Init+0xe4>)
 800144c:	f000 fc40 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	; 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200001a0 	.word	0x200001a0
 800145c:	40000400 	.word	0x40000400

08001460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_USART2_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800146c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001498:	f002 fd46 	bl	8003f28 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f000 f8c4 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000230 	.word	0x20000230
 80014b0:	40004400 	.word	0x40004400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c8:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a44      	ldr	r2, [pc, #272]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <MX_GPIO_Init+0x12c>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <MX_GPIO_Init+0x12c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_GPIO_Init+0x12c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <MX_GPIO_Init+0x12c>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_GPIO_Init+0x12c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Traffic_Pedes_2_Pin|Traffic_1_1_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800152e:	482d      	ldr	r0, [pc, #180]	; (80015e4 <MX_GPIO_Init+0x130>)
 8001530:	f001 f939 	bl	80027a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800153a:	482b      	ldr	r0, [pc, #172]	; (80015e8 <MX_GPIO_Init+0x134>)
 800153c:	f001 f933 	bl	80027a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_GPIO_Init+0x138>)
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	4826      	ldr	r0, [pc, #152]	; (80015f0 <MX_GPIO_Init+0x13c>)
 8001556:	f000 ff8b 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pedes_Pin B_1_Pin B_2_Pin */
  GPIO_InitStruct.Pin = B_Pedes_Pin|B_1_Pin|B_2_Pin;
 800155a:	2313      	movs	r3, #19
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	481d      	ldr	r0, [pc, #116]	; (80015e4 <MX_GPIO_Init+0x130>)
 800156e:	f000 ff7f 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Traffic_Pedes_2_Pin Traffic_1_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Traffic_Pedes_2_Pin|Traffic_1_1_Pin;
 8001572:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_GPIO_Init+0x130>)
 800158c:	f000 ff70 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_3_Pin */
  GPIO_InitStruct.Pin = B_3_Pin;
 8001590:	2301      	movs	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B_3_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_GPIO_Init+0x134>)
 80015a4:	f000 ff64 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_Pedes_1_Pin Traffic_1_2_Pin Traffic_2_2_Pin Traffic_2_1_Pin */
  GPIO_InitStruct.Pin = Traffic_Pedes_1_Pin|Traffic_1_2_Pin|Traffic_2_2_Pin|Traffic_2_1_Pin;
 80015a8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MX_GPIO_Init+0x134>)
 80015c2:	f000 ff55 	bl	8002470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2028      	movs	r0, #40	; 0x28
 80015cc:	f000 ff19 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d0:	2028      	movs	r0, #40	; 0x28
 80015d2:	f000 ff32 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	10110000 	.word	0x10110000
 80015f0:	40011000 	.word	0x40011000

080015f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d105      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x1e>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 8001606:	f000 fa87 	bl	8001b18 <timerRun>
		SCH_Update();
 800160a:	f000 f9e1 	bl	80019d0 <SCH_Update>
		button_reading();
 800160e:	f7ff fd2f 	bl	8001070 <button_reading>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	80fb      	strh	r3, [r7, #6]

}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
}
 8001634:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001636:	e7fe      	b.n	8001636 <Error_Handler+0x8>

08001638 <pedestrian_scramble>:
int pedestrian_wanna_go = 0;
extern TIM_HandleTypeDef htim3;

float extra_step = 1;

void pedestrian_scramble() {
 8001638:	b598      	push	{r3, r4, r7, lr}
 800163a:	af00      	add	r7, sp, #0
		if (is_button_pressed(3)) {
 800163c:	2003      	movs	r0, #3
 800163e:	f7ff fdbd 	bl	80011bc <is_button_pressed>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <pedestrian_scramble+0x2e>
			pedestrian_wanna_go = 1;
 8001648:	4ba1      	ldr	r3, [pc, #644]	; (80018d0 <pedestrian_scramble+0x298>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
			if (get_led_color(TRAFFIC_1_LED) == RED_COLOR) {
 800164e:	2028      	movs	r0, #40	; 0x28
 8001650:	f000 fce4 	bl	800201c <get_led_color>
 8001654:	4603      	mov	r3, r0
 8001656:	2b1e      	cmp	r3, #30
 8001658:	d105      	bne.n	8001666 <pedestrian_scramble+0x2e>
				pedestrian_active = 1;
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <pedestrian_scramble+0x29c>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
				flag_button = 1;
 8001660:	4b9d      	ldr	r3, [pc, #628]	; (80018d8 <pedestrian_scramble+0x2a0>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
			}
		}

		if ( get_led_color(TRAFFIC_1_LED) == RED_COLOR && (flag_button || pedestrian_wanna_go) ) {
 8001666:	2028      	movs	r0, #40	; 0x28
 8001668:	f000 fcd8 	bl	800201c <get_led_color>
 800166c:	4603      	mov	r3, r0
 800166e:	2b1e      	cmp	r3, #30
 8001670:	d12a      	bne.n	80016c8 <pedestrian_scramble+0x90>
 8001672:	4b99      	ldr	r3, [pc, #612]	; (80018d8 <pedestrian_scramble+0x2a0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <pedestrian_scramble+0x4a>
 800167a:	4b95      	ldr	r3, [pc, #596]	; (80018d0 <pedestrian_scramble+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d022      	beq.n	80016c8 <pedestrian_scramble+0x90>
			pedestrian_active = 1;
 8001682:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <pedestrian_scramble+0x29c>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
			/* Calculate number of step for increase frequency and decrease delay time */
			FREQ_STEP = 120 / (SEG7_CLOCK[0] / TIME_UNIT);
 8001688:	4b94      	ldr	r3, [pc, #592]	; (80018dc <pedestrian_scramble+0x2a4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a94      	ldr	r2, [pc, #592]	; (80018e0 <pedestrian_scramble+0x2a8>)
 800168e:	fb82 1203 	smull	r1, r2, r2, r3
 8001692:	1192      	asrs	r2, r2, #6
 8001694:	17db      	asrs	r3, r3, #31
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2278      	movs	r2, #120	; 0x78
 800169a:	fb92 f3f3 	sdiv	r3, r2, r3
 800169e:	4a91      	ldr	r2, [pc, #580]	; (80018e4 <pedestrian_scramble+0x2ac>)
 80016a0:	6013      	str	r3, [r2, #0]
			DELAY_STEP = 400 / (SEG7_CLOCK[0] / TIME_UNIT);
 80016a2:	4b8e      	ldr	r3, [pc, #568]	; (80018dc <pedestrian_scramble+0x2a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a8e      	ldr	r2, [pc, #568]	; (80018e0 <pedestrian_scramble+0x2a8>)
 80016a8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ac:	1192      	asrs	r2, r2, #6
 80016ae:	17db      	asrs	r3, r3, #31
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ba:	4a8b      	ldr	r2, [pc, #556]	; (80018e8 <pedestrian_scramble+0x2b0>)
 80016bc:	6013      	str	r3, [r2, #0]
			time_allow_pedestrian = SEG7_CLOCK[0];
 80016be:	4b87      	ldr	r3, [pc, #540]	; (80018dc <pedestrian_scramble+0x2a4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a8a      	ldr	r2, [pc, #552]	; (80018ec <pedestrian_scramble+0x2b4>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e006      	b.n	80016d6 <pedestrian_scramble+0x9e>
		}
		else {
			pedestrian_active = 0;
 80016c8:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <pedestrian_scramble+0x29c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 80016ce:	211e      	movs	r1, #30
 80016d0:	202a      	movs	r0, #42	; 0x2a
 80016d2:	f000 fc2d 	bl	8001f30 <set_led_color>
		}

		if (pedestrian_active) {
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <pedestrian_scramble+0x29c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8144 	beq.w	8001968 <pedestrian_scramble+0x330>
			set_led_color(PEDESTRIAN_LED, GREEN_COLOR);
 80016e0:	2120      	movs	r1, #32
 80016e2:	202a      	movs	r0, #42	; 0x2a
 80016e4:	f000 fc24 	bl	8001f30 <set_led_color>
			/* Buzzer frequency */
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <pedestrian_scramble+0x2b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(delay);
 80016f0:	4b80      	ldr	r3, [pc, #512]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fd89 	bl	800220c <HAL_Delay>

			/* If 2/3 time has passed, need more extra step*/
			if (SEG7_CLOCK[0] >= 2 * time_allow_pedestrian / 3) {
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <pedestrian_scramble+0x2a4>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <pedestrian_scramble+0x2b4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	497c      	ldr	r1, [pc, #496]	; (80018f8 <pedestrian_scramble+0x2c0>)
 8001706:	fb81 0103 	smull	r0, r1, r1, r3
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1acb      	subs	r3, r1, r3
 800170e:	429a      	cmp	r2, r3
 8001710:	db62      	blt.n	80017d8 <pedestrian_scramble+0x1a0>
				extra_step += 0.09;
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <pedestrian_scramble+0x2c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff32 	bl	8000580 <__aeabi_f2d>
 800171c:	a368      	add	r3, pc, #416	; (adr r3, 80018c0 <pedestrian_scramble+0x288>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe fdcf 	bl	80002c4 <__adddf3>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7fe ff7f 	bl	8000630 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a71      	ldr	r2, [pc, #452]	; (80018fc <pedestrian_scramble+0x2c4>)
 8001736:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += FREQ_STEP);
 8001738:	4b71      	ldr	r3, [pc, #452]	; (8001900 <pedestrian_scramble+0x2c8>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <pedestrian_scramble+0x2ac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4a6f      	ldr	r2, [pc, #444]	; (8001900 <pedestrian_scramble+0x2c8>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <pedestrian_scramble+0x2c8>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <pedestrian_scramble+0x2b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <pedestrian_scramble+0x2bc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f875 	bl	8000844 <__aeabi_i2f>
 800175a:	4604      	mov	r4, r0
 800175c:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <pedestrian_scramble+0x2b0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f86f 	bl	8000844 <__aeabi_i2f>
 8001766:	4602      	mov	r2, r0
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <pedestrian_scramble+0x2c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	4610      	mov	r0, r2
 8001770:	f7fe fcee 	bl	8000150 <__aeabi_fmul>
 8001774:	4603      	mov	r3, r0
 8001776:	4619      	mov	r1, r3
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff f923 	bl	80009c4 <__aeabi_fcmpgt>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <pedestrian_scramble+0x194>
 8001784:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <pedestrian_scramble+0x2bc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff f85b 	bl	8000844 <__aeabi_i2f>
 800178e:	4604      	mov	r4, r0
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <pedestrian_scramble+0x2b0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff f855 	bl	8000844 <__aeabi_i2f>
 800179a:	4602      	mov	r2, r0
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <pedestrian_scramble+0x2c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7fe fcd4 	bl	8000150 <__aeabi_fmul>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7fe ff93 	bl	80006d8 <__aeabi_fsub>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f90f 	bl	80009d8 <__aeabi_f2iz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd21 	bl	800220c <HAL_Delay>
 80017ca:	e0c9      	b.n	8001960 <pedestrian_scramble+0x328>
				else HAL_Delay(delay);
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fd1b 	bl	800220c <HAL_Delay>
 80017d6:	e0c3      	b.n	8001960 <pedestrian_scramble+0x328>
			} else {
				extra_step += 0.3;
 80017d8:	4b48      	ldr	r3, [pc, #288]	; (80018fc <pedestrian_scramble+0x2c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fecf 	bl	8000580 <__aeabi_f2d>
 80017e2:	a339      	add	r3, pc, #228	; (adr r3, 80018c8 <pedestrian_scramble+0x290>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fd6c 	bl	80002c4 <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7fe ff1c 	bl	8000630 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <pedestrian_scramble+0x2c4>)
 80017fc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, FREQ += extra_step * FREQ_STEP);
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <pedestrian_scramble+0x2c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f81e 	bl	8000844 <__aeabi_i2f>
 8001808:	4604      	mov	r4, r0
 800180a:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <pedestrian_scramble+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f818 	bl	8000844 <__aeabi_i2f>
 8001814:	4602      	mov	r2, r0
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <pedestrian_scramble+0x2c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	4610      	mov	r0, r2
 800181e:	f7fe fc97 	bl	8000150 <__aeabi_fmul>
 8001822:	4603      	mov	r3, r0
 8001824:	4619      	mov	r1, r3
 8001826:	4620      	mov	r0, r4
 8001828:	f7fe ff58 	bl	80006dc <__addsf3>
 800182c:	4603      	mov	r3, r0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f8d2 	bl	80009d8 <__aeabi_f2iz>
 8001834:	4603      	mov	r3, r0
 8001836:	4a32      	ldr	r2, [pc, #200]	; (8001900 <pedestrian_scramble+0x2c8>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <pedestrian_scramble+0x2c8>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <pedestrian_scramble+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
				if (delay > extra_step * DELAY_STEP) HAL_Delay(delay -= extra_step * DELAY_STEP);
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <pedestrian_scramble+0x2bc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fffb 	bl	8000844 <__aeabi_i2f>
 800184e:	4604      	mov	r4, r0
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <pedestrian_scramble+0x2b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fff5 	bl	8000844 <__aeabi_i2f>
 800185a:	4602      	mov	r2, r0
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <pedestrian_scramble+0x2c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f7fe fc74 	bl	8000150 <__aeabi_fmul>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff f8a9 	bl	80009c4 <__aeabi_fcmpgt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d045      	beq.n	8001904 <pedestrian_scramble+0x2cc>
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <pedestrian_scramble+0x2bc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe ffe1 	bl	8000844 <__aeabi_i2f>
 8001882:	4604      	mov	r4, r0
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <pedestrian_scramble+0x2b0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe ffdb 	bl	8000844 <__aeabi_i2f>
 800188e:	4602      	mov	r2, r0
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <pedestrian_scramble+0x2c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f7fe fc5a 	bl	8000150 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	4619      	mov	r1, r3
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7fe ff19 	bl	80006d8 <__aeabi_fsub>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f895 	bl	80009d8 <__aeabi_f2iz>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <pedestrian_scramble+0x2bc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fca7 	bl	800220c <HAL_Delay>
 80018be:	e04f      	b.n	8001960 <pedestrian_scramble+0x328>
 80018c0:	70a3d70a 	.word	0x70a3d70a
 80018c4:	3fb70a3d 	.word	0x3fb70a3d
 80018c8:	33333333 	.word	0x33333333
 80018cc:	3fd33333 	.word	0x3fd33333
 80018d0:	20000130 	.word	0x20000130
 80018d4:	2000011c 	.word	0x2000011c
 80018d8:	20000128 	.word	0x20000128
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	10624dd3 	.word	0x10624dd3
 80018e4:	20000120 	.word	0x20000120
 80018e8:	20000040 	.word	0x20000040
 80018ec:	20000124 	.word	0x20000124
 80018f0:	200001a0 	.word	0x200001a0
 80018f4:	20000038 	.word	0x20000038
 80018f8:	55555556 	.word	0x55555556
 80018fc:	20000044 	.word	0x20000044
 8001900:	2000003c 	.word	0x2000003c
				else if (delay > extra_step * 10) HAL_Delay(delay = - extra_step * 20);
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <pedestrian_scramble+0x374>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ff9b 	bl	8000844 <__aeabi_i2f>
 800190e:	4604      	mov	r4, r0
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <pedestrian_scramble+0x378>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4927      	ldr	r1, [pc, #156]	; (80019b4 <pedestrian_scramble+0x37c>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fc1a 	bl	8000150 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff f84f 	bl	80009c4 <__aeabi_fcmpgt>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d014      	beq.n	8001956 <pedestrian_scramble+0x31e>
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <pedestrian_scramble+0x378>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001934:	4920      	ldr	r1, [pc, #128]	; (80019b8 <pedestrian_scramble+0x380>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc0a 	bl	8000150 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f84a 	bl	80009d8 <__aeabi_f2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <pedestrian_scramble+0x374>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <pedestrian_scramble+0x374>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fc5c 	bl	800220c <HAL_Delay>
 8001954:	e004      	b.n	8001960 <pedestrian_scramble+0x328>
				else HAL_Delay(delay);
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <pedestrian_scramble+0x374>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fc56 	bl	800220c <HAL_Delay>
			}
			trigger_pedestrian_func = 1;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <pedestrian_scramble+0x384>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
			if (trigger_pedestrian_func) {
				pedestrian_wanna_go = 0;
				trigger_pedestrian_func = 0;
			}
		}
}
 8001966:	e01f      	b.n	80019a8 <pedestrian_scramble+0x370>
			set_led_color(PEDESTRIAN_LED, RED_COLOR);
 8001968:	211e      	movs	r1, #30
 800196a:	202a      	movs	r0, #42	; 0x2a
 800196c:	f000 fae0 	bl	8001f30 <set_led_color>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <pedestrian_scramble+0x388>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	; 0x34
			delay = TIME_UNIT;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <pedestrian_scramble+0x374>)
 800197a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197e:	601a      	str	r2, [r3, #0]
			FREQ = 10;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <pedestrian_scramble+0x38c>)
 8001982:	220a      	movs	r2, #10
 8001984:	601a      	str	r2, [r3, #0]
			extra_step = 1;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <pedestrian_scramble+0x378>)
 8001988:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800198c:	601a      	str	r2, [r3, #0]
			flag_button = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <pedestrian_scramble+0x390>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
			if (trigger_pedestrian_func) {
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <pedestrian_scramble+0x384>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <pedestrian_scramble+0x370>
				pedestrian_wanna_go = 0;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <pedestrian_scramble+0x394>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
				trigger_pedestrian_func = 0;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <pedestrian_scramble+0x384>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	bd98      	pop	{r3, r4, r7, pc}
 80019ac:	20000038 	.word	0x20000038
 80019b0:	20000044 	.word	0x20000044
 80019b4:	41200000 	.word	0x41200000
 80019b8:	41a00000 	.word	0x41a00000
 80019bc:	2000012c 	.word	0x2000012c
 80019c0:	200001a0 	.word	0x200001a0
 80019c4:	2000003c 	.word	0x2000003c
 80019c8:	20000128 	.word	0x20000128
 80019cc:	20000130 	.word	0x20000130

080019d0 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SCH_Update+0xa4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4927      	ldr	r1, [pc, #156]	; (8001a78 <SCH_Update+0xa8>)
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3304      	adds	r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <SCH_Update+0x44>
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <SCH_Update+0xa4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4921      	ldr	r1, [pc, #132]	; (8001a78 <SCH_Update+0xa8>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1e59      	subs	r1, r3, #1
 8001a02:	481d      	ldr	r0, [pc, #116]	; (8001a78 <SCH_Update+0xa8>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4403      	add	r3, r0
 8001a0e:	3304      	adds	r3, #4
 8001a10:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 8001a12:	e02a      	b.n	8001a6a <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SCH_Update+0xa4>)
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <SCH_Update+0xa4>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <SCH_Update+0xa8>)
 8001a1e:	460b      	mov	r3, r1
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4403      	add	r3, r0
 8001a28:	3308      	adds	r3, #8
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	4812      	ldr	r0, [pc, #72]	; (8001a78 <SCH_Update+0xa8>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4403      	add	r3, r0
 8001a38:	3304      	adds	r3, #4
 8001a3a:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <SCH_Update+0xa4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	490d      	ldr	r1, [pc, #52]	; (8001a78 <SCH_Update+0xa8>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	330c      	adds	r3, #12
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <SCH_Update+0xa4>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2d8      	uxtb	r0, r3
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <SCH_Update+0xa8>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	330c      	adds	r3, #12
 8001a66:	4602      	mov	r2, r0
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000134 	.word	0x20000134
 8001a78:	20000274 	.word	0x20000274

08001a7c <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <setTimer1+0x28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <setTimer1+0x2c>)
 8001a90:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <setTimer1+0x30>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000048 	.word	0x20000048
 8001aa8:	2000014c 	.word	0x2000014c
 8001aac:	20000138 	.word	0x20000138

08001ab0 <setTimer2>:
void setTimer2(int duration) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <setTimer2+0x28>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <setTimer2+0x2c>)
 8001ac4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <setTimer2+0x30>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000048 	.word	0x20000048
 8001adc:	20000150 	.word	0x20000150
 8001ae0:	2000013c 	.word	0x2000013c

08001ae4 <setTimer3>:
void setTimer3(int duration) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <setTimer3+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <setTimer3+0x2c>)
 8001af8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <setTimer3+0x30>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000048 	.word	0x20000048
 8001b10:	20000154 	.word	0x20000154
 8001b14:	20000140 	.word	0x20000140

08001b18 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <timerRun+0xac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dd0b      	ble.n	8001b3c <timerRun+0x24>
		timer1_counter--;
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <timerRun+0xac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <timerRun+0xac>)
 8001b2c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <timerRun+0xac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dc02      	bgt.n	8001b3c <timerRun+0x24>
			timer1_flag = 1;
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <timerRun+0xb0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <timerRun+0xb4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dd0b      	ble.n	8001b5c <timerRun+0x44>
		timer2_counter--;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <timerRun+0xb4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <timerRun+0xb4>)
 8001b4c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <timerRun+0xb4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	dc02      	bgt.n	8001b5c <timerRun+0x44>
			timer2_flag = 1;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <timerRun+0xb8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <timerRun+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dd0b      	ble.n	8001b7c <timerRun+0x64>
		timer3_counter--;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <timerRun+0xbc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <timerRun+0xbc>)
 8001b6c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <timerRun+0xbc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	dc02      	bgt.n	8001b7c <timerRun+0x64>
			timer3_flag = 1;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <timerRun+0xc0>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <timerRun+0xc4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dd0b      	ble.n	8001b9c <timerRun+0x84>
		timer4_counter--;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <timerRun+0xc4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <timerRun+0xc4>)
 8001b8c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <timerRun+0xc4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dc02      	bgt.n	8001b9c <timerRun+0x84>
			timer4_flag = 1;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <timerRun+0xc8>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <timerRun+0xcc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dd0b      	ble.n	8001bbc <timerRun+0xa4>
		timer5_counter--;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <timerRun+0xcc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <timerRun+0xcc>)
 8001bac:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <timerRun+0xcc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc02      	bgt.n	8001bbc <timerRun+0xa4>
			timer5_flag = 1;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <timerRun+0xd0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	2000014c 	.word	0x2000014c
 8001bc8:	20000138 	.word	0x20000138
 8001bcc:	20000150 	.word	0x20000150
 8001bd0:	2000013c 	.word	0x2000013c
 8001bd4:	20000154 	.word	0x20000154
 8001bd8:	20000140 	.word	0x20000140
 8001bdc:	20000158 	.word	0x20000158
 8001be0:	20000144 	.word	0x20000144
 8001be4:	2000015c 	.word	0x2000015c
 8001be8:	20000148 	.word	0x20000148

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_MspInit+0x5c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_MspInit+0x5c>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_MspInit+0x5c>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x5c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_MspInit+0x5c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_MspInit+0x5c>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_MspInit+0x60>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_MspInit+0x60>)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d114      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f000 fbbf 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c84:	201c      	movs	r0, #28
 8001c86:	f000 fbd8 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c8a:	e018      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_TIM_Base_MspInit+0x7c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d113      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0x78>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	201d      	movs	r0, #29
 8001cb4:	f000 fba5 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cb8:	201d      	movs	r0, #29
 8001cba:	f000 fbbe 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_TIM_MspPostInit+0x58>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d117      	bne.n	8001d20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_TIM_MspPostInit+0x5c>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_TIM_MspPostInit+0x5c>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_TIM_MspPostInit+0x5c>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_TIM_MspPostInit+0x60>)
 8001d1c:	f000 fba8 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010800 	.word	0x40010800

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d12f      	bne.n	8001db4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5e:	61d3      	str	r3, [r2, #28]
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d84:	2304      	movs	r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d98:	f000 fb6a 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001db0:	f000 fb5e 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 f9e1 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM2_IRQHandler+0x10>)
 8001e1e:	f001 fac1 	bl	80033a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001e8 	.word	0x200001e8

08001e2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM3_IRQHandler+0x10>)
 8001e32:	f001 fab7 	bl	80033a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001a0 	.word	0x200001a0

08001e40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e48:	f000 fcde 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f002 fa0a 	bl	8004298 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20005000 	.word	0x20005000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	20000160 	.word	0x20000160
 8001eb8:	200005a8 	.word	0x200005a8

08001ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <helper_set_led_color>:
 */


#include "traffic_light.h"

void helper_set_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2, int COLOR) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	813b      	strh	r3, [r7, #8]
	switch (COLOR) {
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d018      	beq.n	8001f14 <helper_set_led_color+0x4c>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	dc1d      	bgt.n	8001f24 <helper_set_led_color+0x5c>
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b1e      	cmp	r3, #30
 8001eec:	d003      	beq.n	8001ef6 <helper_set_led_color+0x2e>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b1f      	cmp	r3, #31
 8001ef2:	d008      	beq.n	8001f06 <helper_set_led_color+0x3e>
		case GREEN_COLOR:
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
			GPIOy->BSRR = GPIO_Pin2;
			break;
	}
}
 8001ef4:	e016      	b.n	8001f24 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001ef6:	897a      	ldrh	r2, [r7, #10]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = (uint32_t)GPIO_Pin2 << 16u;
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
			break;
 8001f04:	e00e      	b.n	8001f24 <helper_set_led_color+0x5c>
			GPIOx->BSRR = GPIO_Pin1;
 8001f06:	897a      	ldrh	r2, [r7, #10]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001f0c:	893a      	ldrh	r2, [r7, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
			break;
 8001f12:	e007      	b.n	8001f24 <helper_set_led_color+0x5c>
			GPIOx->BSRR = (uint32_t)GPIO_Pin1 << 16u;
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
			GPIOy->BSRR = GPIO_Pin2;
 8001f1c:	893a      	ldrh	r2, [r7, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
			break;
 8001f22:	bf00      	nop
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <set_led_color>:

void set_led_color(int led, int color) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	switch (led) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f3e:	d01c      	beq.n	8001f7a <set_led_color+0x4a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b2a      	cmp	r3, #42	; 0x2a
 8001f44:	dc24      	bgt.n	8001f90 <set_led_color+0x60>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b28      	cmp	r3, #40	; 0x28
 8001f4a:	d003      	beq.n	8001f54 <set_led_color+0x24>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b29      	cmp	r3, #41	; 0x29
 8001f50:	d00a      	beq.n	8001f68 <set_led_color+0x38>
		case PEDESTRIAN_LED:
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
					Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin, color);
			break;
	}
}
 8001f52:	e01d      	b.n	8001f90 <set_led_color+0x60>
			helper_set_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2308      	movs	r3, #8
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <set_led_color+0x68>)
 8001f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <set_led_color+0x6c>)
 8001f62:	f7ff ffb1 	bl	8001ec8 <helper_set_led_color>
			break;
 8001f66:	e013      	b.n	8001f90 <set_led_color+0x60>
			helper_set_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <set_led_color+0x68>)
 8001f70:	2120      	movs	r1, #32
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <set_led_color+0x68>)
 8001f74:	f7ff ffa8 	bl	8001ec8 <helper_set_led_color>
			break;
 8001f78:	e00a      	b.n	8001f90 <set_led_color+0x60>
			helper_set_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <set_led_color+0x6c>)
 8001f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <set_led_color+0x68>)
 8001f8a:	f7ff ff9d 	bl	8001ec8 <helper_set_led_color>
			break;
 8001f8e:	bf00      	nop
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <helper_get_led_color>:

int helper_get_led_color(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOy, uint16_t GPIO_Pin2) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	461a      	mov	r2, r3
 8001fac:	460b      	mov	r3, r1
 8001fae:	817b      	strh	r3, [r7, #10]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	813b      	strh	r3, [r7, #8]
	GPIO_PinState bitstatus1;
	GPIO_PinState bitstatus2;

	if ((GPIOx->IDR & GPIO_Pin1) != (uint32_t)GPIO_PIN_RESET) bitstatus1 = GPIO_PIN_SET;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	897b      	ldrh	r3, [r7, #10]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <helper_get_led_color+0x26>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
 8001fc4:	e001      	b.n	8001fca <helper_get_led_color+0x2a>
	else bitstatus1 = GPIO_PIN_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

	if ((GPIOy->IDR & GPIO_Pin2) != (uint32_t)GPIO_PIN_RESET) bitstatus2 = GPIO_PIN_SET;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	893b      	ldrh	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <helper_get_led_color+0x3c>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75bb      	strb	r3, [r7, #22]
 8001fda:	e001      	b.n	8001fe0 <helper_get_led_color+0x40>
	else bitstatus2 = GPIO_PIN_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75bb      	strb	r3, [r7, #22]

	if (!bitstatus1 && bitstatus2) return GREEN_COLOR;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <helper_get_led_color+0x50>
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <helper_get_led_color+0x50>
 8001fec:	2320      	movs	r3, #32
 8001fee:	e010      	b.n	8002012 <helper_get_led_color+0x72>
	else if (bitstatus1 && !bitstatus2) return RED_COLOR;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <helper_get_led_color+0x60>
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <helper_get_led_color+0x60>
 8001ffc:	231e      	movs	r3, #30
 8001ffe:	e008      	b.n	8002012 <helper_get_led_color+0x72>
	else if (bitstatus1 && bitstatus2) return AMBER_COLOR;
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <helper_get_led_color+0x70>
 8002006:	7dbb      	ldrb	r3, [r7, #22]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <helper_get_led_color+0x70>
 800200c:	231f      	movs	r3, #31
 800200e:	e000      	b.n	8002012 <helper_get_led_color+0x72>

	return UNDEFINED_COLOR;
 8002010:	231d      	movs	r3, #29
}
 8002012:	4618      	mov	r0, r3
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <get_led_color>:

int get_led_color(int led) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	switch(led) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b2a      	cmp	r3, #42	; 0x2a
 8002028:	d01a      	beq.n	8002060 <get_led_color+0x44>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b2a      	cmp	r3, #42	; 0x2a
 800202e:	dc21      	bgt.n	8002074 <get_led_color+0x58>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b28      	cmp	r3, #40	; 0x28
 8002034:	d003      	beq.n	800203e <get_led_color+0x22>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b29      	cmp	r3, #41	; 0x29
 800203a:	d009      	beq.n	8002050 <get_led_color+0x34>
 800203c:	e01a      	b.n	8002074 <get_led_color+0x58>
	case TRAFFIC_1_LED:
		return helper_get_led_color(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin,
 800203e:	2308      	movs	r3, #8
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <get_led_color+0x64>)
 8002042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002046:	480f      	ldr	r0, [pc, #60]	; (8002084 <get_led_color+0x68>)
 8002048:	f7ff ffaa 	bl	8001fa0 <helper_get_led_color>
 800204c:	4603      	mov	r3, r0
 800204e:	e012      	b.n	8002076 <get_led_color+0x5a>
				Traffic_1_2_GPIO_Port, Traffic_1_2_Pin);
		break;
	case TRAFFIC_2_LED:
		return helper_get_led_color(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin,
 8002050:	2310      	movs	r3, #16
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <get_led_color+0x64>)
 8002054:	2120      	movs	r1, #32
 8002056:	480a      	ldr	r0, [pc, #40]	; (8002080 <get_led_color+0x64>)
 8002058:	f7ff ffa2 	bl	8001fa0 <helper_get_led_color>
 800205c:	4603      	mov	r3, r0
 800205e:	e00a      	b.n	8002076 <get_led_color+0x5a>
				Traffic_2_2_GPIO_Port, Traffic_2_2_Pin);
		break;
	case PEDESTRIAN_LED:
		return helper_get_led_color(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin,
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <get_led_color+0x68>)
 8002066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <get_led_color+0x64>)
 800206c:	f7ff ff98 	bl	8001fa0 <helper_get_led_color>
 8002070:	4603      	mov	r3, r0
 8002072:	e000      	b.n	8002076 <get_led_color+0x5a>
				Traffic_Pedes_2_GPIO_Port, Traffic_Pedes_2_Pin);
		break;
	default:
		return UNDEFINED_COLOR;
 8002074:	231d      	movs	r3, #29
		break;
	}

	return UNDEFINED_COLOR;
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40010800 	.word	0x40010800

08002088 <helper_clear_led>:

void helper_clear_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
	...

080020a8 <clear_led>:
void clear_led(int led) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	switch(led) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b2a      	cmp	r3, #42	; 0x2a
 80020b4:	d014      	beq.n	80020e0 <clear_led+0x38>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b2a      	cmp	r3, #42	; 0x2a
 80020ba:	dc17      	bgt.n	80020ec <clear_led+0x44>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b28      	cmp	r3, #40	; 0x28
 80020c0:	d003      	beq.n	80020ca <clear_led+0x22>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b29      	cmp	r3, #41	; 0x29
 80020c6:	d006      	beq.n	80020d6 <clear_led+0x2e>
		break;
	case PEDESTRIAN_LED:
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
		break;
	}
}
 80020c8:	e010      	b.n	80020ec <clear_led+0x44>
		helper_clear_led(Traffic_1_1_GPIO_Port, Traffic_1_1_Pin);
 80020ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <clear_led+0x4c>)
 80020d0:	f7ff ffda 	bl	8002088 <helper_clear_led>
		break;
 80020d4:	e00a      	b.n	80020ec <clear_led+0x44>
		helper_clear_led(Traffic_2_1_GPIO_Port, Traffic_2_1_Pin);
 80020d6:	2120      	movs	r1, #32
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <clear_led+0x50>)
 80020da:	f7ff ffd5 	bl	8002088 <helper_clear_led>
		break;
 80020de:	e005      	b.n	80020ec <clear_led+0x44>
		helper_clear_led(Traffic_Pedes_1_GPIO_Port, Traffic_Pedes_1_Pin);
 80020e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <clear_led+0x50>)
 80020e6:	f7ff ffcf 	bl	8002088 <helper_clear_led>
		break;
 80020ea:	bf00      	nop
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40010c00 	.word	0x40010c00

080020fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002122:	f7ff fecb 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002126:	f002 f8bd 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212a:	f7ff f861 	bl	80011f0 <main>
  bx lr
 800212e:	4770      	bx	lr
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002138:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 800213c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8002140:	200005a8 	.word	0x200005a8

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x28>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x28>)
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f947 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fd42 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f95f 	bl	8002456 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f927 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000004c 	.word	0x2000004c
 80021cc:	20000054 	.word	0x20000054
 80021d0:	20000050 	.word	0x20000050

080021d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x1c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_IncTick+0x20>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_IncTick+0x20>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000054 	.word	0x20000054
 80021f4:	20000594 	.word	0x20000594

080021f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_GetTick+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000594 	.word	0x20000594

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fff0 	bl	80021f8 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffe0 	bl	80021f8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000054 	.word	0x20000054

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4906      	ldr	r1, [pc, #24]	; (80022ec <__NVIC_EnableIRQ+0x34>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff90 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff2d 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff42 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff90 	bl	8002344 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5f 	bl	80022f0 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff35 	bl	80022b8 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b08b      	sub	sp, #44	; 0x2c
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e169      	b.n	8002758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002484:	2201      	movs	r2, #1
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8158 	bne.w	8002752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a9a      	ldr	r2, [pc, #616]	; (8002710 <HAL_GPIO_Init+0x2a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d05e      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024ac:	4a98      	ldr	r2, [pc, #608]	; (8002710 <HAL_GPIO_Init+0x2a0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d875      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024b2:	4a98      	ldr	r2, [pc, #608]	; (8002714 <HAL_GPIO_Init+0x2a4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d058      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024b8:	4a96      	ldr	r2, [pc, #600]	; (8002714 <HAL_GPIO_Init+0x2a4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d86f      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024be:	4a96      	ldr	r2, [pc, #600]	; (8002718 <HAL_GPIO_Init+0x2a8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d052      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024c4:	4a94      	ldr	r2, [pc, #592]	; (8002718 <HAL_GPIO_Init+0x2a8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d869      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024ca:	4a94      	ldr	r2, [pc, #592]	; (800271c <HAL_GPIO_Init+0x2ac>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04c      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024d0:	4a92      	ldr	r2, [pc, #584]	; (800271c <HAL_GPIO_Init+0x2ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d863      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024d6:	4a92      	ldr	r2, [pc, #584]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d046      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024dc:	4a90      	ldr	r2, [pc, #576]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d85d      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d82a      	bhi.n	800253c <HAL_GPIO_Init+0xcc>
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d859      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_GPIO_Init+0x80>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	0800256b 	.word	0x0800256b
 80024f4:	08002545 	.word	0x08002545
 80024f8:	08002557 	.word	0x08002557
 80024fc:	08002599 	.word	0x08002599
 8002500:	0800259f 	.word	0x0800259f
 8002504:	0800259f 	.word	0x0800259f
 8002508:	0800259f 	.word	0x0800259f
 800250c:	0800259f 	.word	0x0800259f
 8002510:	0800259f 	.word	0x0800259f
 8002514:	0800259f 	.word	0x0800259f
 8002518:	0800259f 	.word	0x0800259f
 800251c:	0800259f 	.word	0x0800259f
 8002520:	0800259f 	.word	0x0800259f
 8002524:	0800259f 	.word	0x0800259f
 8002528:	0800259f 	.word	0x0800259f
 800252c:	0800259f 	.word	0x0800259f
 8002530:	0800259f 	.word	0x0800259f
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002561 	.word	0x08002561
 800253c:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_GPIO_Init+0x2b4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002542:	e02c      	b.n	800259e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	623b      	str	r3, [r7, #32]
          break;
 800254a:	e029      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	3304      	adds	r3, #4
 8002552:	623b      	str	r3, [r7, #32]
          break;
 8002554:	e024      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	3308      	adds	r3, #8
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e01f      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	330c      	adds	r3, #12
 8002566:	623b      	str	r3, [r7, #32]
          break;
 8002568:	e01a      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002572:	2304      	movs	r3, #4
 8002574:	623b      	str	r3, [r7, #32]
          break;
 8002576:	e013      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002580:	2308      	movs	r3, #8
 8002582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	611a      	str	r2, [r3, #16]
          break;
 800258a:	e009      	b.n	80025a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800258c:	2308      	movs	r3, #8
 800258e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	615a      	str	r2, [r3, #20]
          break;
 8002596:	e003      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          break;
 800259e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2bff      	cmp	r3, #255	; 0xff
 80025a4:	d801      	bhi.n	80025aa <HAL_GPIO_Init+0x13a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	e001      	b.n	80025ae <HAL_GPIO_Init+0x13e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d802      	bhi.n	80025bc <HAL_GPIO_Init+0x14c>
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	e002      	b.n	80025c2 <HAL_GPIO_Init+0x152>
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3b08      	subs	r3, #8
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	210f      	movs	r1, #15
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	431a      	orrs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80b1 	beq.w	8002752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f0:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_GPIO_Init+0x2b8>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	; (8002728 <HAL_GPIO_Init+0x2b8>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_GPIO_Init+0x2b8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002608:	4a48      	ldr	r2, [pc, #288]	; (800272c <HAL_GPIO_Init+0x2bc>)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a40      	ldr	r2, [pc, #256]	; (8002730 <HAL_GPIO_Init+0x2c0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_GPIO_Init+0x1ec>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <HAL_GPIO_Init+0x2c4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00d      	beq.n	8002658 <HAL_GPIO_Init+0x1e8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3e      	ldr	r2, [pc, #248]	; (8002738 <HAL_GPIO_Init+0x2c8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <HAL_GPIO_Init+0x1e4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3d      	ldr	r2, [pc, #244]	; (800273c <HAL_GPIO_Init+0x2cc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_GPIO_Init+0x1e0>
 800264c:	2303      	movs	r3, #3
 800264e:	e006      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002650:	2304      	movs	r3, #4
 8002652:	e004      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002654:	2302      	movs	r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 800265c:	2300      	movs	r3, #0
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4093      	lsls	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800266e:	492f      	ldr	r1, [pc, #188]	; (800272c <HAL_GPIO_Init+0x2bc>)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	492c      	ldr	r1, [pc, #176]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	4928      	ldr	r1, [pc, #160]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4922      	ldr	r1, [pc, #136]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	491e      	ldr	r1, [pc, #120]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	4918      	ldr	r1, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4914      	ldr	r1, [pc, #80]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d021      	beq.n	8002744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	490e      	ldr	r1, [pc, #56]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
 800270c:	e021      	b.n	8002752 <HAL_GPIO_Init+0x2e2>
 800270e:	bf00      	nop
 8002710:	10320000 	.word	0x10320000
 8002714:	10310000 	.word	0x10310000
 8002718:	10220000 	.word	0x10220000
 800271c:	10210000 	.word	0x10210000
 8002720:	10120000 	.word	0x10120000
 8002724:	10110000 	.word	0x10110000
 8002728:	40021000 	.word	0x40021000
 800272c:	40010000 	.word	0x40010000
 8002730:	40010800 	.word	0x40010800
 8002734:	40010c00 	.word	0x40010c00
 8002738:	40011000 	.word	0x40011000
 800273c:	40011400 	.word	0x40011400
 8002740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_GPIO_Init+0x304>)
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	43db      	mvns	r3, r3
 800274c:	4909      	ldr	r1, [pc, #36]	; (8002774 <HAL_GPIO_Init+0x304>)
 800274e:	4013      	ands	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f ae8e 	bne.w	8002484 <HAL_GPIO_Init+0x14>
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	372c      	adds	r7, #44	; 0x2c
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e001      	b.n	800279a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	4613      	mov	r3, r2
 80027b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b6:	787b      	ldrb	r3, [r7, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	041a      	lsls	r2, r3, #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	611a      	str	r2, [r3, #16]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	041a      	lsls	r2, r3, #16
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fef7 	bl	800161a <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e26c      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00c      	beq.n	800287e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002864:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d10b      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06c      	beq.n	8002964 <HAL_RCC_OscConfig+0x12c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e246      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x76>
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e02e      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7a      	ldr	r2, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a77      	ldr	r2, [pc, #476]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbc>
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028f4:	4b6b      	ldr	r3, [pc, #428]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff fc70 	bl	80021f8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff fc6c 	bl	80021f8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1fa      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe4>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff fc5c 	bl	80021f8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff fc58 	bl	80021f8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1e6      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x10c>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1ba      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7ff fc11 	bl	80021f8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7ff fc0d 	bl	80021f8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e19b      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4927      	ldr	r1, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fbf0 	bl	80021f8 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fbec 	bl	80021f8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e17a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7ff fbd0 	bl	80021f8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fbcc 	bl	80021f8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e15a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 fad8 	bl	8003030 <RCC_Delay>
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fbb6 	bl	80021f8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7ff fbb2 	bl	80021f8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e140      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	42420000 	.word	0x42420000
 8002aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a6 	beq.w	8002c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b97      	ldr	r3, [pc, #604]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b94      	ldr	r3, [pc, #592]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a93      	ldr	r2, [pc, #588]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b91      	ldr	r3, [pc, #580]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b8e      	ldr	r3, [pc, #568]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8a      	ldr	r2, [pc, #552]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff fb73 	bl	80021f8 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7ff fb6f 	bl	80021f8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0fd      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a7a      	ldr	r2, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x334>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x356>
 8002b74:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a69      	ldr	r2, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a66      	ldr	r2, [pc, #408]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a63      	ldr	r2, [pc, #396]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7ff fb23 	bl	80021f8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7ff fb1f 	bl	80021f8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0ab      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x37e>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7ff fb0d 	bl	80021f8 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7ff fb09 	bl	80021f8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e095      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8081 	beq.w	8002d22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d061      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d146      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fadd 	bl	80021f8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7ff fad9 	bl	80021f8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e067      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	492d      	ldr	r1, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a19      	ldr	r1, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	4927      	ldr	r1, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7ff faad 	bl	80021f8 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7ff faa9 	bl	80021f8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e037      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x46a>
 8002cc0:	e02f      	b.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fa96 	bl	80021f8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff fa92 	bl	80021f8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e020      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x498>
 8002cee:	e018      	b.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42420060 	.word	0x42420060

08002d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d0      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4965      	ldr	r1, [pc, #404]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d040      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e073      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06b      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4936      	ldr	r1, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff f9e6 	bl	80021f8 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff f9e2 	bl	80021f8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e053      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d210      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f944 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004ba4 	.word	0x08004ba4
 8002f04:	2000004c 	.word	0x2000004c
 8002f08:	20000050 	.word	0x20000050

08002f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b490      	push	{r4, r7}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f14:	1d3c      	adds	r4, r7, #4
 8002f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f1c:	f240 2301 	movw	r3, #513	; 0x201
 8002f20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x40>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x46>
 8002f4a:	e02d      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4e:	623b      	str	r3, [r7, #32]
      break;
 8002f50:	e02d      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f5e:	4413      	add	r3, r2
 8002f60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c5b      	lsrs	r3, r3, #17
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f7e:	4413      	add	r3, r2
 8002f80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	fb02 f203 	mul.w	r2, r2, r3
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
 8002f96:	e004      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	623b      	str	r3, [r7, #32]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	623b      	str	r3, [r7, #32]
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc90      	pop	{r4, r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	08004b94 	.word	0x08004b94
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	007a1200 	.word	0x007a1200
 8002fc8:	003d0900 	.word	0x003d0900

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	2000004c 	.word	0x2000004c

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff2 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	08004bb4 	.word	0x08004bb4

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffde 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	08004bb4 	.word	0x08004bb4

08003030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <RCC_Delay+0x34>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <RCC_Delay+0x38>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a5b      	lsrs	r3, r3, #9
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800304c:	bf00      	nop
  }
  while (Delay --);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <RCC_Delay+0x1c>
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	2000004c 	.word	0x2000004c
 8003068:	10624dd3 	.word	0x10624dd3

0800306c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e041      	b.n	8003102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fddc 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fc28 	bl	8003900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e03a      	b.n	800319a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x58>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x58>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x58>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d010      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e007      	b.n	8003198 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800

080031b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e041      	b.n	8003246 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f839 	bl	800324e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 fb86 	bl	8003900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_TIM_PWM_Start+0x24>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e022      	b.n	80032ca <HAL_TIM_PWM_Start+0x6a>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d109      	bne.n	800329e <HAL_TIM_PWM_Start+0x3e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e015      	b.n	80032ca <HAL_TIM_PWM_Start+0x6a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d109      	bne.n	80032b8 <HAL_TIM_PWM_Start+0x58>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e008      	b.n	80032ca <HAL_TIM_PWM_Start+0x6a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e05e      	b.n	8003390 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_PWM_Start+0x82>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e0:	e013      	b.n	800330a <HAL_TIM_PWM_Start+0xaa>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x92>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	e00b      	b.n	800330a <HAL_TIM_PWM_Start+0xaa>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_PWM_Start+0xa2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003300:	e003      	b.n	800330a <HAL_TIM_PWM_Start+0xaa>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fd74 	bl	8003e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_TIM_PWM_Start+0x138>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d107      	bne.n	8003332 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIM_PWM_Start+0x138>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIM_PWM_Start+0xfa>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d009      	beq.n	800335a <HAL_TIM_PWM_Start+0xfa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_TIM_PWM_Start+0x13c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIM_PWM_Start+0xfa>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIM_PWM_Start+0x140>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b06      	cmp	r3, #6
 800336a:	d010      	beq.n	800338e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	e007      	b.n	800338e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800

080033a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0202 	mvn.w	r2, #2
 80033d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa6f 	bl	80038ca <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa62 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fa71 	bl	80038dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0204 	mvn.w	r2, #4
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa45 	bl	80038ca <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa38 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa47 	bl	80038dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b08      	cmp	r3, #8
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0208 	mvn.w	r2, #8
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2204      	movs	r2, #4
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa1b 	bl	80038ca <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa0e 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa1d 	bl	80038dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0210 	mvn.w	r2, #16
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2208      	movs	r2, #8
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9f1 	bl	80038ca <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9e4 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9f3 	bl	80038dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0201 	mvn.w	r2, #1
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f866 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fce1 	bl	8003f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9b7 	bl	80038ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b20      	cmp	r3, #32
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b20      	cmp	r3, #32
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0220 	mvn.w	r2, #32
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fcac 	bl	8003f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e0ac      	b.n	8003728 <HAL_TIM_PWM_ConfigChannel+0x174>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	f200 809f 	bhi.w	800371c <HAL_TIM_PWM_ConfigChannel+0x168>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003619 	.word	0x08003619
 80035e8:	0800371d 	.word	0x0800371d
 80035ec:	0800371d 	.word	0x0800371d
 80035f0:	0800371d 	.word	0x0800371d
 80035f4:	08003659 	.word	0x08003659
 80035f8:	0800371d 	.word	0x0800371d
 80035fc:	0800371d 	.word	0x0800371d
 8003600:	0800371d 	.word	0x0800371d
 8003604:	0800369b 	.word	0x0800369b
 8003608:	0800371d 	.word	0x0800371d
 800360c:	0800371d 	.word	0x0800371d
 8003610:	0800371d 	.word	0x0800371d
 8003614:	080036db 	.word	0x080036db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f9d0 	bl	80039c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6999      	ldr	r1, [r3, #24]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	619a      	str	r2, [r3, #24]
      break;
 8003656:	e062      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fa16 	bl	8003a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]
      break;
 8003698:	e041      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa5f 	bl	8003b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0208 	orr.w	r2, r2, #8
 80036b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0204 	bic.w	r2, r2, #4
 80036c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69d9      	ldr	r1, [r3, #28]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	61da      	str	r2, [r3, #28]
      break;
 80036d8:	e021      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 faa9 	bl	8003c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	021a      	lsls	r2, r3, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	61da      	str	r2, [r3, #28]
      break;
 800371a:	e000      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800371c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x18>
 8003744:	2302      	movs	r3, #2
 8003746:	e0b3      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x180>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d03e      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0xd0>
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	f200 8087 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x168>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	f000 8085 	beq.w	800389c <HAL_TIM_ConfigClockSource+0x16c>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d87f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 8003798:	2b70      	cmp	r3, #112	; 0x70
 800379a:	d01a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0xa2>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d87b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037a0:	2b60      	cmp	r3, #96	; 0x60
 80037a2:	d050      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x116>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d877      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d03c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xf6>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d873      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d058      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x136>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d86f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037b8:	2b30      	cmp	r3, #48	; 0x30
 80037ba:	d064      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x156>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d86b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d060      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x156>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d867      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x156>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d05a      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037d0:	e062      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f000 faee 	bl	8003dc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
      break;
 80037fe:	e04e      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f000 fad7 	bl	8003dc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e03b      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f000 fa4e 	bl	8003cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2150      	movs	r1, #80	; 0x50
 800383e:	4618      	mov	r0, r3
 8003840:	f000 faa5 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003844:	e02b      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	461a      	mov	r2, r3
 8003854:	f000 fa6c 	bl	8003d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2160      	movs	r1, #96	; 0x60
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fa95 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003864:	e01b      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fa2e 	bl	8003cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fa85 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003884:	e00b      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 fa7c 	bl	8003d8e <TIM_ITRx_SetConfig>
        break;
 8003896:	e002      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003898:	bf00      	nop
 800389a:	e000      	b.n	800389e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800389c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a29      	ldr	r2, [pc, #164]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <TIM_Base_SetConfig+0xbc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <TIM_Base_SetConfig+0xc0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d108      	bne.n	8003942 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <TIM_Base_SetConfig+0xbc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <TIM_Base_SetConfig+0xc0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0308 	bic.w	r3, r3, #8
 8003a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0210 	bic.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <TIM_OC2_SetConfig+0xd0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <TIM_OC2_SetConfig+0xd0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d113      	bne.n	8003b3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC3_SetConfig+0xd0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10d      	bne.n	8003bde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <TIM_OC3_SetConfig+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d113      	bne.n	8003c0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00

08003c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <TIM_OC4_SetConfig+0x98>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d109      	bne.n	8003cac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00

08003cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 030a 	bic.w	r3, r3, #10
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 0210 	bic.w	r2, r3, #16
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	031b      	lsls	r3, r3, #12
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f043 0307 	orr.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b087      	sub	sp, #28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	021a      	lsls	r2, r3, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	609a      	str	r2, [r3, #8]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2201      	movs	r2, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e046      	b.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10c      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800

08003f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e03f      	b.n	8003fba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fef0 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f905 	bl	800417c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08a      	sub	sp, #40	; 0x28
 8003fc6:	af02      	add	r7, sp, #8
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d17c      	bne.n	80040dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_Transmit+0x2c>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e075      	b.n	80040de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Transmit+0x3e>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e06e      	b.n	80040de <HAL_UART_Transmit+0x11c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2221      	movs	r2, #33	; 0x21
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004016:	f7fe f8ef 	bl	80021f8 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d108      	bne.n	8004044 <HAL_UART_Transmit+0x82>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004054:	e02a      	b.n	80040ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f840 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e036      	b.n	80040de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3302      	adds	r3, #2
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e007      	b.n	800409e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1cf      	bne.n	8004056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f810 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e006      	b.n	80040de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	e02c      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d028      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
 8004106:	f7fe f877 	bl	80021f8 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d21d      	bcs.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004124:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d0c3      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041b6:	f023 030c 	bic.w	r3, r3, #12
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <UART_SetConfig+0x114>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7fe ff10 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	e002      	b.n	80041f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fef8 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80041f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <UART_SetConfig+0x118>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	0119      	lsls	r1, r3, #4
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <UART_SetConfig+0x118>)
 800422a:	fba3 0302 	umull	r0, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2064      	movs	r0, #100	; 0x64
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <UART_SetConfig+0x118>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004248:	4419      	add	r1, r3
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009a      	lsls	r2, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <UART_SetConfig+0x118>)
 8004262:	fba3 0302 	umull	r0, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2064      	movs	r0, #100	; 0x64
 800426a:	fb00 f303 	mul.w	r3, r0, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	3332      	adds	r3, #50	; 0x32
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <UART_SetConfig+0x118>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	440a      	add	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40013800 	.word	0x40013800
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000058 	.word	0x20000058

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4d0c      	ldr	r5, [pc, #48]	; (80042dc <__libc_init_array+0x38>)
 80042aa:	4c0d      	ldr	r4, [pc, #52]	; (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	f000 fc5c 	bl	8004b70 <_init>
 80042b8:	2600      	movs	r6, #0
 80042ba:	4d0a      	ldr	r5, [pc, #40]	; (80042e4 <__libc_init_array+0x40>)
 80042bc:	4c0a      	ldr	r4, [pc, #40]	; (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08004bf0 	.word	0x08004bf0
 80042e0:	08004bf0 	.word	0x08004bf0
 80042e4:	08004bf0 	.word	0x08004bf0
 80042e8:	08004bf4 	.word	0x08004bf4

080042ec <memset>:
 80042ec:	4603      	mov	r3, r0
 80042ee:	4402      	add	r2, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <siprintf>:
 80042fc:	b40e      	push	{r1, r2, r3}
 80042fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004302:	b500      	push	{lr}
 8004304:	b09c      	sub	sp, #112	; 0x70
 8004306:	ab1d      	add	r3, sp, #116	; 0x74
 8004308:	9002      	str	r0, [sp, #8]
 800430a:	9006      	str	r0, [sp, #24]
 800430c:	9107      	str	r1, [sp, #28]
 800430e:	9104      	str	r1, [sp, #16]
 8004310:	4808      	ldr	r0, [pc, #32]	; (8004334 <siprintf+0x38>)
 8004312:	4909      	ldr	r1, [pc, #36]	; (8004338 <siprintf+0x3c>)
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	a902      	add	r1, sp, #8
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	f000 f868 	bl	80043f4 <_svfiprintf_r>
 8004324:	2200      	movs	r2, #0
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	b01c      	add	sp, #112	; 0x70
 800432c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004330:	b003      	add	sp, #12
 8004332:	4770      	bx	lr
 8004334:	20000058 	.word	0x20000058
 8004338:	ffff0208 	.word	0xffff0208

0800433c <__ssputs_r>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	688e      	ldr	r6, [r1, #8]
 8004342:	4682      	mov	sl, r0
 8004344:	429e      	cmp	r6, r3
 8004346:	460c      	mov	r4, r1
 8004348:	4690      	mov	r8, r2
 800434a:	461f      	mov	r7, r3
 800434c:	d838      	bhi.n	80043c0 <__ssputs_r+0x84>
 800434e:	898a      	ldrh	r2, [r1, #12]
 8004350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004354:	d032      	beq.n	80043bc <__ssputs_r+0x80>
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	6909      	ldr	r1, [r1, #16]
 800435a:	3301      	adds	r3, #1
 800435c:	eba5 0901 	sub.w	r9, r5, r1
 8004360:	6965      	ldr	r5, [r4, #20]
 8004362:	444b      	add	r3, r9
 8004364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800436c:	106d      	asrs	r5, r5, #1
 800436e:	429d      	cmp	r5, r3
 8004370:	bf38      	it	cc
 8004372:	461d      	movcc	r5, r3
 8004374:	0553      	lsls	r3, r2, #21
 8004376:	d531      	bpl.n	80043dc <__ssputs_r+0xa0>
 8004378:	4629      	mov	r1, r5
 800437a:	f000 fb53 	bl	8004a24 <_malloc_r>
 800437e:	4606      	mov	r6, r0
 8004380:	b950      	cbnz	r0, 8004398 <__ssputs_r+0x5c>
 8004382:	230c      	movs	r3, #12
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f8ca 3000 	str.w	r3, [sl]
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004398:	464a      	mov	r2, r9
 800439a:	6921      	ldr	r1, [r4, #16]
 800439c:	f000 face 	bl	800493c <memcpy>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	6126      	str	r6, [r4, #16]
 80043ae:	444e      	add	r6, r9
 80043b0:	6026      	str	r6, [r4, #0]
 80043b2:	463e      	mov	r6, r7
 80043b4:	6165      	str	r5, [r4, #20]
 80043b6:	eba5 0509 	sub.w	r5, r5, r9
 80043ba:	60a5      	str	r5, [r4, #8]
 80043bc:	42be      	cmp	r6, r7
 80043be:	d900      	bls.n	80043c2 <__ssputs_r+0x86>
 80043c0:	463e      	mov	r6, r7
 80043c2:	4632      	mov	r2, r6
 80043c4:	4641      	mov	r1, r8
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	f000 fac6 	bl	8004958 <memmove>
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	1b9b      	subs	r3, r3, r6
 80043d2:	4432      	add	r2, r6
 80043d4:	2000      	movs	r0, #0
 80043d6:	60a3      	str	r3, [r4, #8]
 80043d8:	6022      	str	r2, [r4, #0]
 80043da:	e7db      	b.n	8004394 <__ssputs_r+0x58>
 80043dc:	462a      	mov	r2, r5
 80043de:	f000 fb7b 	bl	8004ad8 <_realloc_r>
 80043e2:	4606      	mov	r6, r0
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1e1      	bne.n	80043ac <__ssputs_r+0x70>
 80043e8:	4650      	mov	r0, sl
 80043ea:	6921      	ldr	r1, [r4, #16]
 80043ec:	f000 face 	bl	800498c <_free_r>
 80043f0:	e7c7      	b.n	8004382 <__ssputs_r+0x46>
	...

080043f4 <_svfiprintf_r>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	4698      	mov	r8, r3
 80043fa:	898b      	ldrh	r3, [r1, #12]
 80043fc:	4607      	mov	r7, r0
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	460d      	mov	r5, r1
 8004402:	4614      	mov	r4, r2
 8004404:	b09d      	sub	sp, #116	; 0x74
 8004406:	d50e      	bpl.n	8004426 <_svfiprintf_r+0x32>
 8004408:	690b      	ldr	r3, [r1, #16]
 800440a:	b963      	cbnz	r3, 8004426 <_svfiprintf_r+0x32>
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	f000 fb09 	bl	8004a24 <_malloc_r>
 8004412:	6028      	str	r0, [r5, #0]
 8004414:	6128      	str	r0, [r5, #16]
 8004416:	b920      	cbnz	r0, 8004422 <_svfiprintf_r+0x2e>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e0d1      	b.n	80045c6 <_svfiprintf_r+0x1d2>
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	616b      	str	r3, [r5, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	2320      	movs	r3, #32
 800442c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004430:	2330      	movs	r3, #48	; 0x30
 8004432:	f04f 0901 	mov.w	r9, #1
 8004436:	f8cd 800c 	str.w	r8, [sp, #12]
 800443a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045e0 <_svfiprintf_r+0x1ec>
 800443e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004442:	4623      	mov	r3, r4
 8004444:	469a      	mov	sl, r3
 8004446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444a:	b10a      	cbz	r2, 8004450 <_svfiprintf_r+0x5c>
 800444c:	2a25      	cmp	r2, #37	; 0x25
 800444e:	d1f9      	bne.n	8004444 <_svfiprintf_r+0x50>
 8004450:	ebba 0b04 	subs.w	fp, sl, r4
 8004454:	d00b      	beq.n	800446e <_svfiprintf_r+0x7a>
 8004456:	465b      	mov	r3, fp
 8004458:	4622      	mov	r2, r4
 800445a:	4629      	mov	r1, r5
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ff6d 	bl	800433c <__ssputs_r>
 8004462:	3001      	adds	r0, #1
 8004464:	f000 80aa 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446a:	445a      	add	r2, fp
 800446c:	9209      	str	r2, [sp, #36]	; 0x24
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a2 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004478:	2300      	movs	r3, #0
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004482:	f10a 0a01 	add.w	sl, sl, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	9307      	str	r3, [sp, #28]
 800448a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448e:	931a      	str	r3, [sp, #104]	; 0x68
 8004490:	4654      	mov	r4, sl
 8004492:	2205      	movs	r2, #5
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	4851      	ldr	r0, [pc, #324]	; (80045e0 <_svfiprintf_r+0x1ec>)
 800449a:	f000 fa41 	bl	8004920 <memchr>
 800449e:	9a04      	ldr	r2, [sp, #16]
 80044a0:	b9d8      	cbnz	r0, 80044da <_svfiprintf_r+0xe6>
 80044a2:	06d0      	lsls	r0, r2, #27
 80044a4:	bf44      	itt	mi
 80044a6:	2320      	movmi	r3, #32
 80044a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ac:	0711      	lsls	r1, r2, #28
 80044ae:	bf44      	itt	mi
 80044b0:	232b      	movmi	r3, #43	; 0x2b
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d015      	beq.n	80044ea <_svfiprintf_r+0xf6>
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	9a07      	ldr	r2, [sp, #28]
 80044c8:	4621      	mov	r1, r4
 80044ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ce:	3b30      	subs	r3, #48	; 0x30
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d94e      	bls.n	8004572 <_svfiprintf_r+0x17e>
 80044d4:	b1b0      	cbz	r0, 8004504 <_svfiprintf_r+0x110>
 80044d6:	9207      	str	r2, [sp, #28]
 80044d8:	e014      	b.n	8004504 <_svfiprintf_r+0x110>
 80044da:	eba0 0308 	sub.w	r3, r0, r8
 80044de:	fa09 f303 	lsl.w	r3, r9, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	46a2      	mov	sl, r4
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	e7d2      	b.n	8004490 <_svfiprintf_r+0x9c>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9103      	str	r1, [sp, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbb      	ittet	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	f042 0202 	orrlt.w	r2, r2, #2
 80044fc:	9307      	strge	r3, [sp, #28]
 80044fe:	9307      	strlt	r3, [sp, #28]
 8004500:	bfb8      	it	lt
 8004502:	9204      	strlt	r2, [sp, #16]
 8004504:	7823      	ldrb	r3, [r4, #0]
 8004506:	2b2e      	cmp	r3, #46	; 0x2e
 8004508:	d10c      	bne.n	8004524 <_svfiprintf_r+0x130>
 800450a:	7863      	ldrb	r3, [r4, #1]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d135      	bne.n	800457c <_svfiprintf_r+0x188>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	3402      	adds	r4, #2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9203      	str	r2, [sp, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045f0 <_svfiprintf_r+0x1fc>
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	7821      	ldrb	r1, [r4, #0]
 800452e:	f000 f9f7 	bl	8004920 <memchr>
 8004532:	b140      	cbz	r0, 8004546 <_svfiprintf_r+0x152>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	eba0 000a 	sub.w	r0, r0, sl
 800453a:	fa03 f000 	lsl.w	r0, r3, r0
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	3401      	adds	r4, #1
 8004542:	4303      	orrs	r3, r0
 8004544:	9304      	str	r3, [sp, #16]
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	2206      	movs	r2, #6
 800454c:	4825      	ldr	r0, [pc, #148]	; (80045e4 <_svfiprintf_r+0x1f0>)
 800454e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004552:	f000 f9e5 	bl	8004920 <memchr>
 8004556:	2800      	cmp	r0, #0
 8004558:	d038      	beq.n	80045cc <_svfiprintf_r+0x1d8>
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <_svfiprintf_r+0x1f4>)
 800455c:	bb1b      	cbnz	r3, 80045a6 <_svfiprintf_r+0x1b2>
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	3307      	adds	r3, #7
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	3308      	adds	r3, #8
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456c:	4433      	add	r3, r6
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	e767      	b.n	8004442 <_svfiprintf_r+0x4e>
 8004572:	460c      	mov	r4, r1
 8004574:	2001      	movs	r0, #1
 8004576:	fb0c 3202 	mla	r2, ip, r2, r3
 800457a:	e7a5      	b.n	80044c8 <_svfiprintf_r+0xd4>
 800457c:	2300      	movs	r3, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	4619      	mov	r1, r3
 8004584:	3401      	adds	r4, #1
 8004586:	9305      	str	r3, [sp, #20]
 8004588:	4620      	mov	r0, r4
 800458a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458e:	3a30      	subs	r2, #48	; 0x30
 8004590:	2a09      	cmp	r2, #9
 8004592:	d903      	bls.n	800459c <_svfiprintf_r+0x1a8>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0c5      	beq.n	8004524 <_svfiprintf_r+0x130>
 8004598:	9105      	str	r1, [sp, #20]
 800459a:	e7c3      	b.n	8004524 <_svfiprintf_r+0x130>
 800459c:	4604      	mov	r4, r0
 800459e:	2301      	movs	r3, #1
 80045a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a4:	e7f0      	b.n	8004588 <_svfiprintf_r+0x194>
 80045a6:	ab03      	add	r3, sp, #12
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	462a      	mov	r2, r5
 80045ac:	4638      	mov	r0, r7
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045b0:	a904      	add	r1, sp, #16
 80045b2:	f3af 8000 	nop.w
 80045b6:	1c42      	adds	r2, r0, #1
 80045b8:	4606      	mov	r6, r0
 80045ba:	d1d6      	bne.n	800456a <_svfiprintf_r+0x176>
 80045bc:	89ab      	ldrh	r3, [r5, #12]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	f53f af2c 	bmi.w	800441c <_svfiprintf_r+0x28>
 80045c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c6:	b01d      	add	sp, #116	; 0x74
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045cc:	ab03      	add	r3, sp, #12
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	462a      	mov	r2, r5
 80045d2:	4638      	mov	r0, r7
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045d6:	a904      	add	r1, sp, #16
 80045d8:	f000 f87c 	bl	80046d4 <_printf_i>
 80045dc:	e7eb      	b.n	80045b6 <_svfiprintf_r+0x1c2>
 80045de:	bf00      	nop
 80045e0:	08004bbc 	.word	0x08004bbc
 80045e4:	08004bc6 	.word	0x08004bc6
 80045e8:	00000000 	.word	0x00000000
 80045ec:	0800433d 	.word	0x0800433d
 80045f0:	08004bc2 	.word	0x08004bc2

080045f4 <_printf_common>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	4616      	mov	r6, r2
 80045fa:	4699      	mov	r9, r3
 80045fc:	688a      	ldr	r2, [r1, #8]
 80045fe:	690b      	ldr	r3, [r1, #16]
 8004600:	4607      	mov	r7, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	bfb8      	it	lt
 8004606:	4613      	movlt	r3, r2
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460e:	460c      	mov	r4, r1
 8004610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004614:	b10a      	cbz	r2, 800461a <_printf_common+0x26>
 8004616:	3301      	adds	r3, #1
 8004618:	6033      	str	r3, [r6, #0]
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	0699      	lsls	r1, r3, #26
 800461e:	bf42      	ittt	mi
 8004620:	6833      	ldrmi	r3, [r6, #0]
 8004622:	3302      	addmi	r3, #2
 8004624:	6033      	strmi	r3, [r6, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	f015 0506 	ands.w	r5, r5, #6
 800462c:	d106      	bne.n	800463c <_printf_common+0x48>
 800462e:	f104 0a19 	add.w	sl, r4, #25
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	42ab      	cmp	r3, r5
 800463a:	dc28      	bgt.n	800468e <_printf_common+0x9a>
 800463c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004640:	1e13      	subs	r3, r2, #0
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	bf18      	it	ne
 8004646:	2301      	movne	r3, #1
 8004648:	0692      	lsls	r2, r2, #26
 800464a:	d42d      	bmi.n	80046a8 <_printf_common+0xb4>
 800464c:	4649      	mov	r1, r9
 800464e:	4638      	mov	r0, r7
 8004650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d020      	beq.n	800469c <_printf_common+0xa8>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	68e5      	ldr	r5, [r4, #12]
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	2b04      	cmp	r3, #4
 8004664:	bf18      	it	ne
 8004666:	2500      	movne	r5, #0
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	68a3      	ldr	r3, [r4, #8]
 8004670:	bf08      	it	eq
 8004672:	1aad      	subeq	r5, r5, r2
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf08      	it	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	4293      	cmp	r3, r2
 800467e:	bfc4      	itt	gt
 8004680:	1a9b      	subgt	r3, r3, r2
 8004682:	18ed      	addgt	r5, r5, r3
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xcc>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xac>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4649      	mov	r1, r9
 8004694:	4638      	mov	r0, r7
 8004696:	47c0      	blx	r8
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xb0>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c4      	b.n	8004632 <_printf_common+0x3e>
 80046a8:	2030      	movs	r0, #48	; 0x30
 80046aa:	18e1      	adds	r1, r4, r3
 80046ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b6:	4422      	add	r2, r4
 80046b8:	3302      	adds	r3, #2
 80046ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046be:	e7c5      	b.n	800464c <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4649      	mov	r1, r9
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c0      	blx	r8
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa8>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x92>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	460c      	mov	r4, r1
 80046da:	7e27      	ldrb	r7, [r4, #24]
 80046dc:	4691      	mov	r9, r2
 80046de:	2f78      	cmp	r7, #120	; 0x78
 80046e0:	4680      	mov	r8, r0
 80046e2:	469a      	mov	sl, r3
 80046e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	; 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d9 	beq.w	80048a8 <_printf_i+0x1d4>
 80046f6:	2f58      	cmp	r7, #88	; 0x58
 80046f8:	f000 80a4 	beq.w	8004844 <_printf_i+0x170>
 80046fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a001      	add	r0, pc, #4	; (adr r0, 8004714 <_printf_i+0x40>)
 8004710:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	0800488f 	.word	0x0800488f
 8004744:	080047b1 	.word	0x080047b1
 8004748:	08004871 	.word	0x08004871
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048b1 	.word	0x080048b1
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047b1 	.word	0x080047b1
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004879 	.word	0x08004879
 800476c:	680b      	ldr	r3, [r1, #0]
 800476e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	600a      	str	r2, [r1, #0]
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e0a4      	b.n	80048ca <_printf_i+0x1f6>
 8004780:	6825      	ldr	r5, [r4, #0]
 8004782:	6808      	ldr	r0, [r1, #0]
 8004784:	062e      	lsls	r6, r5, #24
 8004786:	f100 0304 	add.w	r3, r0, #4
 800478a:	d50a      	bpl.n	80047a2 <_printf_i+0xce>
 800478c:	6805      	ldr	r5, [r0, #0]
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	2d00      	cmp	r5, #0
 8004792:	da03      	bge.n	800479c <_printf_i+0xc8>
 8004794:	232d      	movs	r3, #45	; 0x2d
 8004796:	426d      	negs	r5, r5
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479c:	230a      	movs	r3, #10
 800479e:	485e      	ldr	r0, [pc, #376]	; (8004918 <_printf_i+0x244>)
 80047a0:	e019      	b.n	80047d6 <_printf_i+0x102>
 80047a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047a6:	6805      	ldr	r5, [r0, #0]
 80047a8:	600b      	str	r3, [r1, #0]
 80047aa:	bf18      	it	ne
 80047ac:	b22d      	sxthne	r5, r5
 80047ae:	e7ef      	b.n	8004790 <_printf_i+0xbc>
 80047b0:	680b      	ldr	r3, [r1, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	1d18      	adds	r0, r3, #4
 80047b6:	6008      	str	r0, [r1, #0]
 80047b8:	0628      	lsls	r0, r5, #24
 80047ba:	d501      	bpl.n	80047c0 <_printf_i+0xec>
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	e002      	b.n	80047c6 <_printf_i+0xf2>
 80047c0:	0669      	lsls	r1, r5, #25
 80047c2:	d5fb      	bpl.n	80047bc <_printf_i+0xe8>
 80047c4:	881d      	ldrh	r5, [r3, #0]
 80047c6:	2f6f      	cmp	r7, #111	; 0x6f
 80047c8:	bf0c      	ite	eq
 80047ca:	2308      	moveq	r3, #8
 80047cc:	230a      	movne	r3, #10
 80047ce:	4852      	ldr	r0, [pc, #328]	; (8004918 <_printf_i+0x244>)
 80047d0:	2100      	movs	r1, #0
 80047d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d6:	6866      	ldr	r6, [r4, #4]
 80047d8:	2e00      	cmp	r6, #0
 80047da:	bfa8      	it	ge
 80047dc:	6821      	ldrge	r1, [r4, #0]
 80047de:	60a6      	str	r6, [r4, #8]
 80047e0:	bfa4      	itt	ge
 80047e2:	f021 0104 	bicge.w	r1, r1, #4
 80047e6:	6021      	strge	r1, [r4, #0]
 80047e8:	b90d      	cbnz	r5, 80047ee <_printf_i+0x11a>
 80047ea:	2e00      	cmp	r6, #0
 80047ec:	d04d      	beq.n	800488a <_printf_i+0x1b6>
 80047ee:	4616      	mov	r6, r2
 80047f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f4:	fb03 5711 	mls	r7, r3, r1, r5
 80047f8:	5dc7      	ldrb	r7, [r0, r7]
 80047fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047fe:	462f      	mov	r7, r5
 8004800:	42bb      	cmp	r3, r7
 8004802:	460d      	mov	r5, r1
 8004804:	d9f4      	bls.n	80047f0 <_printf_i+0x11c>
 8004806:	2b08      	cmp	r3, #8
 8004808:	d10b      	bne.n	8004822 <_printf_i+0x14e>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	07df      	lsls	r7, r3, #31
 800480e:	d508      	bpl.n	8004822 <_printf_i+0x14e>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	6861      	ldr	r1, [r4, #4]
 8004814:	4299      	cmp	r1, r3
 8004816:	bfde      	ittt	le
 8004818:	2330      	movle	r3, #48	; 0x30
 800481a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800481e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004822:	1b92      	subs	r2, r2, r6
 8004824:	6122      	str	r2, [r4, #16]
 8004826:	464b      	mov	r3, r9
 8004828:	4621      	mov	r1, r4
 800482a:	4640      	mov	r0, r8
 800482c:	f8cd a000 	str.w	sl, [sp]
 8004830:	aa03      	add	r2, sp, #12
 8004832:	f7ff fedf 	bl	80045f4 <_printf_common>
 8004836:	3001      	adds	r0, #1
 8004838:	d14c      	bne.n	80048d4 <_printf_i+0x200>
 800483a:	f04f 30ff 	mov.w	r0, #4294967295
 800483e:	b004      	add	sp, #16
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	4834      	ldr	r0, [pc, #208]	; (8004918 <_printf_i+0x244>)
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800484a:	680e      	ldr	r6, [r1, #0]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004852:	061f      	lsls	r7, r3, #24
 8004854:	600e      	str	r6, [r1, #0]
 8004856:	d514      	bpl.n	8004882 <_printf_i+0x1ae>
 8004858:	07d9      	lsls	r1, r3, #31
 800485a:	bf44      	itt	mi
 800485c:	f043 0320 	orrmi.w	r3, r3, #32
 8004860:	6023      	strmi	r3, [r4, #0]
 8004862:	b91d      	cbnz	r5, 800486c <_printf_i+0x198>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2310      	movs	r3, #16
 800486e:	e7af      	b.n	80047d0 <_printf_i+0xfc>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	f043 0320 	orr.w	r3, r3, #32
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	2378      	movs	r3, #120	; 0x78
 800487a:	4828      	ldr	r0, [pc, #160]	; (800491c <_printf_i+0x248>)
 800487c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004880:	e7e3      	b.n	800484a <_printf_i+0x176>
 8004882:	065e      	lsls	r6, r3, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	e7e6      	b.n	8004858 <_printf_i+0x184>
 800488a:	4616      	mov	r6, r2
 800488c:	e7bb      	b.n	8004806 <_printf_i+0x132>
 800488e:	680b      	ldr	r3, [r1, #0]
 8004890:	6826      	ldr	r6, [r4, #0]
 8004892:	1d1d      	adds	r5, r3, #4
 8004894:	6960      	ldr	r0, [r4, #20]
 8004896:	600d      	str	r5, [r1, #0]
 8004898:	0635      	lsls	r5, r6, #24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	d501      	bpl.n	80048a2 <_printf_i+0x1ce>
 800489e:	6018      	str	r0, [r3, #0]
 80048a0:	e002      	b.n	80048a8 <_printf_i+0x1d4>
 80048a2:	0671      	lsls	r1, r6, #25
 80048a4:	d5fb      	bpl.n	800489e <_printf_i+0x1ca>
 80048a6:	8018      	strh	r0, [r3, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	4616      	mov	r6, r2
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	e7ba      	b.n	8004826 <_printf_i+0x152>
 80048b0:	680b      	ldr	r3, [r1, #0]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	600a      	str	r2, [r1, #0]
 80048b6:	681e      	ldr	r6, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4630      	mov	r0, r6
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	f000 f82f 	bl	8004920 <memchr>
 80048c2:	b108      	cbz	r0, 80048c8 <_printf_i+0x1f4>
 80048c4:	1b80      	subs	r0, r0, r6
 80048c6:	6060      	str	r0, [r4, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	2300      	movs	r3, #0
 80048ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d2:	e7a8      	b.n	8004826 <_printf_i+0x152>
 80048d4:	4632      	mov	r2, r6
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	47d0      	blx	sl
 80048de:	3001      	adds	r0, #1
 80048e0:	d0ab      	beq.n	800483a <_printf_i+0x166>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	079b      	lsls	r3, r3, #30
 80048e6:	d413      	bmi.n	8004910 <_printf_i+0x23c>
 80048e8:	68e0      	ldr	r0, [r4, #12]
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	4298      	cmp	r0, r3
 80048ee:	bfb8      	it	lt
 80048f0:	4618      	movlt	r0, r3
 80048f2:	e7a4      	b.n	800483e <_printf_i+0x16a>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4632      	mov	r2, r6
 80048f8:	4649      	mov	r1, r9
 80048fa:	4640      	mov	r0, r8
 80048fc:	47d0      	blx	sl
 80048fe:	3001      	adds	r0, #1
 8004900:	d09b      	beq.n	800483a <_printf_i+0x166>
 8004902:	3501      	adds	r5, #1
 8004904:	68e3      	ldr	r3, [r4, #12]
 8004906:	9903      	ldr	r1, [sp, #12]
 8004908:	1a5b      	subs	r3, r3, r1
 800490a:	42ab      	cmp	r3, r5
 800490c:	dcf2      	bgt.n	80048f4 <_printf_i+0x220>
 800490e:	e7eb      	b.n	80048e8 <_printf_i+0x214>
 8004910:	2500      	movs	r5, #0
 8004912:	f104 0619 	add.w	r6, r4, #25
 8004916:	e7f5      	b.n	8004904 <_printf_i+0x230>
 8004918:	08004bcd 	.word	0x08004bcd
 800491c:	08004bde 	.word	0x08004bde

08004920 <memchr>:
 8004920:	4603      	mov	r3, r0
 8004922:	b510      	push	{r4, lr}
 8004924:	b2c9      	uxtb	r1, r1
 8004926:	4402      	add	r2, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	4618      	mov	r0, r3
 800492c:	d101      	bne.n	8004932 <memchr+0x12>
 800492e:	2000      	movs	r0, #0
 8004930:	e003      	b.n	800493a <memchr+0x1a>
 8004932:	7804      	ldrb	r4, [r0, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	428c      	cmp	r4, r1
 8004938:	d1f6      	bne.n	8004928 <memchr+0x8>
 800493a:	bd10      	pop	{r4, pc}

0800493c <memcpy>:
 800493c:	440a      	add	r2, r1
 800493e:	4291      	cmp	r1, r2
 8004940:	f100 33ff 	add.w	r3, r0, #4294967295
 8004944:	d100      	bne.n	8004948 <memcpy+0xc>
 8004946:	4770      	bx	lr
 8004948:	b510      	push	{r4, lr}
 800494a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494e:	4291      	cmp	r1, r2
 8004950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004954:	d1f9      	bne.n	800494a <memcpy+0xe>
 8004956:	bd10      	pop	{r4, pc}

08004958 <memmove>:
 8004958:	4288      	cmp	r0, r1
 800495a:	b510      	push	{r4, lr}
 800495c:	eb01 0402 	add.w	r4, r1, r2
 8004960:	d902      	bls.n	8004968 <memmove+0x10>
 8004962:	4284      	cmp	r4, r0
 8004964:	4623      	mov	r3, r4
 8004966:	d807      	bhi.n	8004978 <memmove+0x20>
 8004968:	1e43      	subs	r3, r0, #1
 800496a:	42a1      	cmp	r1, r4
 800496c:	d008      	beq.n	8004980 <memmove+0x28>
 800496e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004976:	e7f8      	b.n	800496a <memmove+0x12>
 8004978:	4601      	mov	r1, r0
 800497a:	4402      	add	r2, r0
 800497c:	428a      	cmp	r2, r1
 800497e:	d100      	bne.n	8004982 <memmove+0x2a>
 8004980:	bd10      	pop	{r4, pc}
 8004982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800498a:	e7f7      	b.n	800497c <memmove+0x24>

0800498c <_free_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	2900      	cmp	r1, #0
 8004992:	d043      	beq.n	8004a1c <_free_r+0x90>
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f0c      	subs	r4, r1, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfb8      	it	lt
 800499e:	18e4      	addlt	r4, r4, r3
 80049a0:	f000 f8d0 	bl	8004b44 <__malloc_lock>
 80049a4:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <_free_r+0x94>)
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	4610      	mov	r0, r2
 80049aa:	b933      	cbnz	r3, 80049ba <_free_r+0x2e>
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6014      	str	r4, [r2, #0]
 80049b0:	4628      	mov	r0, r5
 80049b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b6:	f000 b8cb 	b.w	8004b50 <__malloc_unlock>
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	d90a      	bls.n	80049d4 <_free_r+0x48>
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	1862      	adds	r2, r4, r1
 80049c2:	4293      	cmp	r3, r2
 80049c4:	bf01      	itttt	eq
 80049c6:	681a      	ldreq	r2, [r3, #0]
 80049c8:	685b      	ldreq	r3, [r3, #4]
 80049ca:	1852      	addeq	r2, r2, r1
 80049cc:	6022      	streq	r2, [r4, #0]
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	6004      	str	r4, [r0, #0]
 80049d2:	e7ed      	b.n	80049b0 <_free_r+0x24>
 80049d4:	461a      	mov	r2, r3
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b10b      	cbz	r3, 80049de <_free_r+0x52>
 80049da:	42a3      	cmp	r3, r4
 80049dc:	d9fa      	bls.n	80049d4 <_free_r+0x48>
 80049de:	6811      	ldr	r1, [r2, #0]
 80049e0:	1850      	adds	r0, r2, r1
 80049e2:	42a0      	cmp	r0, r4
 80049e4:	d10b      	bne.n	80049fe <_free_r+0x72>
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	4401      	add	r1, r0
 80049ea:	1850      	adds	r0, r2, r1
 80049ec:	4283      	cmp	r3, r0
 80049ee:	6011      	str	r1, [r2, #0]
 80049f0:	d1de      	bne.n	80049b0 <_free_r+0x24>
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4401      	add	r1, r0
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e7d8      	b.n	80049b0 <_free_r+0x24>
 80049fe:	d902      	bls.n	8004a06 <_free_r+0x7a>
 8004a00:	230c      	movs	r3, #12
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	e7d4      	b.n	80049b0 <_free_r+0x24>
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1821      	adds	r1, r4, r0
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	bf01      	itttt	eq
 8004a0e:	6819      	ldreq	r1, [r3, #0]
 8004a10:	685b      	ldreq	r3, [r3, #4]
 8004a12:	1809      	addeq	r1, r1, r0
 8004a14:	6021      	streq	r1, [r4, #0]
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	6054      	str	r4, [r2, #4]
 8004a1a:	e7c9      	b.n	80049b0 <_free_r+0x24>
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000164 	.word	0x20000164

08004a24 <_malloc_r>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	1ccd      	adds	r5, r1, #3
 8004a28:	f025 0503 	bic.w	r5, r5, #3
 8004a2c:	3508      	adds	r5, #8
 8004a2e:	2d0c      	cmp	r5, #12
 8004a30:	bf38      	it	cc
 8004a32:	250c      	movcc	r5, #12
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	4606      	mov	r6, r0
 8004a38:	db01      	blt.n	8004a3e <_malloc_r+0x1a>
 8004a3a:	42a9      	cmp	r1, r5
 8004a3c:	d903      	bls.n	8004a46 <_malloc_r+0x22>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a46:	f000 f87d 	bl	8004b44 <__malloc_lock>
 8004a4a:	4921      	ldr	r1, [pc, #132]	; (8004ad0 <_malloc_r+0xac>)
 8004a4c:	680a      	ldr	r2, [r1, #0]
 8004a4e:	4614      	mov	r4, r2
 8004a50:	b99c      	cbnz	r4, 8004a7a <_malloc_r+0x56>
 8004a52:	4f20      	ldr	r7, [pc, #128]	; (8004ad4 <_malloc_r+0xb0>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b923      	cbnz	r3, 8004a62 <_malloc_r+0x3e>
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 f862 	bl	8004b24 <_sbrk_r>
 8004a60:	6038      	str	r0, [r7, #0]
 8004a62:	4629      	mov	r1, r5
 8004a64:	4630      	mov	r0, r6
 8004a66:	f000 f85d 	bl	8004b24 <_sbrk_r>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	d123      	bne.n	8004ab6 <_malloc_r+0x92>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	4630      	mov	r0, r6
 8004a72:	6033      	str	r3, [r6, #0]
 8004a74:	f000 f86c 	bl	8004b50 <__malloc_unlock>
 8004a78:	e7e3      	b.n	8004a42 <_malloc_r+0x1e>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	1b5b      	subs	r3, r3, r5
 8004a7e:	d417      	bmi.n	8004ab0 <_malloc_r+0x8c>
 8004a80:	2b0b      	cmp	r3, #11
 8004a82:	d903      	bls.n	8004a8c <_malloc_r+0x68>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	441c      	add	r4, r3
 8004a88:	6025      	str	r5, [r4, #0]
 8004a8a:	e004      	b.n	8004a96 <_malloc_r+0x72>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	bf0c      	ite	eq
 8004a92:	600b      	streq	r3, [r1, #0]
 8004a94:	6053      	strne	r3, [r2, #4]
 8004a96:	4630      	mov	r0, r6
 8004a98:	f000 f85a 	bl	8004b50 <__malloc_unlock>
 8004a9c:	f104 000b 	add.w	r0, r4, #11
 8004aa0:	1d23      	adds	r3, r4, #4
 8004aa2:	f020 0007 	bic.w	r0, r0, #7
 8004aa6:	1ac2      	subs	r2, r0, r3
 8004aa8:	d0cc      	beq.n	8004a44 <_malloc_r+0x20>
 8004aaa:	1a1b      	subs	r3, r3, r0
 8004aac:	50a3      	str	r3, [r4, r2]
 8004aae:	e7c9      	b.n	8004a44 <_malloc_r+0x20>
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	6864      	ldr	r4, [r4, #4]
 8004ab4:	e7cc      	b.n	8004a50 <_malloc_r+0x2c>
 8004ab6:	1cc4      	adds	r4, r0, #3
 8004ab8:	f024 0403 	bic.w	r4, r4, #3
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d0e3      	beq.n	8004a88 <_malloc_r+0x64>
 8004ac0:	1a21      	subs	r1, r4, r0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f82e 	bl	8004b24 <_sbrk_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d1dd      	bne.n	8004a88 <_malloc_r+0x64>
 8004acc:	e7cf      	b.n	8004a6e <_malloc_r+0x4a>
 8004ace:	bf00      	nop
 8004ad0:	20000164 	.word	0x20000164
 8004ad4:	20000168 	.word	0x20000168

08004ad8 <_realloc_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	4607      	mov	r7, r0
 8004adc:	4614      	mov	r4, r2
 8004ade:	460e      	mov	r6, r1
 8004ae0:	b921      	cbnz	r1, 8004aec <_realloc_r+0x14>
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ae8:	f7ff bf9c 	b.w	8004a24 <_malloc_r>
 8004aec:	b922      	cbnz	r2, 8004af8 <_realloc_r+0x20>
 8004aee:	f7ff ff4d 	bl	800498c <_free_r>
 8004af2:	4625      	mov	r5, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af8:	f000 f830 	bl	8004b5c <_malloc_usable_size_r>
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d20f      	bcs.n	8004b20 <_realloc_r+0x48>
 8004b00:	4621      	mov	r1, r4
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7ff ff8e 	bl	8004a24 <_malloc_r>
 8004b08:	4605      	mov	r5, r0
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d0f2      	beq.n	8004af4 <_realloc_r+0x1c>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4622      	mov	r2, r4
 8004b12:	f7ff ff13 	bl	800493c <memcpy>
 8004b16:	4631      	mov	r1, r6
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f7ff ff37 	bl	800498c <_free_r>
 8004b1e:	e7e9      	b.n	8004af4 <_realloc_r+0x1c>
 8004b20:	4635      	mov	r5, r6
 8004b22:	e7e7      	b.n	8004af4 <_realloc_r+0x1c>

08004b24 <_sbrk_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	2300      	movs	r3, #0
 8004b28:	4d05      	ldr	r5, [pc, #20]	; (8004b40 <_sbrk_r+0x1c>)
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fd f98e 	bl	8001e50 <_sbrk>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_sbrk_r+0x1a>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_sbrk_r+0x1a>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000598 	.word	0x20000598

08004b44 <__malloc_lock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__malloc_lock+0x8>)
 8004b46:	f000 b811 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	200005a0 	.word	0x200005a0

08004b50 <__malloc_unlock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_unlock+0x8>)
 8004b52:	f000 b80c 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	200005a0 	.word	0x200005a0

08004b5c <_malloc_usable_size_r>:
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f18      	subs	r0, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbc      	itt	lt
 8004b66:	580b      	ldrlt	r3, [r1, r0]
 8004b68:	18c0      	addlt	r0, r0, r3
 8004b6a:	4770      	bx	lr

08004b6c <__retarget_lock_acquire_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_release_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <_init>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr

08004b7c <_fini>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr
